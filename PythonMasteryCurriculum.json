[
  {
    "lesson": "Lesson 1: Foundational Lessons (Core Syntax & Built-ins)",
    "skills": [
      {
        "skill": "Skill 1: Printing to the Console (`print()`)",
        "exercises": [
          {
            "exercise": "Print a single string",
            "answer": "print('Hello, World!')"
          },
          {
            "exercise": "Print multiple values with commas",
            "answer": "print('Hello', 'World', 'Python')"
          },
          {
            "exercise": "Use `end=\"\"` to avoid newline",
            "answer": "print('Hello', end='')"
          },
          {
            "exercise": "Use `sep=\"...\"` to change the separator",
            "answer": "print('apple', 'banana', 'cherry', sep=', ')"
          },
          {
            "exercise": "Use escape characters (`\\n`, `\\t`, `\\\\`)",
            "answer": "print('Line 1\\nLine 2\\tTabbed\\\\Backslash')"
          }
        ]
      },
      {
        "skill": "Skill 2: Using Comments and Docstrings",
        "exercises": [
          {
            "exercise": "Single-line comments using `#`",
            "answer": "# This is a single-line comment"
          },
          {
            "exercise": "Inline comments on the same line as code",
            "answer": "x = 5  # This is an inline comment"
          },
          {
            "exercise": "Multi-line comments using triple quotes (`\"\"\"`)",
            "answer": "\"\"\"This is a\nmulti-line comment\nspanning multiple lines\"\"\""
          },
          {
            "exercise": "Docstrings for documenting functions and modules",
            "answer": "def greet():\n    \"\"\"This function greets the user.\"\"\"\n    return \"Hello!\""
          },
          {
            "exercise": "Accessing docstrings with `help()` or `.__doc__`",
            "answer": "help(greet)\n# or: print(greet.__doc__)"
          }
        ]
      },
      {
        "skill": "Skill 3: Declaring and Assigning Variables",
        "exercises": [
          {
            "exercise": "Assigning integers, floats, and strings",
            "answer": "x = 42\ny = 3.14\nname = 'Alice'"
          },
          {
            "exercise": "Reassigning variable types",
            "answer": "x = 10\nx = 'now a string'\nx = 3.14"
          },
          {
            "exercise": "Chained assignment (`a = b = 0`)",
            "answer": "a = b = 0"
          },
          {
            "exercise": "Multiple assignment (`a, b = 1, 2`)",
            "answer": "a, b = 1, 2"
          },
          {
            "exercise": "Using `_` for unused variables (`a, _, b = ...`)",
            "answer": "a, _, b = (1, 2, 3)"
          },
          {
            "exercise": "String concatenation",
            "answer": "greeting = 'Hello' + ' ' + 'World'"
          },
          {
            "exercise": ".Skillat()",
            "answer": "name = 'Alice'\ngreeting = 'Hello, {}!'.format(name)"
          },
          {
            "exercise": "F-strings",
            "answer": "name = 'Alice'\nage = 30\nprint(f'My name is {name} and I am {age} years old')"
          }
        ]
      },
      {
        "skill": "Skill 4: Understanding Data Types",
        "exercises": [
          {
            "exercise": "`int` and basic arithmetic",
            "answer": "x = 5 + 3  # 8\ny = 10 - 4  # 6\nz = 6 * 7  # 42\nw = 20 / 4  # 5.0"
          },
          {
            "exercise": "`float` and decimal precision",
            "answer": "x = 3.14\ny = 0.1 + 0.2  # 0.30000000000000004"
          },
          {
            "exercise": "`str` and immutability",
            "answer": "s = 'hello'\n# Strings are immutable\n# s[0] = 'H'  # This would raise TypeError"
          },
          {
            "exercise": "`bool` and truthy/falsy values",
            "answer": "is_valid = True\nis_empty = False\nprint(bool(0))  # False\nprint(bool(1))  # True"
          },
          {
            "exercise": "`None` and null semantics",
            "answer": "x = None\nif x is None:\n    print('x is None')"
          },
          {
            "exercise": "Use `type()` to check types",
            "answer": "x = 42\nprint(type(x))  # <class 'int'>"
          },
          {
            "exercise": "Use `isinstance()` for safe type checks",
            "answer": "x = 42\nprint(isinstance(x, int))  # True\nprint(isinstance(x, str))  # False"
          }
        ]
      },
      {
        "skill": "Skill 5: Concatenation & String Interpolation",
        "exercises": [
          {
            "exercise": "Simple string concatenation using `+`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Using `.lessonat()` for substitution",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Using f-strings for readable lessonatting",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Combining text and numbers with type conversion (`str(n)`)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 6: Slicing Strings and Lists",
        "exercises": [
          {
            "exercise": "Basic slice: `s[1:4]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "From start: `s[:4]`, to end: `s[3:]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Full slice copy: `s[:]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Step slicing: `s[::2]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Negative indices: `s[-1]`, `s[-4:-1]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Reverse a string: `s[::-1]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Slicing edge cases: `s[5:2]`, `s[100:]`, empty result",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 7: Common String Methods",
        "exercises": [
          {
            "exercise": "`.strip()`, `.lstrip()`, `.rstrip()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`.lower()` and `.upper()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`.replace(old, new)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`.split()` and `.rsplit()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`.find()` and `.index()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`.startswith()` and `.endswith()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Chaining string methods (e.g. `s.strip().lower()`)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 8: Basic Numeric Operations",
        "exercises": [
          {
            "exercise": "Addition, subtraction, multiplication, division (`+ - * /`)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Integer division `//`, modulus `%`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Exponentiation `**`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Operator precedence",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Combining math with `round()`, `abs()`, `pow()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 9: Type Conversion",
        "exercises": [
          {
            "exercise": "Convert number to string: `str(42)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert string to int: `int(\"123\")`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert float to int: `int(3.99)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert string to float: `float(\"4.5\")`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Coercion with `str()`, `int()`, `float()` during concatenation",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 10: Object Identity and `id()`",
        "exercises": [
          {
            "exercise": "Use `id()` to inspect memory identity",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Compare objects with `is` vs `==`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Demonstrate when `is` returns True vs False",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Identity behavior for immutable vs mutable types",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Show that integers and strings may be interned",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 2: Strings & Text Manipulation",
    "skills": [
      {
        "skill": "Skill 1: String Creation and Assignment",
        "exercises": [
          {
            "exercise": "Declare a string using single quotes",
            "answer": "s = 'Hello World'"
          },
          {
            "exercise": "Declare a string using double quotes",
            "answer": "s = \"Hello World\""
          },
          {
            "exercise": "Create multiline strings with triple quotes",
            "answer": "s = \"\"\"This is a\nmultiline\nstring\"\"\""
          },
          {
            "exercise": "Assign a string to a variable",
            "answer": "greeting = 'Hello, World!'"
          },
          {
            "exercise": "Use escape sequences (`\\n`, `\\t`, `\\\\`, `\\\"`)",
            "answer": "s = 'Line 1\\nLine 2\\tTabbed\\\\Backslash\\'Single\"Double'"
          }
        ]
      },
      {
        "skill": "Skill 2: String Concatenation and Interpolation",
        "exercises": [
          {
            "exercise": "Concatenate strings with `+`",
            "answer": "s1 = 'Hello'\ns2 = 'World'\nresult = s1 + ' ' + s2"
          },
          {
            "exercise": "Join strings using `join()`",
            "answer": "words = ['Hello', 'World', 'Python']\nresult = ' '.join(words)"
          },
          {
            "exercise": "Interpolate using `.Skillat()`",
            "answer": "name = 'Alice'\ngreeting = 'Hello, {}!'.format(name)"
          },
          {
            "exercise": "Interpolate using f-strings",
            "answer": "name = 'Alice'\nage = 30\ngreeting = f'Hello, {name}. You are {age} years old.'"
          },
          {
            "exercise": "Combine strings and numbers with `str()`",
            "answer": "num = 42\ntext = 'The answer is ' + str(num)"
          },
          {
            "exercise": "Build strings in loops",
            "answer": "result = ''\nfor word in ['Hello', 'World']:\n    result += word + ' '"
          }
        ]
      },
      {
        "skill": "Skill 3: String Repetition and Length",
        "exercises": [
          {
            "exercise": "Repeat strings with `*`",
            "answer": "s = 'Ha' * 3  # 'HaHaHa'"
          },
          {
            "exercise": "Measure string length with `len()`",
            "answer": "s = 'Hello'\nlength = len(s)  # 5"
          }
        ]
      },
      {
        "skill": "Skill 4: Indexing and Slicing",
        "exercises": [
          {
            "exercise": "Access individual characters with indexing (`s[0]`)",
            "answer": "s = 'Python'\nprint(s[0])  # 'P'\nprint(s[3])  # 'h'"
          },
          {
            "exercise": "Slice from index to index (`s[1:4]`)",
            "answer": "s = 'Python'\nprint(s[1:4])  # 'yth'"
          },
          {
            "exercise": "Slice from start (`s[:4]`)",
            "answer": "s = 'Python'\nprint(s[:4])  # 'Pyth'"
          },
          {
            "exercise": "Slice to end (`s[2:]`)",
            "answer": "s = 'Python'\nprint(s[2:])  # 'thon'"
          },
          {
            "exercise": "Full slice copy (`s[:]`)",
            "answer": "s = 'Python'\ncopy = s[:]  # 'Python'"
          },
          {
            "exercise": "Step slicing (`s[::2]`)",
            "answer": "s = 'Python'\nprint(s[::2])  # 'Pto'"
          },
          {
            "exercise": "Reverse string with slice (`s[::-1]`)",
            "answer": "s = 'Python'\nprint(s[::-1])  # 'nohtyP'"
          },
          {
            "exercise": "Slice with negative indices (`s[-4:-1]`)",
            "answer": "s = 'Python'\nprint(s[-4:-1])  # 'tho'"
          },
          {
            "exercise": "Handle empty slice result",
            "answer": "s = 'Python'\nprint(s[10:20])  # ''"
          }
        ]
      },
      {
        "skill": "Skill 5: String Inspection",
        "exercises": [
          {
            "exercise": "Check substring with `in`",
            "answer": "s = 'Hello World'\nprint('World' in s)  # True"
          },
          {
            "exercise": "Use `.startswith()` and `.endswith()`",
            "answer": "s = 'Hello World'\nprint(s.startswith('Hello'))  # True\nprint(s.endswith('World'))  # True"
          },
          {
            "exercise": "Find position with `.find()`",
            "answer": "s = 'Hello World'\nprint(s.find('World'))  # 6"
          },
          {
            "exercise": "Find position with `.index()`",
            "answer": "s = 'Hello World'\nprint(s.index('World'))  # 6"
          }
        ]
      },
      {
        "skill": "Skill 6: String Cleaning and Case Handling",
        "exercises": [
          {
            "exercise": "Remove whitespace with `.strip()`",
            "answer": "s = '  hello  '\nprint(s.strip())  # 'hello'"
          },
          {
            "exercise": "Remove leading/trailing whitespace with `.lstrip()` and `.rstrip()`",
            "answer": "s = '  hello  '\nprint(s.lstrip())  # 'hello  '\nprint(s.rstrip())  # '  hello'"
          },
          {
            "exercise": "Convert to lowercase with `.lower()`",
            "answer": "s = 'HELLO'\nprint(s.lower())  # 'hello'"
          },
          {
            "exercise": "Convert to uppercase with `.upper()`",
            "answer": "s = 'hello'\nprint(s.upper())  # 'HELLO'"
          },
          {
            "exercise": "Capitalize first character with `.capitalize()`",
            "answer": "s = 'hello'\nprint(s.capitalize())  # 'Hello'"
          },
          {
            "exercise": "Swap case with `.swapcase()`",
            "answer": "s = 'Hello'\nprint(s.swapcase())  # 'hELLO'"
          },
          {
            "exercise": "Title-case a string with `.title()`",
            "answer": "s = 'hello world'\nprint(s.title())  # 'Hello World'"
          }
        ]
      },
      {
        "skill": "Skill 7: Splitting and Joining Strings",
        "exercises": [
          {
            "exercise": "Split by default (whitespace)",
            "answer": "s = 'hello world python'\nwords = s.split()  # ['hello', 'world', 'python']"
          },
          {
            "exercise": "Split with delimiter (e.g. `\",\"`)",
            "answer": "s = 'apple,banana,cherry'\nfruits = s.split(',')  # ['apple', 'banana', 'cherry']"
          },
          {
            "exercise": "Split only once with `.split(delim, 1)`",
            "answer": "s = 'apple,banana,cherry'\nparts = s.split(',', 1)  # ['apple', 'banana,cherry']"
          },
          {
            "exercise": "RSplit from the right",
            "answer": "s = 'apple,banana,cherry'\nparts = s.rsplit(',', 1)  # ['apple,banana', 'cherry']"
          },
          {
            "exercise": "Join list of strings into one string",
            "answer": "words = ['Hello', 'World', 'Python']\nresult = ' '.join(words)  # 'Hello World Python'"
          },
          {
            "exercise": "Join characters from iterable into string",
            "answer": "chars = ['H', 'e', 'l', 'l', 'o']\nresult = ''.join(chars)  # 'Hello'"
          }
        ]
      },
      {
        "skill": "Skill 8: String Replacement and Padding",
        "exercises": [
          {
            "exercise": "Replace substrings with `.replace()`",
            "answer": "s = 'Hello World'\nresult = s.replace('World', 'Python')  # 'Hello Python'"
          },
          {
            "exercise": "Left pad with `.rjust()`",
            "answer": "s = 'hi'\nresult = s.rjust(5)  # '   hi'"
          },
          {
            "exercise": "Right pad with `.ljust()`",
            "answer": "s = 'hi'\nresult = s.ljust(5)  # 'hi   '"
          },
          {
            "exercise": "Center text with `.center()`",
            "answer": "s = 'hi'\nresult = s.center(5)  # ' hi  '"
          },
          {
            "exercise": "Zero-fill numbers with `.zfill()`",
            "answer": "num = '42'\nresult = num.zfill(5)  # '00042'"
          }
        ]
      },
      {
        "skill": "Skill 9: String Validation",
        "exercises": [
          {
            "exercise": ".isalpha()",
            "answer": "s = 'hello'\nprint(s.isalpha())  # True"
          },
          {
            "exercise": ".isdigit()",
            "answer": "s = '12345'\nprint(s.isdigit())  # True"
          },
          {
            "exercise": ".isalnum()",
            "answer": "s = 'hello123'\nprint(s.isalnum())  # True"
          },
          {
            "exercise": ".isspace()",
            "answer": "s = '   '\nprint(s.isspace())  # True"
          },
          {
            "exercise": "`.islower()` and `.isupper()`",
            "answer": "s = 'hello'\nprint(s.islower())  # True\ns = 'HELLO'\nprint(s.isupper())  # True"
          },
          {
            "exercise": "Validate user input with string methods",
            "answer": "user_input = 'Alice123'\nif user_input.isalnum():\n    print('Valid username')"
          }
        ]
      },
      {
        "skill": "Skill 10: Advanced String Skillatting",
        "exercises": [
          {
            "exercise": "Skillat numbers with width and precision",
            "answer": "pi = 3.14159\nprint(f'{pi:.2f}')  # '3.14'\nprint(f'{pi:8.3f}')  # '   3.142'"
          },
          {
            "exercise": "Align text using `:<`, `:>`, and `:^`",
            "answer": "name = 'Alice'\nprint(f'{name:<10}')  # 'Alice     '\nprint(f'{name:>10}')  # '     Alice'\nprint(f'{name:^10}')  # '  Alice   '"
          },
          {
            "exercise": "Skillat numbers as currency or percentages",
            "answer": "value = 1234.56\nprint(f'${value:,.2f}')  # '$1,234.56'\nratio = 0.85\nprint(f'{ratio:.1%}')  # '85.0%'"
          },
          {
            "exercise": "Use dictionaries or objects in f-strings",
            "answer": "person = {'name': 'Alice', 'age': 30}\nprint(f\"{person['name']} is {person['age']}\")  # Alice is 30"
          },
          {
            "exercise": "Escape braces in f-strings",
            "answer": "value = 42\nprint(f'{{value}}')  # '{value}'"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 3: Lists & Sequences",
    "skills": [
      {
        "skill": "Skill 1: Creating and Assigning Lists",
        "exercises": [
          {
            "exercise": "Create a list with literals",
            "answer": "lst = [1, 2, 3, 4, 5]"
          },
          {
            "exercise": "Assign a list to a variable",
            "answer": "numbers = [1, 2, 3, 4, 5]"
          },
          {
            "exercise": "Create an empty list",
            "answer": "empty = []"
          },
          {
            "exercise": "Use `list()` to convert iterable",
            "answer": "lst = list('hello')  # ['h', 'e', 'l', 'l', 'o']\nlst2 = list(range(5))  # [0, 1, 2, 3, 4]"
          },
          {
            "exercise": "Nest lists within lists",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
          }
        ]
      },
      {
        "skill": "Skill 2: Indexing and Access",
        "exercises": [
          {
            "exercise": "Access list elements by index",
            "answer": "lst = [10, 20, 30, 40]\nprint(lst[0])  # 10\nprint(lst[2])  # 30"
          },
          {
            "exercise": "Access elements with negative indices",
            "answer": "lst = [10, 20, 30, 40]\nprint(lst[-1])  # 40\nprint(lst[-2])  # 30"
          },
          {
            "exercise": "Access nested elements (`matrix[1][2]`)",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6]]\nprint(matrix[1][2])  # 6"
          },
          {
            "exercise": "Index out of range and how to avoid it",
            "answer": "lst = [1, 2, 3]\n# print(lst[10])  # IndexError\nif len(lst) > 10:\n    print(lst[10])"
          }
        ]
      },
      {
        "skill": "Skill 3: List Slicing",
        "exercises": [
          {
            "exercise": "Slice from index to index (`lst[1:4]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[1:4])  # [1, 2, 3]"
          },
          {
            "exercise": "Slice from start (`lst[:3]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[:3])  # [0, 1, 2]"
          },
          {
            "exercise": "Slice to end (`lst[2:]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[2:])  # [2, 3, 4, 5]"
          },
          {
            "exercise": "Full slice copy (`lst[:]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\ncopy = lst[:]  # [0, 1, 2, 3, 4, 5]"
          },
          {
            "exercise": "Step slicing (`lst[::2]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[::2])  # [0, 2, 4]"
          },
          {
            "exercise": "Reverse list with slicing (`lst[::-1]`)",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[::-1])  # [5, 4, 3, 2, 1, 0]"
          },
          {
            "exercise": "Slice with negative indices",
            "answer": "lst = [0, 1, 2, 3, 4, 5]\nprint(lst[-4:-1])  # [2, 3, 4]"
          },
          {
            "exercise": "Slicing edge cases and empty results",
            "answer": "lst = [1, 2, 3]\nprint(lst[5:10])  # []\nprint(lst[100:])  # []"
          }
        ]
      },
      {
        "skill": "Skill 4: Modifying Lists",
        "exercises": [
          {
            "exercise": "Assign to an index (`lst[0] = x`)",
            "answer": "lst = [1, 2, 3]\nlst[0] = 10  # [10, 2, 3]"
          },
          {
            "exercise": "Assign to a slice (`lst[1:3] = [...]`)",
            "answer": "lst = [1, 2, 3, 4, 5]\nlst[1:3] = [20, 30]  # [1, 20, 30, 4, 5]"
          },
          {
            "exercise": "Append to a list with `.append()`",
            "answer": "lst = [1, 2, 3]\nlst.append(4)  # [1, 2, 3, 4]"
          },
          {
            "exercise": "Insert with `.insert(index, value)`",
            "answer": "lst = [1, 2, 3]\nlst.insert(1, 10)  # [1, 10, 2, 3]"
          },
          {
            "exercise": "Extend list with `.extend()`",
            "answer": "lst = [1, 2, 3]\nlst.extend([4, 5])  # [1, 2, 3, 4, 5]"
          },
          {
            "exercise": "Concatenate lists with `+`",
            "answer": "lst1 = [1, 2]\nlst2 = [3, 4]\nresult = lst1 + lst2  # [1, 2, 3, 4]"
          },
          {
            "exercise": "Multiply list with `*`",
            "answer": "lst = [1, 2]\nresult = lst * 3  # [1, 2, 1, 2, 1, 2]"
          },
          {
            "exercise": "Delete with `del lst[index]`",
            "answer": "lst = [1, 2, 3, 4]\ndel lst[1]  # [1, 3, 4]"
          },
          {
            "exercise": "Remove by value with `.remove()`",
            "answer": "lst = [1, 2, 3, 2]\nlst.remove(2)  # [1, 3, 2] (removes first occurrence)"
          },
          {
            "exercise": "Pop elements with `.pop()`",
            "answer": "lst = [1, 2, 3]\nitem = lst.pop()  # item=3, lst=[1, 2]\nitem2 = lst.pop(0)  # item2=1, lst=[2]"
          }
        ]
      },
      {
        "skill": "Skill 5: List Search and Inspection",
        "exercises": [
          {
            "exercise": "Check membership with `in`",
            "answer": "lst = [1, 2, 3]\nprint(2 in lst)  # True\nprint(5 in lst)  # False"
          },
          {
            "exercise": "Find index with `.index()`",
            "answer": "lst = [1, 2, 3, 2]\nprint(lst.index(2))  # 1 (first occurrence)"
          },
          {
            "exercise": "Count occurrences with `.count()`",
            "answer": "lst = [1, 2, 3, 2, 2]\nprint(lst.count(2))  # 3"
          },
          {
            "exercise": "Compare lists with `==`",
            "answer": "lst1 = [1, 2, 3]\nlst2 = [1, 2, 3]\nprint(lst1 == lst2)  # True"
          }
        ]
      },
      {
        "skill": "Skill 6: Sorting and Reversing Lists",
        "exercises": [
          {
            "exercise": "Sort list in place with `.sort()`",
            "answer": "lst = [3, 1, 2]\nlst.sort()  # lst = [1, 2, 3]"
          },
          {
            "exercise": "Get sorted copy with `sorted()`",
            "answer": "lst = [3, 1, 2]\nsorted_lst = sorted(lst)  # sorted_lst = [1, 2, 3], lst unchanged"
          },
          {
            "exercise": "Reverse list in place with `.reverse()`",
            "answer": "lst = [1, 2, 3]\nlst.reverse()  # lst = [3, 2, 1]"
          },
          {
            "exercise": "Get reversed copy with `reversed()`",
            "answer": "lst = [1, 2, 3]\nreversed_lst = list(reversed(lst))  # [3, 2, 1]"
          },
          {
            "exercise": "Sort with `key` functions",
            "answer": "words = ['apple', 'Banana', 'cherry']\nwords.sort(key=str.lower)  # ['apple', 'Banana', 'cherry']"
          },
          {
            "exercise": "Sort with `key` and `reverse=True`",
            "answer": "lst = [3, 1, 4, 1, 5]\nlst.sort(reverse=True)  # [5, 4, 3, 1, 1]"
          }
        ]
      },
      {
        "skill": "Skill 7: Looping and Building Lists",
        "exercises": [
          {
            "exercise": "Loop through a list",
            "answer": "lst = [1, 2, 3]\nfor item in lst:\n    print(item)"
          },
          {
            "exercise": "Use `enumerate()` in loop",
            "answer": "lst = ['a', 'b', 'c']\nfor i, val in enumerate(lst):\n    print(i, val)"
          },
          {
            "exercise": "Build list with for-loop",
            "answer": "result = []\nfor i in range(5):\n    result.append(i * 2)"
          },
          {
            "exercise": "Filter list with for-loop",
            "answer": "numbers = [1, 2, 3, 4, 5]\neven = []\nfor n in numbers:\n    if n % 2 == 0:\n        even.append(n)"
          },
          {
            "exercise": "Conditional appends in loop",
            "answer": "result = []\nfor i in range(3):\n    if i % 2 == 0:\n        result.append(i)"
          },
          {
            "exercise": "Nested loops to build list",
            "answer": "result = []\nfor i in range(3):\n    for j in range(2):\n        result.append((i, j))"
          },
          {
            "exercise": "Loop through list of tuples",
            "answer": "pairs = [(1, 'a'), (2, 'b'), (3, 'c')]\nfor num, letter in pairs:\n    print(num, letter)"
          },
          {
            "exercise": "Use `zip()` to iterate in parallel",
            "answer": "names = ['Alice', 'Bob']\nages = [25, 30]\nfor name, age in zip(names, ages):\n    print(name, age)"
          },
          {
            "exercise": "Loop with range and indices",
            "answer": "lst = [1, 2, 3]\nfor i in range(len(lst)):\n    print(i, lst[i])"
          },
          {
            "exercise": "Loop over reversed list",
            "answer": "lst = [1, 2, 3]\nfor item in reversed(lst):\n    print(item)"
          }
        ]
      },
      {
        "skill": "Skill 8: Copying and Cloning Lists",
        "exercises": [
          {
            "exercise": "Copy with slicing (`lst[:]`)",
            "answer": "lst = [1, 2, 3]\ncopy = lst[:]"
          },
          {
            "exercise": "Copy with `list()`",
            "answer": "lst = [1, 2, 3]\ncopy = list(lst)"
          },
          {
            "exercise": "Copy with `.copy()`",
            "answer": "lst = [1, 2, 3]\ncopy = lst.copy()"
          },
          {
            "exercise": "Deep copy with `copy.deepcopy()`",
            "answer": "import copy\nlst = [[1, 2], [3, 4]]\ndeep = copy.deepcopy(lst)"
          },
          {
            "exercise": "Differences between shallow and deep copies",
            "answer": "lst = [1, [2, 3]]\nshallow = lst.copy()  # shallow[1] still refers to same [2, 3]\ndeep = copy.deepcopy(lst)  # deep[1] is a new copy"
          }
        ]
      },
      {
        "skill": "Skill 9: List Comprehensions",
        "exercises": [
          {
            "exercise": "Basic list comprehension",
            "answer": "squares = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]"
          },
          {
            "exercise": "Comprehension with condition",
            "answer": "numbers = [1, 2, 3, 4, 5]\neven = [x for x in numbers if x % 2 == 0]  # [2, 4]"
          },
          {
            "exercise": "Nested comprehensions",
            "answer": "matrix = [[1, 2], [3, 4]]\nflat = [x for row in matrix for x in row]  # [1, 2, 3, 4]"
          },
          {
            "exercise": "Replace map/filter with comprehensions",
            "answer": "numbers = [1, 2, 3]\ndoubled = list(map(lambda x: x*2, numbers))  # or [x*2 for x in numbers]"
          },
          {
            "exercise": "List comprehension with `zip()`",
            "answer": "pairs = list(zip([1, 2], ['a', 'b']))\nresult = [f'{n}{l}' for n, l in pairs]  # ['1a', '2b']"
          }
        ]
      },
      {
        "skill": "Skill 10: Flattening and Deduplicating",
        "exercises": [
          {
            "exercise": "Flatten 2D list with loop",
            "answer": "matrix = [[1, 2], [3, 4]]\nflat = []\nfor row in matrix:\n    for item in row:\n        flat.append(item)"
          },
          {
            "exercise": "Flatten with nested comprehension",
            "answer": "matrix = [[1, 2], [3, 4]]\nflat = [x for row in matrix for x in row]  # [1, 2, 3, 4]"
          },
          {
            "exercise": "Remove duplicates using `set()`",
            "answer": "lst = [1, 2, 2, 3, 3, 3]\nunique = list(set(lst))  # [1, 2, 3] (order not preserved)"
          },
          {
            "exercise": "Manual deduplication with loop",
            "answer": "lst = [1, 2, 2, 3]\nunique = []\nfor x in lst:\n    if x not in unique:\n        unique.append(x)"
          },
          {
            "exercise": "Deduplicate while preserving order",
            "answer": "lst = [1, 2, 2, 3, 3, 3]\nunique = []\nseen = set()\nfor x in lst:\n    if x not in seen:\n        unique.append(x)\n        seen.add(x)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 4: Conditionals & Boolean Logic",
    "skills": [
      {
        "skill": "Skill 1: Basic If Statements",
        "exercises": [
          {
            "exercise": "Write a basic `if` statement",
            "answer": "x = 5\nif x > 0:\n    print('positive')"
          },
          {
            "exercise": "Use `if` with comparison operators",
            "answer": "x = 5\ny = 10\nif x < y:\n    print('x is less than y')"
          },
          {
            "exercise": "Use `if` with logical operators (`and`, `or`, `not`)",
            "answer": "x = 5\nif x > 0 and x < 10:\n    print('between 0 and 10')"
          },
          {
            "exercise": "Use `if` with variable truthiness",
            "answer": "x = []\nif not x:\n    print('empty list')"
          }
        ]
      },
      {
        "skill": "Skill 2: If/Else and Elif",
        "exercises": [
          {
            "exercise": "Add `else` to an `if` block",
            "answer": "x = 5\nif x > 0:\n    print('positive')\nelse:\n    print('not positive')"
          },
          {
            "exercise": "Use `elif` for multiple conditions",
            "answer": "score = 85\nif score >= 90:\n    print('A')\nelif score >= 80:\n    print('B')\nelse:\n    print('C')"
          },
          {
            "exercise": "Structure `if/elif/else` for category mapping",
            "answer": "age = 25\nif age < 13:\n    print('child')\nelif age < 20:\n    print('teen')\nelif age < 65:\n    print('adult')\nelse:\n    print('senior')"
          },
          {
            "exercise": "Combine multiple `elif` conditions with ranges",
            "answer": "score = 75\nif 90 <= score <= 100:\n    grade = 'A'\nelif 80 <= score < 90:\n    grade = 'B'\nelse:\n    grade = 'C'"
          }
        ]
      },
      {
        "skill": "Skill 3: Nested Conditionals",
        "exercises": [
          {
            "exercise": "Write nested `if` statements",
            "answer": "x = 5\nif x > 0:\n    if x < 10:\n        print('single digit positive')"
          },
          {
            "exercise": "Avoid deep nesting with early returns",
            "answer": "x = 5\nif x <= 0:\n    return\nif x >= 10:\n    return\nprint('single digit positive')"
          },
          {
            "exercise": "Reorganize nested conditionals into flat logic",
            "answer": "# Instead of deep nesting:\n# if a:\n#     if b:\n#         if c:\n# Use:\nif a and b and c:\n    print('all true')"
          }
        ]
      },
      {
        "skill": "Skill 4: Ternary (Conditional) Expressions",
        "exercises": [
          {
            "exercise": "Use simple ternary: `x if condition else y`",
            "answer": "x = 5\nresult = 'positive' if x > 0 else 'not positive'"
          },
          {
            "exercise": "Nest ternary expressions (carefully)",
            "answer": "x = 5\nresult = 'A' if x > 90 else ('B' if x > 80 else 'C')"
          },
          {
            "exercise": "Use ternary in return statements",
            "answer": "def get_status(x):\n    return 'positive' if x > 0 else 'not positive'"
          },
          {
            "exercise": "Combine ternary with logical expressions",
            "answer": "x = 5\nresult = 'even' if x % 2 == 0 and x > 0 else 'odd or negative'"
          }
        ]
      },
      {
        "skill": "Skill 5: Comparison Operators",
        "exercises": [
          {
            "exercise": "Use equality (`==`) and inequality (`!=`)",
            "answer": "x = 5\ny = 10\nprint(x == y)  # False\nprint(x != y)  # True"
          },
          {
            "exercise": "Use greater/less than (`>`, `<`, `>=`, `<=`)",
            "answer": "print(5 > 3)  # True\nprint(5 < 3)  # False\nprint(5 >= 5)  # True\nprint(5 <= 5)  # True"
          },
          {
            "exercise": "Chain comparisons: `0 < x < 10`",
            "answer": "x = 5\nif 0 < x < 10:\n    print('between 0 and 10')"
          },
          {
            "exercise": "Compare strings and lexicographic order",
            "answer": "print('apple' < 'banana')  # True (lexicographic)\nprint('Apple' < 'apple')  # True (uppercase comes first)"
          }
        ]
      },
      {
        "skill": "Skill 6: Boolean Operations and Truth Testing",
        "exercises": [
          {
            "exercise": "Use `bool()` to evaluate expressions",
            "answer": "print(bool(1))  # True\nprint(bool(0))  # False\nprint(bool(''))  # False\nprint(bool('text'))  # True"
          },
          {
            "exercise": "Check truthiness of various types (`[]`, `None`, `0`, etc.)",
            "answer": "# Falsy: False, None, 0, 0.0, '', [], {}, set()\nprint(bool([]))  # False\nprint(bool(None))  # False"
          },
          {
            "exercise": "Use `not`, `and`, `or` to build conditions",
            "answer": "x = 5\nif x > 0 and x < 10:\n    print('valid')\nif x == 5 or x == 10:\n    print('match')\nif not x == 0:\n    print('non-zero')"
          },
          {
            "exercise": "Short-circuit evaluation with `and` / `or`",
            "answer": "# Short-circuit: and returns first falsy or last value\nresult = False and expensive_function()  # expensive_function not called\n# or returns first truthy or last value\nresult = True or expensive_function()  # expensive_function not called"
          }
        ]
      },
      {
        "skill": "Skill 7: Identity and None Checks",
        "exercises": [
          {
            "exercise": "Use `is` vs `==`",
            "answer": "a = [1, 2]\nb = [1, 2]\nprint(a is b)  # False (different objects)\nprint(a == b)  # True (same content)"
          },
          {
            "exercise": "Check for `None` with `is None`",
            "answer": "x = None\nif x is None:\n    print('x is None')"
          },
          {
            "exercise": "Check for object identity",
            "answer": "a = [1, 2]\nb = a\nprint(a is b)  # True (same object)"
          },
          {
            "exercise": "Use `is not None` idiomatically",
            "answer": "x = [1, 2, 3]\nif x is not None:\n    print('x has a value')"
          }
        ]
      },
      {
        "skill": "Skill 8: Membership Testing",
        "exercises": [
          {
            "exercise": "Use `in` to test strings and lists",
            "answer": "print('hello' in 'hello world')  # True\nprint(2 in [1, 2, 3])  # True"
          },
          {
            "exercise": "Use `not in` for exclusion logic",
            "answer": "print('x' not in 'hello')  # True\nprint(5 not in [1, 2, 3])  # True"
          },
          {
            "exercise": "Membership tests in `if` conditions",
            "answer": "vowels = 'aeiou'\nif 'a' in vowels:\n    print('is a vowel')"
          },
          {
            "exercise": "Use membership tests with `all()` / `any()`",
            "answer": "nums = [1, 2, 3, 4, 5]\nif all(x > 0 for x in nums):\n    print('all positive')\nif any(x > 3 for x in nums):\n    print('at least one greater than 3')"
          }
        ]
      },
      {
        "skill": "Skill 9: `all()` and `any()`",
        "exercises": [
          {
            "exercise": "Use `all()` on boolean list",
            "answer": "bools = [True, True, True]\nprint(all(bools))  # True"
          },
          {
            "exercise": "Use `any()` on boolean list",
            "answer": "bools = [False, False, True]\nprint(any(bools))  # True"
          },
          {
            "exercise": "Combine with list comprehensions",
            "answer": "numbers = [2, 4, 6, 8]\nprint(all(x % 2 == 0 for x in numbers))  # True"
          },
          {
            "exercise": "Use `all()` / `any()` in nested structures",
            "answer": "matrix = [[1, 2], [3, 4]]\nprint(any(any(x > 3 for x in row) for row in matrix))  # True"
          }
        ]
      },
      {
        "skill": "Skill 10: Defensive Programming Idioms",
        "exercises": [
          {
            "exercise": "Use `if not var:` to check for emptiness",
            "answer": "lst = []\nif not lst:\n    print('list is empty')"
          },
          {
            "exercise": "Default value with `or`: `x = value or default`",
            "answer": "user_input = None\nvalue = user_input or 'default'  # 'default'"
          },
          {
            "exercise": "Avoid `== True` and `== False`",
            "answer": "# Avoid:\n# if x == True:\n# Instead:\nif x:\n    print('truthy')"
          },
          {
            "exercise": "Prefer `if x` over `if x == True`",
            "answer": "x = 5\nif x:  # Better than: if x == True\n    print('x is truthy')"
          },
          {
            "exercise": "Use `assert` for invariants (early intro)",
            "answer": "def validate_positive(x):\n    assert x > 0, 'x must be positive'\n    return x * 2"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 5: Loops & Iteration",
    "skills": [
      {
        "skill": "Skill 1: The For Loop",
        "exercises": [
          {
            "exercise": "Loop through a list",
            "answer": "lst = [1, 2, 3]\nfor item in lst:\n    print(item)"
          },
          {
            "exercise": "Loop through a string",
            "answer": "s = 'hello'\nfor char in s:\n    print(char)"
          },
          {
            "exercise": "Loop through a range of numbers",
            "answer": "for i in range(5):\n    print(i)  # 0, 1, 2, 3, 4"
          },
          {
            "exercise": "Loop over a tuple",
            "answer": "t = (1, 2, 3)\nfor item in t:\n    print(item)"
          },
          {
            "exercise": "Loop over a set (unordered)",
            "answer": "s = {1, 2, 3}\nfor item in s:\n    print(item)  # Order not guaranteed"
          }
        ]
      },
      {
        "skill": "Skill 2: The While Loop",
        "exercises": [
          {
            "exercise": "Use `while` with numeric condition",
            "answer": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1"
          },
          {
            "exercise": "Use `while` with a flag variable",
            "answer": "running = True\nwhile running:\n    # do work\n    if some_condition:\n        running = False"
          },
          {
            "exercise": "Infinite loop with `while True:`",
            "answer": "while True:\n    user_input = input('Enter q to quit: ')\n    if user_input == 'q':\n        break"
          },
          {
            "exercise": "Guard against infinite loops",
            "answer": "# Guard with max iterations\ni = 0\nmax_iter = 1000\nwhile condition and i < max_iter:\n    # work\n    i += 1"
          }
        ]
      },
      {
        "skill": "Skill 3: Loop Control Statements",
        "exercises": [
          {
            "exercise": "Use `break` to exit a loop early",
            "answer": "for i in range(10):\n    if i == 5:\n        break\n    print(i)  # 0, 1, 2, 3, 4"
          },
          {
            "exercise": "Use `continue` to skip an iteration",
            "answer": "for i in range(5):\n    if i == 2:\n        continue\n    print(i)  # 0, 1, 3, 4"
          },
          {
            "exercise": "Use `else` block after a `for` or `while`",
            "answer": "for i in range(3):\n    print(i)\nelse:\n    print('loop completed normally')"
          },
          {
            "exercise": "Loop with early exit and `else` behavior",
            "answer": "for i in range(10):\n    if i == 5:\n        break\nelse:\n    print('not executed if break')"
          }
        ]
      },
      {
        "skill": "Skill 4: Range and Enumerate",
        "exercises": [
          {
            "exercise": "Use `range(n)` in a loop",
            "answer": "for i in range(5):\n    print(i)  # 0, 1, 2, 3, 4"
          },
          {
            "exercise": "Use `range(start, stop)`",
            "answer": "for i in range(2, 7):\n    print(i)  # 2, 3, 4, 5, 6"
          },
          {
            "exercise": "Use `range(start, stop, step)`",
            "answer": "for i in range(0, 10, 2):\n    print(i)  # 0, 2, 4, 6, 8"
          },
          {
            "exercise": "Loop in reverse with `range(high, low, -1)`",
            "answer": "for i in range(10, 0, -1):\n    print(i)  # 10, 9, 8, ..., 1"
          },
          {
            "exercise": "Use `enumerate()` to get index and value",
            "answer": "items = ['a', 'b', 'c']\nfor i, item in enumerate(items):\n    print(i, item)  # 0 a, 1 b, 2 c"
          },
          {
            "exercise": "Start `enumerate()` at a custom index",
            "answer": "items = ['a', 'b', 'c']\nfor i, item in enumerate(items, start=1):\n    print(i, item)  # 1 a, 2 b, 3 c"
          }
        ]
      },
      {
        "skill": "Skill 5: Iterating with Zip",
        "exercises": [
          {
            "exercise": "Use `zip()` to iterate over two lists",
            "answer": "names = ['Alice', 'Bob']\nages = [25, 30]\nfor name, age in zip(names, ages):\n    print(name, age)"
          },
          {
            "exercise": "Use `zip()` with three or more sequences",
            "answer": "a = [1, 2]\nb = ['x', 'y']\nc = [10, 20]\nfor x, y, z in zip(a, b, c):\n    print(x, y, z)"
          },
          {
            "exercise": "Use unpacking with `for x, y in zip(...)`",
            "answer": "for name, age in zip(['Alice', 'Bob'], [25, 30]):\n    print(f'{name} is {age}')"
          },
          {
            "exercise": "Handle uneven sequences with `zip_longest()`",
            "answer": "from itertools import zip_longest\na = [1, 2, 3]\nb = ['x', 'y']\nfor x, y in zip_longest(a, b, fillvalue='?'):\n    print(x, y)"
          }
        ]
      },
      {
        "skill": "Skill 6: Advanced Looping Patterns",
        "exercises": [
          {
            "exercise": "Loop over a dictionary\u2019s keys",
            "answer": "d = {'a': 1, 'b': 2}\nfor key in d:\n    print(key)"
          },
          {
            "exercise": "Loop over a dictionary\u2019s values",
            "answer": "d = {'a': 1, 'b': 2}\nfor value in d.values():\n    print(value)"
          },
          {
            "exercise": "Loop over dictionary items (key, value)",
            "answer": "d = {'a': 1, 'b': 2}\nfor key, value in d.items():\n    print(key, value)"
          },
          {
            "exercise": "Loop over list of tuples with unpacking",
            "answer": "pairs = [(1, 'a'), (2, 'b')]\nfor num, letter in pairs:\n    print(num, letter)"
          },
          {
            "exercise": "Nested loops to iterate over 2D lists",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6]]\nfor row in matrix:\n    for col in row:\n        print(col)"
          }
        ]
      },
      {
        "skill": "Skill 7: Modifying Data While Looping",
        "exercises": [
          {
            "exercise": "Simultaneous iteration and modification",
            "answer": "# Avoid modifying while iterating\n# Instead build new list:\nnums = [1, 2, 3]\nresult = [x * 2 for x in nums]"
          },
          {
            "exercise": "Safely build a new list while looping",
            "answer": "nums = [1, 2, 3, 4, 5]\neven = []\nfor n in nums:\n    if n % 2 == 0:\n        even.append(n)"
          },
          {
            "exercise": "Use `copy()` to avoid mutation bugs",
            "answer": "import copy\nlst = [1, 2, 3]\nlst_copy = copy.copy(lst)\nfor item in lst_copy:\n    # safe to modify lst"
          },
          {
            "exercise": "Remove items using list comprehension",
            "answer": "nums = [1, 2, 3, 4, 5]\nresult = [x for x in nums if x % 2 == 0]"
          }
        ]
      },
      {
        "skill": "Skill 8: Pattern-Based Looping",
        "exercises": [
          {
            "exercise": "Use `zip(s, s[1:])` to group adjacent items",
            "answer": "s = [1, 2, 3, 4]\nfor a, b in zip(s, s[1:]):\n    print(a, b)  # pairs: (1,2), (2,3), (3,4)"
          },
          {
            "exercise": "Rotate with `collections.deque` and `.rotate()`",
            "answer": "from collections import deque\nd = deque([1, 2, 3])\nd.rotate(1)  # deque([3, 1, 2])"
          },
          {
            "exercise": "Loop through reversed list with `reversed()`",
            "answer": "lst = [1, 2, 3]\nfor item in reversed(lst):\n    print(item)"
          },
          {
            "exercise": "Loop through list with `range(len(...))`",
            "answer": "lst = [1, 2, 3]\nfor i in range(len(lst)):\n    print(i, lst[i])"
          },
          {
            "exercise": "Use `enumerate(reversed(...))`",
            "answer": "lst = [1, 2, 3]\nfor i, item in enumerate(reversed(lst)):\n    print(i, item)"
          }
        ]
      },
      {
        "skill": "Skill 9: Manual Iteration",
        "exercises": [
          {
            "exercise": "Use `iter()` and `next()` manually",
            "answer": "lst = [1, 2, 3]\nit = iter(lst)\nprint(next(it))  # 1\nprint(next(it))  # 2"
          },
          {
            "exercise": "Loop with sentinel value and `iter()`",
            "answer": "it = iter(lambda: input('Enter: '), 'stop')\nfor val in it:\n    print(val)  # stops when 'stop' entered"
          },
          {
            "exercise": "Loop with exception handling (`StopIteration`)",
            "answer": "it = iter([1, 2, 3])\ntry:\n    while True:\n        print(next(it))\nexcept StopIteration:\n    pass"
          },
          {
            "exercise": "Use custom iterator objects",
            "answer": "class Counter:\n    def __init__(self, n):\n        self.n = n\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.n <= 0:\n            raise StopIteration\n        self.n -= 1\n        return self.n"
          }
        ]
      },
      {
        "skill": "Skill 10: Timed and Parallel Loops",
        "exercises": [
          {
            "exercise": "Time a loop with `time.time()`",
            "answer": "import time\nstart = time.time()\nfor i in range(1000):\n    pass\nend = time.time()\nprint(end - start)"
          },
          {
            "exercise": "Throttle a loop with `time.sleep()`",
            "answer": "import time\nfor i in range(5):\n    print(i)\n    time.sleep(0.5)  # Wait 0.5 seconds"
          },
          {
            "exercise": "Use `concurrent.futures.ThreadPoolExecutor`",
            "answer": "from concurrent.futures import ThreadPoolExecutor\ndef task(n):\n    return n * 2\nwith ThreadPoolExecutor() as executor:\n    results = executor.map(task, range(5))"
          },
          {
            "exercise": "Compare perSkillance of sequential vs parallel",
            "answer": "import time\n# Sequential\nstart = time.time()\nfor i in range(10):\n    time.sleep(0.1)\nprint(time.time() - start)  # ~1 second\n# Parallel would be faster"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 6: Dictionaries & Key-Based Access",
    "skills": [
      {
        "skill": "Skill 1: Creating Dictionaries",
        "exercises": [
          {
            "exercise": "Create dictionary with literal syntax (`{}`)",
            "answer": "d = {'name': 'Alice', 'age': 30}"
          },
          {
            "exercise": "Create dictionary using `dict()`",
            "answer": "d = dict(name='Alice', age=30)"
          },
          {
            "exercise": "Create dictionary with key-value pairs",
            "answer": "d = dict([('name', 'Alice'), ('age', 30)])"
          },
          {
            "exercise": "Create empty dictionary",
            "answer": "d = {}"
          },
          {
            "exercise": "Create nested dictionaries",
            "answer": "d = {'person': {'name': 'Alice', 'age': 30}}"
          }
        ]
      },
      {
        "skill": "Skill 2: Accessing Values",
        "exercises": [
          {
            "exercise": "Access value by key (`d[key]`)",
            "answer": "d = {'name': 'Alice'}\nprint(d['name'])  # 'Alice'"
          },
          {
            "exercise": "Handle missing keys with `get()`",
            "answer": "d = {'name': 'Alice'}\nprint(d.get('age'))  # None"
          },
          {
            "exercise": "Use `get(key, default)`",
            "answer": "d = {'name': 'Alice'}\nprint(d.get('age', 25))  # 25"
          },
          {
            "exercise": "Access nested values (`d[key1][key2]`)",
            "answer": "d = {'person': {'name': 'Alice'}}\nprint(d['person']['name'])  # 'Alice'"
          },
          {
            "exercise": "Access with fallback using `get().get()`",
            "answer": "d = {'person': {'name': 'Alice'}}\nname = d.get('person', {}).get('name', 'Unknown')"
          }
        ]
      },
      {
        "skill": "Skill 3: Updating and Adding Entries",
        "exercises": [
          {
            "exercise": "Add new key-value pair",
            "answer": "d = {'name': 'Alice'}\nd['age'] = 30"
          },
          {
            "exercise": "Update existing value",
            "answer": "d = {'name': 'Alice', 'age': 30}\nd['age'] = 31"
          },
          {
            "exercise": "Use `update()` to merge dictionaries",
            "answer": "d1 = {'a': 1}\nd2 = {'b': 2}\nd1.update(d2)  # d1 = {'a': 1, 'b': 2}"
          },
          {
            "exercise": "Merge with `{**d1, **d2}` (modern style)",
            "answer": "d1 = {'a': 1}\nd2 = {'b': 2}\nd3 = {**d1, **d2}  # {'a': 1, 'b': 2}"
          }
        ]
      },
      {
        "skill": "Skill 4: Deleting Keys",
        "exercises": [
          {
            "exercise": "Delete a key with `del`",
            "answer": "d = {'name': 'Alice', 'age': 30}\ndel d['age']"
          },
          {
            "exercise": "Use `.pop(key)` to remove and return value",
            "answer": "d = {'name': 'Alice', 'age': 30}\nage = d.pop('age')  # returns 30"
          },
          {
            "exercise": "Use `.pop(key, default)` to avoid KeyError",
            "answer": "d = {'name': 'Alice'}\nage = d.pop('age', 25)  # returns 25 (default)"
          },
          {
            "exercise": "Remove all entries with `.clear()`",
            "answer": "d = {'name': 'Alice', 'age': 30}\nd.clear()  # {}"
          }
        ]
      },
      {
        "skill": "Skill 5: Checking Dictionary Contents",
        "exercises": [
          {
            "exercise": "Check if key in dictionary (`key in d`)",
            "answer": "d = {'name': 'Alice'}\nprint('name' in d)  # True"
          },
          {
            "exercise": "Use `not in` for exclusion",
            "answer": "d = {'name': 'Alice'}\nprint('age' not in d)  # True"
          },
          {
            "exercise": "Compare dictionaries for equality",
            "answer": "d1 = {'a': 1}\nd2 = {'a': 1}\nprint(d1 == d2)  # True"
          },
          {
            "exercise": "Get dictionary length with `len(d)`",
            "answer": "d = {'name': 'Alice', 'age': 30}\nprint(len(d))  # 2"
          }
        ]
      },
      {
        "skill": "Skill 6: Dictionary Views",
        "exercises": [
          {
            "exercise": "Use `.keys()` to get all keys",
            "answer": "d = {'a': 1, 'b': 2}\nkeys = d.keys()  # dict_keys(['a', 'b'])"
          },
          {
            "exercise": "Use `.values()` to get all values",
            "answer": "d = {'a': 1, 'b': 2}\nvalues = d.values()  # dict_values([1, 2])"
          },
          {
            "exercise": "Use `.items()` to get key-value pairs",
            "answer": "d = {'a': 1, 'b': 2}\nitems = d.items()  # dict_items([('a', 1), ('b', 2)])"
          },
          {
            "exercise": "Convert views to lists",
            "answer": "d = {'a': 1, 'b': 2}\nkeys_list = list(d.keys())  # ['a', 'b']"
          }
        ]
      },
      {
        "skill": "Skill 7: Looping Through Dictionaries",
        "exercises": [
          {
            "exercise": "Loop over keys",
            "answer": "d = {'a': 1, 'b': 2}\nfor key in d:\n    print(key)"
          },
          {
            "exercise": "Loop over values",
            "answer": "d = {'a': 1, 'b': 2}\nfor value in d.values():\n    print(value)"
          },
          {
            "exercise": "Loop over key-value pairs with `items()`",
            "answer": "d = {'a': 1, 'b': 2}\nfor key, value in d.items():\n    print(key, value)"
          },
          {
            "exercise": "Unpack key and value in loop (`for k, v in d.items()`)",
            "answer": "d = {'a': 1, 'b': 2}\nfor k, v in d.items():\n    print(f'{k}: {v}')"
          }
        ]
      },
      {
        "skill": "Skill 8: Dictionary Comprehensions",
        "exercises": [
          {
            "exercise": "Basic dictionary comprehension",
            "answer": "squares = {x: x**2 for x in range(5)}  # {0: 0, 1: 1, 2: 4, ...}"
          },
          {
            "exercise": "Add condition to dictionary comprehension",
            "answer": "d = {'a': 1, 'b': 2, 'c': 3}\nfiltered = {k: v for k, v in d.items() if v > 1}  # {'b': 2, 'c': 3}"
          },
          {
            "exercise": "Invert a dictionary with comprehension",
            "answer": "d = {'a': 1, 'b': 2}\ninverted = {v: k for k, v in d.items()}  # {1: 'a', 2: 'b'}"
          },
          {
            "exercise": "Build dict from list of pairs (`dict(pairs)`)",
            "answer": "pairs = [('a', 1), ('b', 2)]\nd = dict(pairs)  # {'a': 1, 'b': 2}"
          },
          {
            "exercise": "Filter dictionary values in comprehension",
            "answer": "d = {'a': 1, 'b': 2, 'c': 3}\nfiltered = {k: v for k, v in d.items() if v % 2 == 0}"
          }
        ]
      },
      {
        "skill": "Skill 9: Counting and Grouping",
        "exercises": [
          {
            "exercise": "Count with loop (`d[key] += 1`)",
            "answer": "words = ['apple', 'banana', 'apple']\ncounts = {}\nfor word in words:\n    counts[word] = counts.get(word, 0) + 1"
          },
          {
            "exercise": "Initialize with condition (`if key not in d`)",
            "answer": "counts = {}\nfor word in words:\n    if word not in counts:\n        counts[word] = 0\n    counts[word] += 1"
          },
          {
            "exercise": "Group values with lists (`d[key].append(...)`)",
            "answer": "groups = {}\nfor item in items:\n    key = item['category']\n    if key not in groups:\n        groups[key] = []\n    groups[key].append(item)"
          },
          {
            "exercise": "Use `get(key, [])` idiom to avoid KeyError",
            "answer": "groups = {}\nfor item in items:\n    groups.setdefault(item['key'], []).append(item)"
          },
          {
            "exercise": "Build indexed dictionary from list with `enumerate()`",
            "answer": "items = ['a', 'b', 'c']\nindexed = {i: val for i, val in enumerate(items)}"
          }
        ]
      },
      {
        "skill": "Skill 10: Nested and Structured Data",
        "exercises": [
          {
            "exercise": "Access and update nested dictionary values",
            "answer": "d = {'person': {'name': 'Alice', 'age': 30}}\nd['person']['age'] = 31"
          },
          {
            "exercise": "Create deeply nested structures",
            "answer": "data = {'level1': {'level2': {'level3': 'value'}}}"
          },
          {
            "exercise": "Use `.setdefault()` for default sub-dicts",
            "answer": "d = {'users': {}}\nd.setdefault('users', {}).setdefault('alice', {})['age'] = 30"
          },
          {
            "exercise": "Avoid `KeyError` when working with depth",
            "answer": "# Use .get() chains:\nage = d.get('person', {}).get('age', 'Unknown')"
          },
          {
            "exercise": "Combine dictionaries with loop",
            "answer": "d1 = {'a': 1}\nd2 = {'b': 2}\nfor k, v in d2.items():\n    d1[k] = v"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 7: Functions & Arguments",
    "skills": [
      {
        "skill": "Skill 1: Defining and Calling Functions",
        "exercises": [
          {
            "exercise": "Define a basic function with `def`",
            "answer": "def greet():\n    print('Hello!')"
          },
          {
            "exercise": "Call a function with positional arguments",
            "answer": "def add(a, b):\n    return a + b\nresult = add(3, 5)"
          },
          {
            "exercise": "Return a value from a function",
            "answer": "def square(x):\n    return x ** 2"
          },
          {
            "exercise": "Use `return` vs implicit `None`",
            "answer": "def no_return():\n    print('hi')\n# Returns None implicitly"
          },
          {
            "exercise": "Use comments and docstrings to document a function",
            "answer": "def greet(name):\n    \"\"\"Greet a person by name.\"\"\"\n    return f'Hello, {name}!'"
          }
        ]
      },
      {
        "skill": "Skill 2: Parameters and Arguments",
        "exercises": [
          {
            "exercise": "Pass multiple positional arguments",
            "answer": "def add(a, b, c):\n    return a + b + c\nresult = add(1, 2, 3)"
          },
          {
            "exercise": "Use default parameter values",
            "answer": "def greet(name, greeting='Hello'):\n    return f'{greeting}, {name}!'"
          },
          {
            "exercise": "Call function using keyword arguments",
            "answer": "def greet(name, greeting='Hello'):\n    return f'{greeting}, {name}!'\ngreet(name='Alice', greeting='Hi')"
          },
          {
            "exercise": "Mix positional and keyword arguments",
            "answer": "def func(a, b=2, c=3):\n    return a + b + c\nfunc(1, c=5)"
          },
          {
            "exercise": "Use keyword-only arguments",
            "answer": "def func(a, b, *, c, d):\n    # c and d must be passed as keyword args\n    return a + b + c + d\nfunc(1, 2, c=3, d=4)"
          }
        ]
      },
      {
        "skill": "Skill 3: Variable-Length Arguments",
        "exercises": [
          {
            "exercise": "Use `*args` to accept any number of positional args",
            "answer": "def func(*args):\n    for arg in args:\n        print(arg)\nfunc(1, 2, 3)"
          },
          {
            "exercise": "Use `**kwargs` to accept keyword args",
            "answer": "def func(**kwargs):\n    for key, val in kwargs.items():\n        print(key, val)\nfunc(a=1, b=2)"
          },
          {
            "exercise": "Combine `*args` and `**kwargs` in one function",
            "answer": "def func(*args, **kwargs):\n    print(args, kwargs)\nfunc(1, 2, x=3, y=4)"
          },
          {
            "exercise": "Unpack args when calling: `func(*args)`",
            "answer": "def add(*nums):\n    return sum(nums)\nnumbers = [1, 2, 3]\nresult = add(*numbers)"
          },
          {
            "exercise": "Unpack kwargs when calling: `func(**kwargs)`",
            "answer": "def greet(**kwargs):\n    print(kwargs)\ndata = {'name': 'Alice', 'age': 30}\ngreet(**data)"
          }
        ]
      },
      {
        "skill": "Skill 4: Returning Multiple Values",
        "exercises": [
          {
            "exercise": "Return a tuple of values",
            "answer": "def get_stats():\n    return 10, 20, 30\na, b, c = get_stats()"
          },
          {
            "exercise": "Unpack return values into variables",
            "answer": "def get_name_age():\n    return 'Alice', 30\nname, age = get_name_age()"
          },
          {
            "exercise": "Return named values using a dictionary",
            "answer": "def get_data():\n    return {'name': 'Alice', 'age': 30}\ndata = get_data()"
          },
          {
            "exercise": "Return early from a function",
            "answer": "def check(x):\n    if x < 0:\n        return 'negative'\n    return 'positive'"
          }
        ]
      },
      {
        "skill": "Skill 5: Lambdas and Anonymous Functions",
        "exercises": [
          {
            "exercise": "Write a lambda function with one parameter",
            "answer": "square = lambda x: x ** 2\nprint(square(5))  # 25"
          },
          {
            "exercise": "Use lambda in `sorted()`, `map()`, or `filter()`",
            "answer": "nums = [1, 2, 3, 4]\nsquared = list(map(lambda x: x**2, nums))\neven = list(filter(lambda x: x % 2 == 0, nums))"
          },
          {
            "exercise": "Compare lambda to `def` in simple functions",
            "answer": "# Lambda: lambda x: x * 2\n# Function:\ndef double(x):\n    return x * 2"
          },
          {
            "exercise": "Use lambda with `key=` argument",
            "answer": "words = ['apple', 'Banana', 'cherry']\nwords.sort(key=lambda s: s.lower())"
          },
          {
            "exercise": "Use nested lambdas (with caution)",
            "answer": "add = lambda x, y: (lambda z: x + y + z)\nresult = add(1, 2)(3)  # 6"
          }
        ]
      },
      {
        "skill": "Skill 6: Functions as First-Class Objects",
        "exercises": [
          {
            "exercise": "Pass a function as an argument",
            "answer": "def apply(func, x):\n    return func(x)\ndef square(n):\n    return n ** 2\nresult = apply(square, 5)"
          },
          {
            "exercise": "Return a function from a function",
            "answer": "def outer():\n    def inner():\n        return 'inner'\n    return inner\nf = outer()\nprint(f())  # 'inner'"
          },
          {
            "exercise": "Assign a function to a variable",
            "answer": "square = lambda x: x ** 2\nf = square"
          },
          {
            "exercise": "Store functions in a list or dictionary",
            "answer": "funcs = [lambda x: x**2, lambda x: x**3]\nfor f in funcs:\n    print(f(2))"
          },
          {
            "exercise": "Use a function factory to generate functions",
            "answer": "def make_multiplier(n):\n    def multiplier(x):\n        return x * n\n    return multiplier\ntimes_3 = make_multiplier(3)\nprint(times_3(5))  # 15"
          }
        ]
      },
      {
        "skill": "Skill 7: Functional Composition Patterns",
        "exercises": [
          {
            "exercise": "Combine functions with nesting",
            "answer": "def f(x):\n    return x + 1\ndef g(x):\n    return x * 2\nresult = f(g(3))  # f(6) = 7"
          },
          {
            "exercise": "Use `functools.partial` to pre-fill arguments",
            "answer": "from functools import partial\ndef multiply(x, y):\n    return x * y\ndouble = partial(multiply, 2)\nprint(double(5))  # 10"
          },
          {
            "exercise": "Compose with lambdas and closures",
            "answer": "add_one = lambda x: x + 1\nmultiply_two = lambda x: x * 2\ncompose = lambda x: add_one(multiply_two(x))"
          },
          {
            "exercise": "Use higher-order functions with clarity",
            "answer": "def apply_twice(func, x):\n    return func(func(x))"
          }
        ]
      },
      {
        "skill": "Skill 8: Scope and Closures",
        "exercises": [
          {
            "exercise": "Understand local vs global scope",
            "answer": "x = 10  # global\ndef func():\n    x = 5  # local\n    print(x)  # 5"
          },
          {
            "exercise": "Access outer variable in nested function",
            "answer": "def outer():\n    x = 10\n    def inner():\n        print(x)  # accesses outer's x\n    inner()"
          },
          {
            "exercise": "Modify outer scope with `nonlocal`",
            "answer": "def outer():\n    x = 10\n    def inner():\n        nonlocal x\n        x = 20\n    inner()\n    print(x)  # 20"
          },
          {
            "exercise": "Use closures to encapsulate behavior",
            "answer": "def make_counter():\n    count = 0\n    def counter():\n        nonlocal count\n        count += 1\n        return count\n    return counter"
          }
        ]
      },
      {
        "skill": "Skill 9: Decorators (Preview)",
        "exercises": [
          {
            "exercise": "Define a simple decorator",
            "answer": "def my_decorator(func):\n    def wrapper():\n        print('Before')\n        func()\n        print('After')\n    return wrapper"
          },
          {
            "exercise": "Apply decorator to a function with `@` syntax",
            "answer": "@my_decorator\ndef say_hello():\n    print('Hello')"
          },
          {
            "exercise": "Decorator that takes arguments (advanced)",
            "answer": "def decorator_with_args(arg):\n    def decorator(func):\n        def wrapper():\n            print(arg)\n            func()\n        return wrapper\n    return decorator"
          },
          {
            "exercise": "Use `functools.wraps` to preserve metadata",
            "answer": "from functools import wraps\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Use decorators for logging or timing",
            "answer": "import time\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        print(f'Took {time.time() - start}s')\n        return result\n    return wrapper"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Keep functions focused and short",
            "answer": "def calculate_average(numbers):\n    \"\"\"Calculate average of a list of numbers.\"\"\"\n    return sum(numbers) / len(numbers)"
          },
          {
            "exercise": "Use clear parameter names",
            "answer": "def add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b"
          },
          {
            "exercise": "Document with docstrings",
            "answer": "def greet(name: str) -> str:\n    \"\"\"Greet a person by name.\"\"\"\n    return f'Hello, {name}!'"
          },
          {
            "exercise": "Avoid global state",
            "answer": "# Avoid:\n# global_var = 0\n# def modify():\n#     global global_var\n#     global_var += 1"
          },
          {
            "exercise": "Use type hints for clarity (`def greet(name: str) -> str`)",
            "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two integers.\"\"\"\n    return x + y"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 8: Sets & Membership Logic",
    "skills": [
      {
        "skill": "Skill 1: Creating Sets",
        "exercises": [
          {
            "exercise": "Create a set with `{}` and literals",
            "answer": "s = {1, 2, 3, 4}"
          },
          {
            "exercise": "Create an empty set with `set()`",
            "answer": "s = set()  # Empty set"
          },
          {
            "exercise": "Create a set from a list or string",
            "answer": "s = set([1, 2, 2, 3])  # {1, 2, 3}\ns2 = set('hello')  # {'h', 'e', 'l', 'o'}"
          },
          {
            "exercise": "Create a set with comprehension",
            "answer": "s = {x for x in range(5) if x % 2 == 0}  # {0, 2, 4}"
          },
          {
            "exercise": "Create a set using a loop (manual build)",
            "answer": "s = set()\nfor i in range(5):\n    s.add(i)"
          }
        ]
      },
      {
        "skill": "Skill 2: Set Membership and Inspection",
        "exercises": [
          {
            "exercise": "Check membership with `in`",
            "answer": "s = {1, 2, 3}\nprint(2 in s)  # True"
          },
          {
            "exercise": "Use `not in` for exclusion",
            "answer": "s = {1, 2, 3}\nprint(4 not in s)  # True"
          },
          {
            "exercise": "Get set length with `len()`",
            "answer": "s = {1, 2, 3}\nprint(len(s))  # 3"
          },
          {
            "exercise": "Compare sets with `==`",
            "answer": "s1 = {1, 2, 3}\ns2 = {1, 2, 3}\nprint(s1 == s2)  # True"
          },
          {
            "exercise": "Iterate over a set (unordered)",
            "answer": "s = {1, 2, 3}\nfor item in s:\n    print(item)"
          }
        ]
      },
      {
        "skill": "Skill 3: Adding and Removing Elements",
        "exercises": [
          {
            "exercise": "Add element with `.add()`",
            "answer": "s = {1, 2}\ns.add(3)  # {1, 2, 3}"
          },
          {
            "exercise": "Remove element with `.remove()`",
            "answer": "s = {1, 2, 3}\ns.remove(2)  # {1, 3}, raises KeyError if not found"
          },
          {
            "exercise": "Remove element safely with `.discard()`",
            "answer": "s = {1, 2, 3}\ns.discard(2)  # {1, 3}, no error if not found"
          },
          {
            "exercise": "Use `.pop()` to remove arbitrary item",
            "answer": "s = {1, 2, 3}\nitem = s.pop()  # Removes and returns arbitrary item"
          },
          {
            "exercise": "Clear all elements with `.clear()`",
            "answer": "s = {1, 2, 3}\ns.clear()  # set()"
          }
        ]
      },
      {
        "skill": "Skill 4: Set Operations",
        "exercises": [
          {
            "exercise": "Set union with `|` or `.union()`",
            "answer": "s1 = {1, 2}\ns2 = {2, 3}\nprint(s1 | s2)  # {1, 2, 3}\nprint(s1.union(s2))  # {1, 2, 3}"
          },
          {
            "exercise": "Set intersection with `&` or `.intersection()`",
            "answer": "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1 & s2)  # {2, 3}\nprint(s1.intersection(s2))  # {2, 3}"
          },
          {
            "exercise": "Set difference with `-` or `.difference()`",
            "answer": "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1 - s2)  # {1}\nprint(s1.difference(s2))  # {1}"
          },
          {
            "exercise": "Symmetric difference with `^` or `.symmetric_difference()`",
            "answer": "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1 ^ s2)  # {1, 4}\nprint(s1.symmetric_difference(s2))  # {1, 4}"
          },
          {
            "exercise": "Combine multiple sets using method chaining",
            "answer": "s1 = {1, 2}\ns2 = {3, 4}\ns3 = {5, 6}\nresult = s1.union(s2).union(s3)  # {1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      {
        "skill": "Skill 5: Subset and Superset Logic",
        "exercises": [
          {
            "exercise": "Check subset with `.issubset()` or `<=`",
            "answer": "s1 = {1, 2}\ns2 = {1, 2, 3}\nprint(s1.issubset(s2))  # True\nprint(s1 <= s2)  # True"
          },
          {
            "exercise": "Check superset with `.issuperset()` or `>=`",
            "answer": "s1 = {1, 2, 3}\ns2 = {1, 2}\nprint(s1.issuperset(s2))  # True\nprint(s1 >= s2)  # True"
          },
          {
            "exercise": "Proper subset/superset with `<` and `>`",
            "answer": "s1 = {1, 2}\ns2 = {1, 2, 3}\nprint(s1 < s2)  # True (proper subset)"
          },
          {
            "exercise": "Use `isdisjoint()` to check for no overlap",
            "answer": "s1 = {1, 2}\ns2 = {3, 4}\nprint(s1.isdisjoint(s2))  # True"
          },
          {
            "exercise": "Test subset logic in conditionals",
            "answer": "allowed = {'read', 'write'}\nuser_perms = {'read'}\nif user_perms <= allowed:\n    print('valid permissions')"
          }
        ]
      },
      {
        "skill": "Skill 6: Set Comprehensions",
        "exercises": [
          {
            "exercise": "Build a new set with condition",
            "answer": "s = {x for x in range(10) if x % 2 == 0}  # {0, 2, 4, 6, 8}"
          },
          {
            "exercise": "Extract unique values from a list",
            "answer": "lst = [1, 2, 2, 3, 3, 3]\nunique = {x for x in lst}  # {1, 2, 3}"
          },
          {
            "exercise": "Deduplicate and transSkill simultaneously",
            "answer": "s = {x * 2 for x in range(5)}  # {0, 2, 4, 6, 8}"
          },
          {
            "exercise": "Flatten and deduplicate nested structure",
            "answer": "nested = [[1, 2], [2, 3], [3, 4]]\nflat_unique = {x for row in nested for x in row}  # {1, 2, 3, 4}"
          },
          {
            "exercise": "Use set comprehension with `zip()` or `enumerate()`",
            "answer": "pairs = list(zip([1, 2], ['a', 'b']))\nfirsts = {x for x, y in pairs}  # {1, 2}"
          }
        ]
      },
      {
        "skill": "Skill 7: Sets vs Lists and Tuples",
        "exercises": [
          {
            "exercise": "Compare perSkillance of `in` with list vs set",
            "answer": "# Lists: O(n) lookup\n# Sets: O(1) average lookup\nimport time\nlst = list(range(10000))\ns = set(range(10000))\n# s lookup is much faster"
          },
          {
            "exercise": "Convert list to set and back",
            "answer": "lst = [1, 2, 2, 3]\ns = set(lst)  # {1, 2, 3}\nlst2 = list(s)  # [1, 2, 3] (order not preserved)"
          },
          {
            "exercise": "Preserve order after deduplication",
            "answer": "lst = [1, 2, 2, 3]\nseen = set()\nresult = []\nfor x in lst:\n    if x not in seen:\n        result.append(x)\n        seen.add(x)"
          },
          {
            "exercise": "When to use sets instead of lists",
            "answer": "# Use sets for: membership testing, uniqueness, set operations\n# Use lists for: ordered data, duplicates, indexing"
          },
          {
            "exercise": "Sets and hashability (immutable element rule)",
            "answer": "# Sets require hashable (immutable) elements\ns = {1, 2, 'hello', (1, 2)}\n# s = {[1, 2]}  # TypeError: list is not hashable"
          }
        ]
      },
      {
        "skill": "Skill 8: Conditional Set Building",
        "exercises": [
          {
            "exercise": "Build set with loop and `if` condition",
            "answer": "s = set()\nfor x in range(10):\n    if x % 2 == 0:\n        s.add(x)"
          },
          {
            "exercise": "Skip values based on rule",
            "answer": "s = set()\nfor x in range(10):\n    if x % 3 != 0:\n        s.add(x)"
          },
          {
            "exercise": "Build intersection manually with loop",
            "answer": "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nintersection = set()\nfor x in s1:\n    if x in s2:\n        intersection.add(x)"
          },
          {
            "exercise": "Group values into sets by category",
            "answer": "data = [{'cat': 'A', 'val': 1}, {'cat': 'B', 'val': 2}]\ngroups = {}\nfor item in data:\n    cat = item['cat']\n    if cat not in groups:\n        groups[cat] = set()\n    groups[cat].add(item['val'])"
          },
          {
            "exercise": "Union multiple sets with `for` loop",
            "answer": "sets = [{1, 2}, {2, 3}, {3, 4}]\nresult = set()\nfor s in sets:\n    result = result.union(s)"
          }
        ]
      },
      {
        "skill": "Skill 9: Common Use Cases",
        "exercises": [
          {
            "exercise": "Remove duplicates from list",
            "answer": "lst = [1, 2, 2, 3, 3, 3]\nunique = list(set(lst))"
          },
          {
            "exercise": "Check if two lists have common elements",
            "answer": "lst1 = [1, 2, 3]\nlst2 = [2, 3, 4]\nhas_common = bool(set(lst1) & set(lst2))"
          },
          {
            "exercise": "Find items in one list but not another",
            "answer": "lst1 = [1, 2, 3]\nlst2 = [2, 3, 4]\ndiff = list(set(lst1) - set(lst2))  # [1]"
          },
          {
            "exercise": "Check uniqueness of inputs",
            "answer": "values = [1, 2, 2, 3]\nis_unique = len(values) == len(set(values))"
          },
          {
            "exercise": "Test tags, labels, or keys for overlap",
            "answer": "tags1 = {'python', 'coding'}\ntags2 = {'python', 'learning'}\noverlap = tags1 & tags2"
          }
        ]
      },
      {
        "skill": "Skill 10: Defensive Set Patterns",
        "exercises": [
          {
            "exercise": "Avoid modifying sets while iterating",
            "answer": "s = {1, 2, 3}\n# Don't modify while iterating\nfor item in s.copy():\n    if item % 2 == 0:\n        s.remove(item)"
          },
          {
            "exercise": "Use `.copy()` to preserve original",
            "answer": "s = {1, 2, 3}\ns_copy = s.copy()\n# Now safe to modify original"
          },
          {
            "exercise": "Use sets as filters in comprehensions",
            "answer": "allowed = {'read', 'write', 'execute'}\nuser = {'read', 'delete'}\nfiltered = {p for p in user if p in allowed}"
          },
          {
            "exercise": "Use frozen sets as dict keys",
            "answer": "# Frozenset is immutable\nfs = frozenset([1, 2, 3])\nd = {fs: 'value'}  # Can use as dict key"
          },
          {
            "exercise": "Validate inclusion with `if not a <= b:` idiom",
            "answer": "required = {'read', 'write'}\nuser_perms = {'read'}\nif not user_perms <= required:\n    raise ValueError('Invalid permissions')"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 9: Files & Context Managers",
    "skills": [
      {
        "skill": "Skill 1: Reading Files with `with`",
        "exercises": [
          {
            "exercise": "Open and read entire file with `with open(...) as f`",
            "answer": "with open('file.txt', 'r') as f:\n    content = f.read()"
          },
          {
            "exercise": "Read file line by line with `.readline()` and `.readlines()`",
            "answer": "with open('file.txt', 'r') as f:\n    line = f.readline()\n    lines = f.readlines()"
          },
          {
            "exercise": "Loop over file lines using `for line in f`",
            "answer": "with open('file.txt', 'r') as f:\n    for line in f:\n        print(line)"
          },
          {
            "exercise": "Use `.strip()` to clean up line endings",
            "answer": "with open('file.txt', 'r') as f:\n    for line in f:\n        print(line.strip())"
          },
          {
            "exercise": "Handle large files efficiently with line iteration",
            "answer": "with open('large_file.txt', 'r') as f:\n    for line in f:  # Memory efficient\n        process(line)"
          }
        ]
      },
      {
        "skill": "Skill 2: Writing Files with `with`",
        "exercises": [
          {
            "exercise": "Open file for writing with `with open(..., \"w\") as f`",
            "answer": "with open('file.txt', 'w') as f:\n    f.write('Hello, World!')"
          },
          {
            "exercise": "Write a single line using `.write()`",
            "answer": "with open('file.txt', 'w') as f:\n    f.write('Line 1\\n')"
          },
          {
            "exercise": "Write multiple lines with `.writelines()`",
            "answer": "with open('file.txt', 'w') as f:\n    lines = ['Line 1\\n', 'Line 2\\n']\n    f.writelines(lines)"
          },
          {
            "exercise": "Open file for appending (`\"a\"` mode)",
            "answer": "with open('file.txt', 'a') as f:\n    f.write('Appended line\\n')"
          },
          {
            "exercise": "Overwrite vs append behavior explained",
            "answer": "# 'w' overwrites, 'a' appends\nwith open('file.txt', 'w') as f:\n    f.write('New content')"
          }
        ]
      },
      {
        "skill": "Skill 3: File Modes and Options",
        "exercises": [
          {
            "exercise": "Use read (`\"r\"`), write (`\"w\"`), append (`\"a\"`) modes",
            "answer": "# 'r' read, 'w' write, 'a' append\nwith open('file.txt', 'r') as f:\n    content = f.read()"
          },
          {
            "exercise": "Read and write (`\"r+\"`) or binary modes (`\"rb\"`, `\"wb\"`)",
            "answer": "# 'r+' read/write, 'rb' binary read, 'wb' binary write\nwith open('file.bin', 'rb') as f:\n    data = f.read()"
          },
          {
            "exercise": "Use `\"x\"` to create file but fail if it exists",
            "answer": "# 'x' create file, fail if exists\nwith open('new_file.txt', 'x') as f:\n    f.write('content')"
          },
          {
            "exercise": "Use `os.path.exists()` to check file existence",
            "answer": "import os\nif os.path.exists('file.txt'):\n    with open('file.txt', 'r') as f:\n        content = f.read()"
          },
          {
            "exercise": "Safely open files only if they exist",
            "answer": "import os\nif os.path.exists('file.txt'):\n    with open('file.txt', 'r') as f:\n        data = f.read()\nelse:\n    print('File not found')"
          }
        ]
      },
      {
        "skill": "Skill 4: Manual File Handling (Preview Only)",
        "exercises": [
          {
            "exercise": "Open and close file manually with `open()` and `.close()`",
            "answer": "f = open('file.txt', 'r')\ncontent = f.read()\nf.close()"
          },
          {
            "exercise": "Forgetting to close: risks and how to avoid",
            "answer": "# Risk: if exception occurs, file not closed\n# Always use 'with' statement instead"
          },
          {
            "exercise": "Compare manual handling with `with` block",
            "answer": "# Manual handling:\nf = open('file.txt', 'r')\ncontent = f.read()\nf.close()\n# vs with statement:\nwith open('file.txt', 'r') as f:\n    content = f.read()"
          },
          {
            "exercise": "Use `try/finally` for safe manual closure",
            "answer": "f = open('file.txt', 'r')\ntry:\n    content = f.read()\nfinally:\n    f.close()"
          },
          {
            "exercise": "Use `.flush()` to force write",
            "answer": "f = open('file.txt', 'w')\nf.write('data')\nf.flush()  # Force write to disk"
          }
        ]
      },
      {
        "skill": "Skill 5: Custom Context Managers",
        "exercises": [
          {
            "exercise": "Use `with` block for anything that needs cleanup",
            "answer": "# Any resource that needs cleanup\nwith open('file.txt', 'r') as f:\n    # File automatically closed"
          },
          {
            "exercise": "Define a custom context manager class with `__enter__` and `__exit__`",
            "answer": "class MyContext:\n    def __enter__(self):\n        print('Entering')\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Exiting')\n\nwith MyContext() as ctx:\n    pass"
          },
          {
            "exercise": "Use `contextlib.contextmanager` for generator-style context",
            "answer": "from contextlib import contextmanager\n\n@contextmanager\ndef my_context():\n    print('Setup')\n    yield\n    print('Cleanup')\n\nwith my_context():\n    pass"
          },
          {
            "exercise": "Use `contextlib.suppress()` to ignore specific errors",
            "answer": "from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open('missing.txt', 'r') as f:\n        content = f.read()"
          },
          {
            "exercise": "Use nested `with` blocks cleanly",
            "answer": "with open('file1.txt', 'r') as f1, open('file2.txt', 'r') as f2:\n    content1 = f1.read()\n    content2 = f2.read()"
          }
        ]
      },
      {
        "skill": "Skill 6: File Path Management (Preview of `pathlib`)",
        "exercises": [
          {
            "exercise": "Use `os.path` to join paths",
            "answer": "import os\npath = os.path.join('folder', 'subfolder', 'file.txt')"
          },
          {
            "exercise": "Use `os.path.exists()` and `os.path.isdir()`",
            "answer": "import os\nif os.path.exists('file.txt'):\n    print('exists')\nif os.path.isdir('folder'):\n    print('is directory')"
          },
          {
            "exercise": "Build cross-platSkill file paths",
            "answer": "import os\npath = os.path.join('folder', 'file.txt')  # Cross-platform"
          },
          {
            "exercise": "Preview of `pathlib.Path` for clean modern access",
            "answer": "from pathlib import Path\npath = Path('folder') / 'subfolder' / 'file.txt'"
          },
          {
            "exercise": "Avoid hardcoding `\"/\"` for directories",
            "answer": "# Don't hardcode:\n# path = 'folder/file.txt'  # Unix only\n# path = 'folder\\\\file.txt'  # Windows only\nimport os\npath = os.path.join('folder', 'file.txt')"
          }
        ]
      },
      {
        "skill": "Skill 7: Reading Structured Data",
        "exercises": [
          {
            "exercise": "Read lines and split CSV-style data",
            "answer": "with open('data.csv', 'r') as f:\n    for line in f:\n        fields = line.strip().split(',')\n        print(fields)"
          },
          {
            "exercise": "Use `.split(\",\")` to parse simple CSV rows",
            "answer": "with open('data.csv', 'r') as f:\n    for line in f:\n        row = line.strip().split(',')\n        print(row)"
          },
          {
            "exercise": "Use list of dicts or tuples to model row data",
            "answer": "data = []\nwith open('data.csv', 'r') as f:\n    for line in f:\n        row = {'col1': line.split(',')[0], 'col2': line.split(',')[1]}\n        data.append(row)"
          },
          {
            "exercise": "Load structured data into memory efficiently",
            "answer": "rows = []\nwith open('data.csv', 'r') as f:\n    for line in f:\n        rows.append(tuple(line.strip().split(',')))"
          },
          {
            "exercise": "Use `with open(...) as f` with custom processing loop",
            "answer": "with open('data.csv', 'r') as f:\n    # Process rows as needed\n    for line in f:\n        fields = line.strip().split(',')\n        # Process fields"
          }
        ]
      },
      {
        "skill": "Skill 8: Writing Structured Data",
        "exercises": [
          {
            "exercise": "Write headers and rows to CSV-style file",
            "answer": "with open('data.csv', 'w') as f:\n    f.write('name,age\\n')\n    f.write('Alice,30\\n')\n    f.write('Bob,25\\n')"
          },
          {
            "exercise": "Convert data structures to strings before writing",
            "answer": "rows = [['Alice', '30'], ['Bob', '25']]\nwith open('data.csv', 'w') as f:\n    for row in rows:\n        f.write(','.join(row) + '\\n')"
          },
          {
            "exercise": "Skillat rows with `.join()`",
            "answer": "data = [{'name': 'Alice', 'age': 30}]\nwith open('data.csv', 'w') as f:\n    f.write(','.join(data[0].keys()) + '\\n')\n    for row in data:\n        f.write(','.join(str(v) for v in row.values()) + '\\n')"
          },
          {
            "exercise": "Use `.Skillat()` or f-strings when writing",
            "answer": "name, age = 'Alice', 30\nwith open('data.txt', 'w') as f:\n    f.write(f'{name},{age}\\n')"
          },
          {
            "exercise": "Avoid extra blank lines on Windows (newline handling)",
            "answer": "# Windows: use newline=''\nwith open('data.csv', 'w', newline='') as f:\n    f.write('data\\n')"
          }
        ]
      },
      {
        "skill": "Skill 9: Working with Temporary or Scratch Files",
        "exercises": [
          {
            "exercise": "Use `tempfile` to create a temporary file",
            "answer": "import tempfile\nwith tempfile.TemporaryFile() as f:\n    f.write(b'data')\n    f.seek(0)\n    print(f.read())"
          },
          {
            "exercise": "Automatically clean up temp files",
            "answer": "import tempfile\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(b'data')\n    name = f.name\n# File persists after close"
          },
          {
            "exercise": "Store logs or cache files during scripts",
            "answer": "import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    # Use tmpdir\n    pass"
          },
          {
            "exercise": "Write to scratch files and inspect them",
            "answer": "import tempfile\nwith tempfile.NamedTemporaryFile(mode='w') as f:\n    f.write('log data\\n')\n    f.flush()"
          },
          {
            "exercise": "Use temp files in testing scenarios",
            "answer": "import tempfile\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as f:\n    f.write('test data')\n    # Can inspect file after test"
          }
        ]
      },
      {
        "skill": "Skill 10: Defensive Patterns with Files",
        "exercises": [
          {
            "exercise": "Catch `FileNotFoundError` when reading",
            "answer": "try:\n    with open('file.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    print('File not found')"
          },
          {
            "exercise": "Catch `PermissionError` on restricted files",
            "answer": "try:\n    with open('/protected/file.txt', 'r') as f:\n        content = f.read()\nexcept PermissionError:\n    print('Permission denied')"
          },
          {
            "exercise": "Avoid hardcoding file paths",
            "answer": "import os\nbase_dir = os.path.dirname(__file__)\nfile_path = os.path.join(base_dir, 'data', 'file.txt')"
          },
          {
            "exercise": "Close files in `finally` block when not using `with`",
            "answer": "f = open('file.txt', 'r')\ntry:\n    content = f.read()\nfinally:\n    f.close()"
          },
          {
            "exercise": "Use try/except to report file I/O errors",
            "answer": "try:\n    with open('file.txt', 'r') as f:\n        content = f.read()\nexcept (FileNotFoundError, PermissionError) as e:\n    print(f'Error: {e}')"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 10: Comprehensions & Generators",
    "skills": [
      {
        "skill": "Skill 1: List Comprehensions",
        "exercises": [
          {
            "exercise": "Build a list from a range",
            "answer": "squares = [x**2 for x in range(10)]"
          },
          {
            "exercise": "Build a list by transSkilling existing values",
            "answer": "numbers = [1, 2, 3, 4, 5]\ndoubled = [x * 2 for x in numbers]"
          },
          {
            "exercise": "Add a conditional to filter values (`[x for x in lst if x > 0]`)",
            "answer": "numbers = [1, 2, 3, 4, 5, 6]\neven = [x for x in numbers if x % 2 == 0]"
          },
          {
            "exercise": "Add `else` clause to comprehension (`[x if x > 0 else 0 for x in lst]`)",
            "answer": "numbers = [-2, -1, 0, 1, 2]\npositive_or_zero = [x if x >= 0 else 0 for x in numbers]"
          },
          {
            "exercise": "Nested list comprehensions",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6]]\nflat = [x for row in matrix for x in row]"
          }
        ]
      },
      {
        "skill": "Skill 2: Set Comprehensions",
        "exercises": [
          {
            "exercise": "Build a set from a list",
            "answer": "numbers = [1, 2, 2, 3, 3, 3]\nunique = {x for x in numbers}"
          },
          {
            "exercise": "Build a set from transSkilled values",
            "answer": "numbers = [1, 2, 3, 4, 5]\nsquares = {x**2 for x in numbers}"
          },
          {
            "exercise": "Add a condition to set comprehension",
            "answer": "numbers = [1, 2, 3, 4, 5, 6]\neven = {x for x in numbers if x % 2 == 0}"
          },
          {
            "exercise": "Remove duplicates using set comprehension",
            "answer": "lst = [1, 2, 2, 3, 3, 3]\nunique = set(lst)  # or {x for x in lst}"
          },
          {
            "exercise": "Set comprehension for unique filtering",
            "answer": "words = ['apple', 'banana', 'apple']\nfirst_letters = {word[0] for word in words}"
          }
        ]
      },
      {
        "skill": "Skill 3: Dictionary Comprehensions",
        "exercises": [
          {
            "exercise": "Create dict from list of tuples",
            "answer": "pairs = [('a', 1), ('b', 2)]\nd = {k: v for k, v in pairs}"
          },
          {
            "exercise": "TransSkill keys or values in a dict",
            "answer": "d = {'a': 1, 'b': 2}\ndoubled = {k: v*2 for k, v in d.items()}"
          },
          {
            "exercise": "Add a condition to dictionary comprehension",
            "answer": "d = {'a': 1, 'b': 2, 'c': 3}\nfiltered = {k: v for k, v in d.items() if v > 1}"
          },
          {
            "exercise": "Swap keys and values",
            "answer": "d = {'a': 1, 'b': 2}\nswapped = {v: k for k, v in d.items()}"
          },
          {
            "exercise": "Create indexed dictionary with `enumerate()`",
            "answer": "words = ['apple', 'banana', 'cherry']\nindexed = {i: word for i, word in enumerate(words)}"
          }
        ]
      },
      {
        "skill": "Skill 4: Generator Expressions",
        "exercises": [
          {
            "exercise": "Use generator expression with `sum()`",
            "answer": "numbers = range(1000000)\ntotal = sum(x**2 for x in numbers)  # Memory efficient"
          },
          {
            "exercise": "Use generator expression with `any()` / `all()`",
            "answer": "numbers = [1, 2, 3, 4, 5]\nhas_even = any(x % 2 == 0 for x in numbers)\nall_positive = all(x > 0 for x in numbers)"
          },
          {
            "exercise": "Use generator expression inside a function call",
            "answer": "result = max(x**2 for x in range(10))"
          },
          {
            "exercise": "Compare list comprehension vs generator expression",
            "answer": "# List comprehension: creates list in memory\nsquares_list = [x**2 for x in range(1000)]\n# Generator: lazy evaluation\nsquares_gen = (x**2 for x in range(1000))"
          },
          {
            "exercise": "Generator expression inside tuple: `(x for x in ...)`",
            "answer": "gen = (x**2 for x in range(5))\nprint(tuple(gen))  # (0, 1, 4, 9, 16)"
          }
        ]
      },
      {
        "skill": "Skill 5: Iterators and Lazy Evaluation",
        "exercises": [
          {
            "exercise": "Define an iterator with `iter()` and `next()`",
            "answer": "lst = [1, 2, 3]\nit = iter(lst)\nprint(next(it))  # 1\nprint(next(it))  # 2"
          },
          {
            "exercise": "Use `next()` with a default fallback",
            "answer": "it = iter([1, 2, 3])\nprint(next(it, 'default'))  # 1\nprint(next(iter([]), 'default'))  # 'default'"
          },
          {
            "exercise": "Store a generator expression and iterate later",
            "answer": "gen = (x**2 for x in range(5))\nfor val in gen:\n    print(val)  # Can only iterate once"
          },
          {
            "exercise": "Use generators to avoid building large lists",
            "answer": "def large_range():\n    for i in range(1000000):\n        yield i\n# Memory efficient, doesn't create list"
          },
          {
            "exercise": "Observe laziness by printing from inside a generator",
            "answer": "gen = (print(x) or x for x in range(3))\n# Nothing printed until consumed\nlist(gen)  # Now prints: 0, 1, 2"
          }
        ]
      },
      {
        "skill": "Skill 6: Generator Functions with `yield`",
        "exercises": [
          {
            "exercise": "Define a generator function with `yield`",
            "answer": "def my_gen():\n    yield 1\n    yield 2\n    yield 3\n\nfor val in my_gen():\n    print(val)"
          },
          {
            "exercise": "Yield multiple values in loop",
            "answer": "def count_up(n):\n    i = 0\n    while i < n:\n        yield i\n        i += 1"
          },
          {
            "exercise": "Use `for x in gen():` to consume generator",
            "answer": "def my_gen():\n    yield 1\n    yield 2\n\nfor val in my_gen():\n    print(val)"
          },
          {
            "exercise": "Compare `yield` to `return`",
            "answer": "# yield: produces value, pauses, resumes\n# return: exits function\ndef gen():\n    yield 1\n    return  # Stops generator"
          },
          {
            "exercise": "Use generator functions in pipelines",
            "answer": "def transform(items):\n    for item in items:\n        yield item * 2\n\nresult = transform([1, 2, 3])\nfor val in result:\n    print(val)"
          }
        ]
      },
      {
        "skill": "Skill 7: Nested and Delegated Generators",
        "exercises": [
          {
            "exercise": "Use nested loops with `yield`",
            "answer": "def nested_gen():\n    for i in range(3):\n        for j in range(2):\n            yield (i, j)"
          },
          {
            "exercise": "Delegate to sub-generator with `yield from`",
            "answer": "def sub_gen():\n    yield 1\n    yield 2\n\ndef main_gen():\n    yield from sub_gen()\n    yield 3"
          },
          {
            "exercise": "Build flattening generator with `yield from`",
            "answer": "def flatten(nested_list):\n    for item in nested_list:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item"
          },
          {
            "exercise": "Mix `yield` and control logic",
            "answer": "def gen():\n    if condition:\n        yield 1\n    else:\n        yield 2\n    yield 3"
          },
          {
            "exercise": "Compare `yield from` to manual loop",
            "answer": "# yield from\ndef main():\n    yield from sub_gen()\n# vs manual loop:\ndef main():\n    for x in sub_gen():\n        yield x"
          }
        ]
      },
      {
        "skill": "Skill 8: Generator Use Cases",
        "exercises": [
          {
            "exercise": "Stream file lines using generator",
            "answer": "def read_large_file(filename):\n    with open(filename, 'r') as f:\n        for line in f:\n            yield line.strip()"
          },
          {
            "exercise": "Infinite data streams with `while True`",
            "answer": "def infinite_counter():\n    i = 0\n    while True:\n        yield i\n        i += 1"
          },
          {
            "exercise": "Throttle generator with `time.sleep()`",
            "answer": "import time\ndef throttled_gen(items, delay=0.1):\n    for item in items:\n        yield item\n        time.sleep(delay)"
          },
          {
            "exercise": "Filter or map items with generator",
            "answer": "def filter_transform(items):\n    for item in items:\n        if item > 0:\n            yield item * 2"
          },
          {
            "exercise": "Process paginated API data lazily",
            "answer": "def fetch_pages(api):\n    page = 1\n    while True:\n        data = api.fetch(page)\n        if not data:\n            break\n        yield data\n        page += 1"
          }
        ]
      },
      {
        "skill": "Skill 9: Memory-Efficient Patterns",
        "exercises": [
          {
            "exercise": "Use generator instead of list for large range",
            "answer": "# Bad: creates list in memory\n# sum([x**2 for x in range(1000000)])\n# Good: generator\ntotal = sum(x**2 for x in range(1000000))"
          },
          {
            "exercise": "Chain generators for transSkillation pipelines",
            "answer": "def process_pipeline(data):\n    filtered = (x for x in data if x > 0)\n    doubled = (x * 2 for x in filtered)\n    return doubled"
          },
          {
            "exercise": "Avoid memory overhead in nested loops",
            "answer": "# Nested loops with generator\nresult = (x * y for x in range(100) for y in range(100) if x != y)"
          },
          {
            "exercise": "Use generator with `zip()` for efficiency",
            "answer": "data1 = range(1000)\ndata2 = range(1000)\nresult = ((x, y) for x, y in zip(data1, data2))"
          },
          {
            "exercise": "Use itertools with generators",
            "answer": "from itertools import islice\ndata = (x for x in range(1000000))\nfirst_10 = list(islice(data, 10))"
          }
        ]
      },
      {
        "skill": "Skill 10: Common Pitfalls and Best Practices",
        "exercises": [
          {
            "exercise": "Don't reuse exhausted generators",
            "answer": "gen = (x for x in range(3))\nlist(gen)  # [0, 1, 2]\nlist(gen)  # [] - exhausted!"
          },
          {
            "exercise": "Don\u2019t mix list comprehensions with large data",
            "answer": "# Don't use list comp for large data\n# data = [process(x) for x in huge_dataset]\n# Use generator:\ndata = (process(x) for x in huge_dataset)"
          },
          {
            "exercise": "Use comprehensions only when output is needed immediately",
            "answer": "# Use comprehension when you need the list now\nresult = [x * 2 for x in range(10)]\n# Use generator when consuming once\nresult = (x * 2 for x in range(10))"
          },
          {
            "exercise": "Choose `yield` when data is consumed once",
            "answer": "def process_items(items):\n    \"\"\"Process items one at a time.\"\"\"\n    for item in items:\n        yield process(item)"
          },
          {
            "exercise": "Document generator functions clearly",
            "answer": "def my_generator(data):\n    \"\"\"Generator that yields processed items.\n    \n    Args:\n        data: Input iterable\n    \n    Yields:\n        Processed items one at a time\n    \"\"\"\n    for item in data:\n        yield process(item)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 11: Slicing Mastery (Strings, Lists, Tuples)",
    "skills": [
      {
        "skill": "Skill 1: Basic Slice Syntax",
        "exercises": [
          {
            "exercise": "Slice from index to index (`s[2:5]`)",
            "answer": "s = 'Python'\nprint(s[2:5])  # 'tho'"
          },
          {
            "exercise": "Slice from start (`s[:4]`)",
            "answer": "s = 'Python'\nprint(s[:4])  # 'Pyth'"
          },
          {
            "exercise": "Slice to end (`s[3:]`)",
            "answer": "s = 'Python'\nprint(s[3:])  # 'hon'"
          },
          {
            "exercise": "Full slice copy (`s[:]`)",
            "answer": "s = 'Python'\ncopy = s[:]  # 'Python'"
          },
          {
            "exercise": "Slice single element (`s[5:6]`)",
            "answer": "s = 'Python'\nprint(s[5:6])  # 'n'"
          }
        ]
      },
      {
        "skill": "Skill 2: Step and Reverse Slicing",
        "exercises": [
          {
            "exercise": "Use slice with step (`s[::2]`)",
            "answer": "s = 'Python'\nprint(s[::2])  # 'Pto'"
          },
          {
            "exercise": "Reverse a sequence with `s[::-1]`",
            "answer": "s = 'Python'\nprint(s[::-1])  # 'nohtyP'"
          },
          {
            "exercise": "Slice every nth element",
            "answer": "s = 'abcdefgh'\nprint(s[::3])  # 'adg'"
          },
          {
            "exercise": "Slice with step and start/stop (`s[1:8:2]`)",
            "answer": "s = 'Python'\nprint(s[1:8:2])  # 'yhn'"
          },
          {
            "exercise": "Combine slice with `len()` for dynamic bounds",
            "answer": "s = 'test'\nn = len(s)\nprint(s[:n-1])  # Dynamic bound"
          }
        ]
      },
      {
        "skill": "Skill 3: Negative Indices",
        "exercises": [
          {
            "exercise": "Slice using `s[-4:-1]`",
            "answer": "s = 'Python'\nprint(s[-4:-1])  # 'tho'"
          },
          {
            "exercise": "Slice to second-to-last: `s[:-1]`",
            "answer": "s = 'Python'\nprint(s[:-1])  # 'Pytho'"
          },
          {
            "exercise": "Slice from second-to-last: `s[-2:]`",
            "answer": "s = 'Python'\nprint(s[-2:])  # 'on'"
          },
          {
            "exercise": "Use full negative slice: `s[-5:]`",
            "answer": "s = 'Python'\nprint(s[-5:])  # 'ython'"
          },
          {
            "exercise": "Combine negative start and stop with step",
            "answer": "s = 'Python'\nprint(s[-3::2])  # 'ho'"
          }
        ]
      },
      {
        "skill": "Skill 4: Edge Case Behavior",
        "exercises": [
          {
            "exercise": "Slice with start \\> stop (`s[5:2]`)",
            "answer": "s = 'Python'\nprint(s[5:2])  # '' (empty)"
          },
          {
            "exercise": "Slice beyond range (`s[100:]`)",
            "answer": "s = 'Python'\nprint(s[100:])  # '' (beyond range)"
          },
          {
            "exercise": "Slice that returns empty list/string",
            "answer": "s = 'Python'\nprint(s[10:20])  # '' (empty)"
          },
          {
            "exercise": "Slice an empty sequence",
            "answer": "s = ''\nprint(s[:])  # '' (empty slice of empty)"
          },
          {
            "exercise": "Safe slicing vs indexing",
            "answer": "# Slicing never raises IndexError\n# s[10] would raise, but s[10:] returns ''"
          }
        ]
      },
      {
        "skill": "Skill 5: Slice Assignment",
        "exercises": [
          {
            "exercise": "Replace part of list with slice assignment (`lst[1:3] = [...]`)",
            "answer": "lst = [1, 2, 3, 4, 5]\nlst[1:3] = [20, 30]  # [1, 20, 30, 4, 5]"
          },
          {
            "exercise": "Replace slice with shorter/longer content",
            "answer": "lst = [1, 2, 3, 4, 5]\nlst[1:3] = [20]  # [1, 20, 4, 5] (shorter)\nlst[1:2] = [10, 11, 12]  # [1, 10, 11, 12, 20, 4, 5] (longer)"
          },
          {
            "exercise": "Delete slice with `del lst[1:4]`",
            "answer": "lst = [1, 2, 3, 4, 5]\ndel lst[1:4]  # [1, 5]"
          },
          {
            "exercise": "Insert with empty slice (`lst[2:2] = [x]`)",
            "answer": "lst = [1, 2, 3]\nlst[2:2] = [10]  # [1, 2, 10, 3] (insert)"
          },
          {
            "exercise": "Combine slice assignment with step",
            "answer": "lst = [1, 2, 3, 4, 5]\nlst[::2] = [10, 20, 30]  # [10, 2, 20, 4, 30]"
          }
        ]
      },
      {
        "skill": "Skill 6: Multidimensional Slicing",
        "exercises": [
          {
            "exercise": "Slice list of lists (`matrix[1:]`)",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matrix[1:])  # [[4, 5, 6], [7, 8, 9]]"
          },
          {
            "exercise": "Access row, then slice columns (`matrix[0][1:3]`)",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6]]\nrow = matrix[0]\nprint(row[1:3])  # [2, 3]"
          },
          {
            "exercise": "Slice specific rows from 2D list",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrows = matrix[0:2]  # [[1, 2, 3], [4, 5, 6]]"
          },
          {
            "exercise": "Loop with slicing in 2D structure",
            "answer": "matrix = [[1, 2, 3], [4, 5, 6]]\nfor row in matrix:\n    print(row[:2])  # First 2 cols of each row"
          },
          {
            "exercise": "Limitations of slicing in nested lists",
            "answer": "# NumPy supports matrix[1:, 2:]\n# But nested lists don't - need double indexing"
          }
        ]
      },
      {
        "skill": "Skill 7: Tuple Slicing",
        "exercises": [
          {
            "exercise": "Slice a tuple (`t[1:3]`)",
            "answer": "t = (1, 2, 3, 4, 5)\nprint(t[1:3])  # (2, 3)"
          },
          {
            "exercise": "Slice with step in tuple",
            "answer": "t = (1, 2, 3, 4, 5)\nprint(t[::2])  # (1, 3, 5)"
          },
          {
            "exercise": "Use slicing to copy tuple",
            "answer": "t = (1, 2, 3)\ncopy = t[:]  # (1, 2, 3)"
          },
          {
            "exercise": "Use tuple slicing in function returns",
            "answer": "def get_range():\n    return (1, 2, 3, 4, 5)\n\nresult = get_range()[1:4]  # (2, 3, 4)"
          },
          {
            "exercise": "Convert sliced tuple to list and back",
            "answer": "t = (1, 2, 3, 4)\nlst = list(t[1:3])  # [2, 3]\nt2 = tuple(lst)  # (2, 3)"
          }
        ]
      },
      {
        "skill": "Skill 8: Slicing in Comprehensions",
        "exercises": [
          {
            "exercise": "Use slicing inside list comprehension",
            "answer": "words = ['hello', 'world', 'python']\nfirst_two = [word[:2] for word in words]  # ['he', 'wo', 'py']"
          },
          {
            "exercise": "Use slice with `[::-1]` inside expression",
            "answer": "s = 'hello'\nreversed_chars = [s[i] for i in range(len(s)-1, -1, -1)]\n# Or simpler: list(s[::-1])"
          },
          {
            "exercise": "Slice while filtering",
            "answer": "numbers = [1, 2, 3, 4, 5, 6]\nfiltered = [x for x in numbers[::2] if x > 2]"
          },
          {
            "exercise": "Slice zip output (`list(zip(...))[:5]`)",
            "answer": "pairs = [(1, 'a'), (2, 'b'), (3, 'c')]\nresult = list(zip(*pairs))[:2]  # First 2 after unzip"
          },
          {
            "exercise": "Combine slice and map in comprehension",
            "answer": "data = range(20)\nsliced = [data[i:i+2] for i in range(0, len(data), 2)]"
          }
        ]
      },
      {
        "skill": "Skill 9: Slicing Strings",
        "exercises": [
          {
            "exercise": "Slice characters from a string",
            "answer": "s = 'hello world'\nprint(s[0:5])  # 'hello'"
          },
          {
            "exercise": "Reverse string using slicing",
            "answer": "s = 'hello'\nprint(s[::-1])  # 'olleh'"
          },
          {
            "exercise": "Use slicing to trim characters",
            "answer": "s = 'hello world'\nprint(s[2:-2])  # 'llo wor' (trim 2 from each end)"
          },
          {
            "exercise": "Extract substrings with offset",
            "answer": "s = 'hello world'\npos = s.find('world')\nprint(s[pos:])  # 'world'"
          },
          {
            "exercise": "Combine slicing with `.find()`",
            "answer": "s = 'hello world'\npos = s.find(' ')\nfirst = s[:pos]  # 'hello'"
          }
        ]
      },
      {
        "skill": "Skill 10: Idiomatic Uses and Patterns",
        "exercises": [
          {
            "exercise": "Use slicing instead of loops when possible",
            "answer": "# Use slicing for operations that would need loops\ns = 'hello'\nreversed_s = s[::-1]  # Instead of loop"
          },
          {
            "exercise": "Use slicing to clone lists safely",
            "answer": "lst = [1, 2, 3]\ncopy = lst[:]  # Safe copy, not reference"
          },
          {
            "exercise": "Avoid index errors with slicing over indexing",
            "answer": "# Slicing is safe: s[100:200] returns ''\n# Indexing raises: s[100] raises IndexError"
          },
          {
            "exercise": "Use slicing in algorithms (e.g. sliding window)",
            "answer": "# Sliding window pattern\ndata = [1, 2, 3, 4, 5]\nfor i in range(len(data) - 2):\n    window = data[i:i+3]\n    print(window)"
          },
          {
            "exercise": "Use slicing to avoid mutation side effects",
            "answer": "# Slicing returns new object\nlst = [1, 2, 3]\ncopy = lst[:]\ncopy[0] = 10  # lst unchanged"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 12: Unpacking & Assignment Idioms",
    "skills": [
      {
        "skill": "Skill 1: Basic Tuple Unpacking",
        "exercises": [
          {
            "exercise": "Assign multiple variables from a tuple (`a, b = (1, 2)`)",
            "answer": "a, b = (1, 2)\nprint(a, b)  # 1 2"
          },
          {
            "exercise": "Unpack without parentheses (`a, b = 1, 2`)",
            "answer": "a, b = 1, 2  # Parentheses optional"
          },
          {
            "exercise": "Unpack with different types (list, tuple, string)",
            "answer": "# Works with lists, tuples, strings\na, b = [1, 2]\nx, y = 'ab'"
          },
          {
            "exercise": "Use unpacking in function return",
            "answer": "def get_coords():\n    return (10, 20)\n\nx, y = get_coords()"
          },
          {
            "exercise": "Unpack inside a loop (`for a, b in ...`)",
            "answer": "items = [(1, 'a'), (2, 'b')]\nfor num, letter in items:\n    print(num, letter)"
          }
        ]
      },
      {
        "skill": "Skill 2: Swapping Values",
        "exercises": [
          {
            "exercise": "Swap variables: `a, b = b, a`",
            "answer": "a, b = 5, 10\na, b = b, a  # Swap"
          },
          {
            "exercise": "Swap list elements using unpacking",
            "answer": "lst = [1, 2, 3]\nlst[0], lst[2] = lst[2], lst[0]"
          },
          {
            "exercise": "Swap in one line during computation",
            "answer": "x, y = compute()\nx, y = y, x"
          },
          {
            "exercise": "Avoid using temp variables with swap idiom",
            "answer": "a, b = 1, 2\n# No temp needed:\na, b = b, a"
          },
          {
            "exercise": "Use swap idiom in sorting algorithms",
            "answer": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]"
          }
        ]
      },
      {
        "skill": "Skill 3: Ignoring Values",
        "exercises": [
          {
            "exercise": "Use `_` to ignore unused value",
            "answer": "a, _ = (1, 2)  # Ignore second value"
          },
          {
            "exercise": "Unpack tuple with unused middle value: `a, _, b = ...`",
            "answer": "a, _, b = (1, 2, 3)  # Ignore middle"
          },
          {
            "exercise": "Ignore multiple values with `*_, last = seq`",
            "answer": "a, *_, last = [1, 2, 3, 4, 5]  # a=1, last=5"
          },
          {
            "exercise": "Use underscore in loop unpacking: `for _, val in ...`",
            "answer": "for _, value in [('a', 1), ('b', 2)]:\n    print(value)"
          },
          {
            "exercise": "Use `_` in zip/unpack to discard",
            "answer": "x, _, y = zip(*[(1, 'ignore', 2), (3, 'ignore', 4)])"
          }
        ]
      },
      {
        "skill": "Skill 4: Extended Iterable Unpacking",
        "exercises": [
          {
            "exercise": "Use `*rest` to collect remaining values",
            "answer": "first, *rest = [1, 2, 3, 4]\n# first=1, rest=[2, 3, 4]"
          },
          {
            "exercise": "Use unpacking to grab head and tail (`head, *tail = lst`)",
            "answer": "head, *tail = [1, 2, 3, 4]\n# head=1, tail=[2, 3, 4]"
          },
          {
            "exercise": "Use unpacking to grab first and last (`first, *_, last = lst`)",
            "answer": "first, *middle, last = [1, 2, 3, 4, 5]\n# first=1, middle=[2, 3, 4], last=5"
          },
          {
            "exercise": "Combine extended unpacking with nested values",
            "answer": "a, *b, c = (1, 2, 3, 4)\n# a=1, b=[2, 3], c=4"
          },
          {
            "exercise": "Use unpacking in return values and assignments",
            "answer": "def func(*args):\n    first, *rest = args\n    return first"
          }
        ]
      },
      {
        "skill": "Skill 5: Starred Assignment Patterns",
        "exercises": [
          {
            "exercise": "`a, *b = [1, 2, 3, 4]` \u2192 capture rest",
            "answer": "a, *b = [1, 2, 3, 4]\n# a=1, b=[2, 3, 4]"
          },
          {
            "exercise": "`*a, b = [1, 2, 3]` \u2192 capture all but last",
            "answer": "*a, b = [1, 2, 3]\n# a=[1, 2], b=3"
          },
          {
            "exercise": "`a, *b, c = ...` \u2192 sandwich pattern",
            "answer": "a, *b, c = [1, 2, 3, 4]\n# a=1, b=[2, 3], c=4"
          },
          {
            "exercise": "Use starred unpacking in loop unpacking",
            "answer": "items = [(1, 2, 3), (4, 5, 6)]\nfor first, *rest in items:\n    print(first, rest)"
          },
          {
            "exercise": "Reconstruct slices via unpacking",
            "answer": "head, *body, tail = range(10)\n# Reconstruct slices"
          }
        ]
      },
      {
        "skill": "Skill 6: Parallel Assignment",
        "exercises": [
          {
            "exercise": "Assign multiple variables at once",
            "answer": "x, y, z = 1, 2, 3"
          },
          {
            "exercise": "Use parallel assignment to destructure tuples in loops",
            "answer": "pairs = [(1, 'a'), (2, 'b')]\nfor num, char in pairs:\n    print(num, char)"
          },
          {
            "exercise": "Parallel assignment with zip/unzip",
            "answer": "# Transpose with zip + unpack\nmatrix = [[1, 2], [3, 4]]\ncol1, col2 = zip(*matrix)"
          },
          {
            "exercise": "Assign from dictionary keys/values with unpacking",
            "answer": "d = {'a': 1, 'b': 2}\nfor k, v in d.items():\n    print(k, v)"
          },
          {
            "exercise": "Use zip \\+ unpack to transpose lists",
            "answer": "nums = [1, 2, 3]\nletters = ['a', 'b', 'c']\nfor n, l in zip(nums, letters):\n    print(n, l)"
          }
        ]
      },
      {
        "skill": "Skill 7: Function Argument Unpacking",
        "exercises": [
          {
            "exercise": "Call function with unpacked tuple: `func(*args)`",
            "answer": "def add(a, b, c):\n    return a + b + c\n\nargs = (1, 2, 3)\nresult = add(*args)"
          },
          {
            "exercise": "Call function with unpacked dictionary: `func(**kwargs)`",
            "answer": "def greet(name, age):\n    print(f'{name} is {age}')\n\ndata = {'name': 'Alice', 'age': 30}\ngreet(**data)"
          },
          {
            "exercise": "Combine unpacked and regular arguments",
            "answer": "def func(a, b, *args, **kwargs):\n    print(a, b, args, kwargs)\n\nfunc(1, 2, 3, 4, x=5)"
          },
          {
            "exercise": "Dynamically call functions with unpacked data",
            "answer": "numbers = [1, 2, 3, 4, 5]\nprint(*numbers)  # Unpacks to: print(1, 2, 3, 4, 5)"
          },
          {
            "exercise": "Use unpacking in testing and flexible APIs",
            "answer": "def test(a, b, c):\n    return a + b + c\n\ndata = [1, 2, 3]\nresult = test(*data)"
          }
        ]
      },
      {
        "skill": "Skill 8: Unpacking in Comprehensions",
        "exercises": [
          {
            "exercise": "Use `for x, y in pairs` inside list comprehension",
            "answer": "pairs = [(1, 'a'), (2, 'b')]\nresult = [f'{n}{c}' for n, c in pairs]"
          },
          {
            "exercise": "Unpack key, value in dict comprehension",
            "answer": "d = {'a': 1, 'b': 2}\ndoubled = {k: v*2 for k, v in d.items()}"
          },
          {
            "exercise": "Combine unpacking with conditional logic",
            "answer": "data = [(1, 2, 3), (4, 5, 6)]\nfirsts = [x for x, y, z in data]"
          },
          {
            "exercise": "Zip/unzip pattern with unpacking in comprehension",
            "answer": "pairs = [((1, 2), 'a'), ((3, 4), 'b')]\nflat = [x for (x, y), z in pairs]"
          },
          {
            "exercise": "Unpack nested items in flattened list",
            "answer": "nested = [[(1, 'a'), (2, 'b')], [(3, 'c')]]\nflat = [f'{n}{c}' for sublist in nested for n, c in sublist]"
          }
        ]
      },
      {
        "skill": "Skill 9: Unpacking with Enumerate and Zip",
        "exercises": [
          {
            "exercise": "`for i, val in enumerate(seq)`",
            "answer": "items = ['a', 'b', 'c']\nfor i, val in enumerate(items):\n    print(i, val)"
          },
          {
            "exercise": "`for key, val in dict.items()`",
            "answer": "d = {'a': 1, 'b': 2}\nfor key, val in d.items():\n    print(key, val)"
          },
          {
            "exercise": "`for a, b in zip(seq1, seq2)`",
            "answer": "names = ['Alice', 'Bob']\nages = [25, 30]\nfor name, age in zip(names, ages):\n    print(name, age)"
          },
          {
            "exercise": "Unpack with `enumerate(zip(...))`",
            "answer": "items = ['a', 'b', 'c']\nfor i, (idx, val) in enumerate(enumerate(items)):\n    print(i, idx, val)"
          },
          {
            "exercise": "Use three-value unpacking with `enumerate(zip(...))`",
            "answer": "a = [1, 2, 3]\nb = ['x', 'y', 'z']\nfor i, (num, letter) in enumerate(zip(a, b)):\n    print(i, num, letter)"
          }
        ]
      },
      {
        "skill": "Skill 10: Defensive and Idiomatic Use",
        "exercises": [
          {
            "exercise": "Avoid unpacking mismatched lengths",
            "answer": "# This will error if lengths don't match:\n# a, b = [1, 2, 3]\ntry:\n    a, b = [1, 2, 3]\nexcept ValueError:\n    print('Length mismatch')"
          },
          {
            "exercise": "Use try/except around uncertain unpacking",
            "answer": "try:\n    a, b, c = some_function()\nexcept ValueError:\n    a, b, c = defaults"
          },
          {
            "exercise": "Use unpacking for readability",
            "answer": "# Improves readability\npoint = (10, 20)\nx, y = point  # Clear\n# vs\nx = point[0]  # Less clear"
          },
          {
            "exercise": "Know when unpacking reduces clarity",
            "answer": "# Good: shows intent\nfor row_num, row_data in enumerate(rows):\n    process(row_num, row_data)\n# Not as clear:\nfor i in range(len(rows)):\n    process(i, rows[i])"
          },
          {
            "exercise": "Use unpacking to replace explicit indexing",
            "answer": "# Use unpacking to replace indexing\ncoords = [(1, 2), (3, 4)]\nfor x, y in coords:\n    # Better than coords[i][0], coords[i][1]"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 13: Object-Oriented Programming (Classes & Objects)",
    "skills": [
      {
        "skill": "Skill 1: Creating and Using Classes",
        "exercises": [
          {
            "exercise": "Define a basic class with `class`",
            "answer": "class Dog:\n    pass\n\nmy_dog = Dog()"
          },
          {
            "exercise": "Create an instance of a class",
            "answer": "class Person:\n    pass\n\nalice = Person()"
          },
          {
            "exercise": "Assign attributes to an instance",
            "answer": "class Car:\n    pass\n\nmy_car = Car()\nmy_car.color = 'red'"
          },
          {
            "exercise": "Access instance attributes with dot notation",
            "answer": "class Person:\n    pass\n\np = Person()\nprint(p.name)  # Would raise AttributeError"
          },
          {
            "exercise": "Use `__init__` constructor to initialize state",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n\nalice = Person('Alice')"
          }
        ]
      },
      {
        "skill": "Skill 2: Defining and Using Methods",
        "exercises": [
          {
            "exercise": "Define instance methods with `self`",
            "answer": "class Dog:\n    def bark(self):\n        print('Woof!')\n\ndog = Dog()\ndog.bark()"
          },
          {
            "exercise": "Call instance methods on objects",
            "answer": "class Person:\n    def greet(self):\n        print('Hello!')\n\np = Person()\np.greet()"
          },
          {
            "exercise": "Pass arguments to instance methods",
            "answer": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\ncalc = Calculator()\nresult = calc.add(5, 3)"
          },
          {
            "exercise": "Use `self.attribute` inside methods",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def greet(self):\n        print(f'Hello, {self.name}')"
          },
          {
            "exercise": "Chain method calls (e.g., `obj.method().other()`)",
            "answer": "class BankAccount:\n    def deposit(self, amount):\n        self.balance += amount\n        return self.get_balance()\n    \n    def get_balance(self):\n        return self.balance"
          }
        ]
      },
      {
        "skill": "Skill 3: String Representations",
        "exercises": [
          {
            "exercise": "Use `__str__()` for friendly printing",
            "answer": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
          },
          {
            "exercise": "Use `__repr__()` for debugging output",
            "answer": "class Dog:\n    def __init__(self, name):\n        self.name = name\n        self.age = 0"
          },
          {
            "exercise": "Customize string output for class instances",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n\np = Person('Alice')\nprint(p.name)"
          },
          {
            "exercise": "Fallback behavior when only `__repr__()` is defined",
            "answer": "class BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance"
          },
          {
            "exercise": "Compare `str()` and `repr()` in interactive mode",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n        self.friends = []"
          }
        ]
      },
      {
        "skill": "Skill 4: Class Attributes and Shared State",
        "exercises": [
          {
            "exercise": "Define a class attribute (shared across instances)",
            "answer": "class Person:\n    def greet(self):\n        print(f'Hello, I am {self.name}')"
          },
          {
            "exercise": "Access class attribute via class and instance",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def greet(self):\n        print(self.name)"
          },
          {
            "exercise": "Modify class attribute and observe effect",
            "answer": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\ncalc = Calculator()\ncalc.add(1, 2)  # Becomes Calculator.add(calc, 1, 2)"
          },
          {
            "exercise": "Use `ClassName.attribute` syntax explicitly",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def update_name(self, new_name):\n        self.name = new_name"
          },
          {
            "exercise": "Avoid accidentally shadowing class attributes",
            "answer": "class Counter:\n    def __init__(self):\n        self.count = 0\n    \n    def increment(self):\n        self.count += 1"
          }
        ]
      },
      {
        "skill": "Skill 5: Class Methods and Static Methods",
        "exercises": [
          {
            "exercise": "Define a class method with `@classmethod`",
            "answer": "class Dog:\n    species = 'Canis lupus'  # Class variable\n    \n    def __init__(self, name):\n        self.name = name  # Instance variable"
          },
          {
            "exercise": "Use `cls` to access class inside class method",
            "answer": "class Counter:\n    count = 0  # Shared by all instances\n    \n    def increment(self):\n        Counter.count += 1"
          },
          {
            "exercise": "Define a static method with `@staticmethod`",
            "answer": "class Config:\n    debug = False  # Class variable\n\nprint(Config.debug)"
          },
          {
            "exercise": "Compare instance vs class vs static method",
            "answer": "class Person:\n    count = 0\n    \n    def __init__(self):\n        Person.count += 1"
          },
          {
            "exercise": "Use class method as alternative constructor",
            "answer": "# Class var: shared\n# Instance var: unique per instance\nclass Dog:\n    species = 'Dog'  # Class\n    def __init__(self, name):\n        self.name = name  # Instance"
          }
        ]
      },
      {
        "skill": "Skill 6: Inheritance and Overriding",
        "exercises": [
          {
            "exercise": "Inherit from a base class",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def __str__(self):\n        return f'Person({self.name})'"
          },
          {
            "exercise": "Override a method in subclass",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __repr__(self):\n        return f'Point({self.x}, {self.y})'"
          },
          {
            "exercise": "Use `super()` to access base class method",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def __str__(self):\n        return self.name\n    \n    def __repr__(self):\n        return f'Person({self.name!r})'"
          },
          {
            "exercise": "Override `__init__()` and call parent constructor",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    \n    def __repr__(self):\n        return f'Point({self.x}, {self.y})'"
          },
          {
            "exercise": "Use polymorphism with inherited methods",
            "answer": "# __str__: user-friendly\n# __repr__: developer-friendly, ideally recreatable\nclass Point:\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n    def __repr__(self):\n        return f'Point({self.x}, {self.y})'"
          }
        ]
      },
      {
        "skill": "Skill 7: Type Checks and Reflection",
        "exercises": [
          {
            "exercise": "Use `isinstance()` to check object type",
            "answer": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __eq__(self, other):\n        return self.name == other.name and self.age == other.age"
          },
          {
            "exercise": "Use `issubclass()` for class hierarchies",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    \n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y"
          },
          {
            "exercise": "Use `hasattr()` to check for attribute",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def __eq__(self, other):\n        if not isinstance(other, Person):\n            return False\n        return self.name == other.name"
          },
          {
            "exercise": "Use `getattr()` and `setattr()` to dynamically access attributes",
            "answer": "from functools import total_ordering\n\n@total_ordering\nclass Person:\n    def __init__(self, age):\n        self.age = age\n    \n    def __eq__(self, other):\n        return self.age == other.age\n    \n    def __lt__(self, other):\n        return self.age < other.age"
          },
          {
            "exercise": "Use `dir()` and `__dict__` for introspection",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    \n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n    \n    def __hash__(self):\n        return hash((self.x, self.y))"
          }
        ]
      },
      {
        "skill": "Skill 8: Encapsulation and Privacy",
        "exercises": [
          {
            "exercise": "Prefix with underscore for \"protected\" attributes",
            "answer": "class Number:\n    def __init__(self, value):\n        self.value = value\n    \n    def __add__(self, other):\n        return Number(self.value + other.value)"
          },
          {
            "exercise": "Use double underscore (`__var`) for name mangling",
            "answer": "class MyList:\n    def __init__(self, items):\n        self.items = items\n    \n    def __len__(self):\n        return len(self.items)\n    \n    def __getitem__(self, index):\n        return self.items[index]"
          },
          {
            "exercise": "Define `@property` to make method act like attribute",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    \n    def __str__(self):\n        return f'({self.x}, {self.y})'\n    \n    def __repr__(self):\n        return f'Point({self.x}, {self.y})'"
          },
          {
            "exercise": "Define setter method with `@x.setter`",
            "answer": "class Counter:\n    def __init__(self):\n        self.count = 0\n    \n    def __call__(self):\n        self.count += 1\n        return self.count"
          },
          {
            "exercise": "Use properties to control access or validation",
            "answer": "class Matrix:\n    def __init__(self, data):\n        self.data = data\n    \n    def __add__(self, other):\n        return Matrix([[a+b for a, b in zip(r1, r2)] \n                       for r1, r2 in zip(self.data, other.data)])"
          }
        ]
      },
      {
        "skill": "Skill 9: Special Methods and Operator Overloading",
        "exercises": [
          {
            "exercise": "Define `__eq__()` for object equality",
            "answer": "class MyList:\n    def __init__(self):\n        self.items = []\n    \n    def __len__(self):\n        return len(self.items)\n    \n    def __getitem__(self, index):\n        return self.items[index]"
          },
          {
            "exercise": "Define `__lt__()` or other comparisons",
            "answer": "class CustomDict:\n    def __init__(self):\n        self._data = {}\n    \n    def __getitem__(self, key):\n        return self._data[key]\n    \n    def __setitem__(self, key, value):\n        self._data[key] = value"
          },
          {
            "exercise": "Override `__len__()`, `__getitem__()`",
            "answer": "class MyCollection:\n    def __init__(self, items):\n        self.items = items\n    \n    def __contains__(self, item):\n        return item in self.items"
          },
          {
            "exercise": "Use `__call__()` to make an object callable",
            "answer": "class MyList:\n    def __init__(self, items):\n        self.items = items\n    \n    def __iter__(self):\n        return iter(self.items)"
          },
          {
            "exercise": "Implement custom container-like class",
            "answer": "class Range:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    \n    def __len__(self):\n        return self.end - self.start\n    \n    def __getitem__(self, index):\n        if index >= len(self):\n            raise IndexError\n        return self.start + index"
          }
        ]
      },
      {
        "skill": "Skill 10: Memory and PerSkillance Patterns",
        "exercises": [
          {
            "exercise": "Use `__slots__` to restrict instance attributes",
            "answer": "class Person:\n    \"\"\"Represents a person with a name and age.\"\"\"\n    \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
          },
          {
            "exercise": "Observe memory savings with `__slots__`",
            "answer": "class BankAccount:\n    def __init__(self, balance=0):\n        self._balance = balance  # Protected\n    \n    def get_balance(self):\n        return self._balance"
          },
          {
            "exercise": "Avoid attribute typos with `__slots__`",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def __repr__(self):\n        return f'Person({self.name!r})'\n    \n    def __eq__(self, other):\n        return isinstance(other, Person) and self.name == other.name"
          },
          {
            "exercise": "Understand dynamic attribute creation by default",
            "answer": "# Keep classes focused on single responsibility\nclass User:\n    def __init__(self, name):\n        self.name = name\n\nclass UserValidator:\n    def validate(self, user):\n        return len(user.name) > 0"
          },
          {
            "exercise": "Use class hierarchy responsibly to avoid complexity",
            "answer": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __repr__(self):\n        return f'Point({self.x}, {self.y})'\n    \n    def __eq__(self, other):\n        return isinstance(other, Point) and self.x == other.x and self.y == other.y"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 14: Functional Programming Tools",
    "skills": [
      {
        "skill": "Skill 1: Using `map()`",
        "exercises": [
          {
            "exercise": "Use `map()` with a named function",
            "answer": "try:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')"
          },
          {
            "exercise": "Use `map()` with a lambda function",
            "answer": "try:\n    result = int('abc')\nexcept ValueError:\n    print('Invalid integer')"
          },
          {
            "exercise": "Convert result of `map()` to a list",
            "answer": "try:\n    with open('missing.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    print('File not found')"
          },
          {
            "exercise": "Map over multiple iterables with `map()`",
            "answer": "try:\n    lst = [1, 2, 3]\n    print(lst[10])\nexcept IndexError:\n    print('Index out of range')"
          },
          {
            "exercise": "Use `map()` in combination with `str()`, `int()`, etc.",
            "answer": "try:\n    d = {'a': 1}\n    print(d['b'])\nexcept KeyError:\n    print('Key not found')"
          }
        ]
      },
      {
        "skill": "Skill 2: Using `filter()`",
        "exercises": [
          {
            "exercise": "Use `filter()` with a named predicate",
            "answer": "try:\n    result = int(input())\nexcept (ValueError, TypeError):\n    print('Invalid input')"
          },
          {
            "exercise": "Use `filter()` with a lambda function",
            "answer": "try:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print('Division error')\nexcept ValueError:\n    print('Value error')"
          },
          {
            "exercise": "Convert result of `filter()` to a list",
            "answer": "try:\n    # code\n    pass\nexcept (FileNotFoundError, PermissionError) as e:\n    print(f'File error: {e}')"
          },
          {
            "exercise": "Filter `None` values with `filter(None, iterable)`",
            "answer": "try:\n    data = process()\nexcept Exception as e:\n    print(f'Error: {e}')"
          },
          {
            "exercise": "Use filtering for boolean tests or conditions",
            "answer": "try:\n    result = risky_operation()\nexcept (TypeError, ValueError, KeyError) as e:\n    log_error(e)\n    result = default_value"
          }
        ]
      },
      {
        "skill": "Skill 3: Using `reduce()`",
        "exercises": [
          {
            "exercise": "Import and use `reduce()` from `functools`",
            "answer": "try:\n    result = safe_operation()\nexcept ValueError:\n    print('Error')\nelse:\n    print('Success')"
          },
          {
            "exercise": "Use `reduce()` to sum or multiply a sequence",
            "answer": "try:\n    f = open('file.txt', 'r')\n    data = f.read()\nexcept FileNotFoundError:\n    print('Not found')\nfinally:\n    f.close()  # Always runs"
          },
          {
            "exercise": "Use `reduce()` to flatten a list of lists",
            "answer": "try:\n    result = compute()\nexcept Exception:\n    result = None\nfinally:\n    cleanup()"
          },
          {
            "exercise": "Combine with lambda for custom accumulation",
            "answer": "try:\n    data = fetch()\nexcept Exception as e:\n    log_error(e)\n    raise\nfinally:\n    close_connection()"
          },
          {
            "exercise": "Use named accumulator functions for readability",
            "answer": "f = None\ntry:\n    f = open('file.txt', 'r')\n    data = f.read()\nfinally:\n    if f:\n        f.close()"
          }
        ]
      },
      {
        "skill": "Skill 4: Using `functools.partial()`",
        "exercises": [
          {
            "exercise": "Create a new function with fixed parameters",
            "answer": "def check_positive(x):\n    if x < 0:\n        raise ValueError('Must be positive')"
          },
          {
            "exercise": "Use `partial()` to simplify a repeated call pattern",
            "answer": "def divide(a, b):\n    if b == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    return a / b"
          },
          {
            "exercise": "Combine `partial()` with `map()` or `filter()`",
            "answer": "try:\n    data = fetch()\nexcept ConnectionError:\n    raise RuntimeError('Failed to fetch')"
          },
          {
            "exercise": "Use `partial()` with built-in and user-defined functions",
            "answer": "try:\n    process()\nexcept ValueError as e:\n    raise ValueError(f'Processing failed: {e}') from e"
          },
          {
            "exercise": "Use `partial()` to configure callbacks or handlers",
            "answer": "class InvalidAgeError(Exception):\n    pass\n\ndef set_age(age):\n    if age < 0:\n        raise InvalidAgeError('Age cannot be negative')"
          }
        ]
      },
      {
        "skill": "Skill 5: `sorted()` with Functional Keys",
        "exercises": [
          {
            "exercise": "Sort with `key=lambda x: ...`",
            "answer": "class MyError(Exception):\n    pass\n\nraise MyError('Something went wrong')"
          },
          {
            "exercise": "Sort with `operator.itemgetter()`",
            "answer": "class ValidationError(Exception):\n    def __init__(self, field, message):\n        self.field = field\n        self.message = message\n        super().__init__(f'{field}: {message}')"
          },
          {
            "exercise": "Sort complex data structures (dicts, tuples)",
            "answer": "class DatabaseError(Exception):\n    pass\n\nclass ConnectionError(DatabaseError):\n    pass\n\nclass QueryError(DatabaseError):\n    pass"
          },
          {
            "exercise": "Sort with multiple levels of priority",
            "answer": "class InvalidInputError(ValueError):\n    \"\"\"Raised when input validation fails.\"\"\"\n    pass"
          },
          {
            "exercise": "Reverse sorting with `reverse=True`",
            "answer": "class ConfigError(Exception):\n    def __init__(self, config_key, reason):\n        self.config_key = config_key\n        self.reason = reason\n        super().__init__(f'Config error for {config_key}: {reason}')"
          }
        ]
      },
      {
        "skill": "Skill 6: `any()` and `all()` in Logic",
        "exercises": [
          {
            "exercise": "Use `any()` to check if at least one condition is true",
            "answer": "# Catch broad, then specific\ntry:\n    operation()\nexcept ValueError:\n    # Handle specific\n    pass\nexcept Exception:\n    # Handle general\n    pass"
          },
          {
            "exercise": "Use `all()` to verify that all elements pass a condition",
            "answer": "class AppError(Exception):\n    pass\n\nclass DatabaseError(AppError):\n    pass\n\nclass NetworkError(AppError):\n    pass"
          },
          {
            "exercise": "Combine with list/generator comprehension",
            "answer": "try:\n    risky_code()\nexcept KeyError:\n    handle_key_error()\nexcept LookupError:  # KeyError is subclass\n    handle_lookup_error()"
          },
          {
            "exercise": "Use for safety checks, validation, etc.",
            "answer": "# Order matters - specific before general\ntry:\n    code()\nexcept FileNotFoundError:\n    print('File not found')\nexcept OSError:\n    print('OS error')"
          },
          {
            "exercise": "Use `not any(...)` for \"none match\" logic",
            "answer": "class ValidationError(Exception):\n    pass\n\nclass EmailValidationError(ValidationError):\n    pass\n\nclass PasswordValidationError(ValidationError):\n    pass"
          }
        ]
      },
      {
        "skill": "Skill 7: Composing Functions",
        "exercises": [
          {
            "exercise": "Nest function calls (`f(g(x))`)",
            "answer": "with open('file.txt', 'r') as f:\n    data = f.read()\n# File automatically closed"
          },
          {
            "exercise": "Create manual function pipelines",
            "answer": "from contextlib import contextmanager\n\n@contextmanager\ndef managed_resource():\n    resource = acquire()\n    try:\n        yield resource\n    finally:\n        release(resource)"
          },
          {
            "exercise": "Compose functions with lambda chaining",
            "answer": "class ManagedFile:\n    def __init__(self, filename):\n        self.filename = filename\n    \n    def __enter__(self):\n        self.file = open(self.filename, 'r')\n        return self.file\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.file.close()"
          },
          {
            "exercise": "Use higher-order functions that return functions",
            "answer": "with open('in.txt', 'r') as f_in, open('out.txt', 'w') as f_out:\n    data = f_in.read()\n    f_out.write(data)"
          },
          {
            "exercise": "Use decorators to transSkill function behavior",
            "answer": "from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open('file.txt', 'r') as f:\n        data = f.read()"
          }
        ]
      },
      {
        "skill": "Skill 8: Iterator Pipelines with `itertools`",
        "exercises": [
          {
            "exercise": "Use `itertools.chain()` to flatten iterables",
            "answer": "def divide(a, b):\n    assert b != 0, 'Divisor cannot be zero'\n    return a / b"
          },
          {
            "exercise": "Use `itertools.starmap()` for unpacked mapping",
            "answer": "def process_list(lst):\n    assert isinstance(lst, list), 'Must be a list'\n    assert len(lst) > 0, 'List cannot be empty'"
          },
          {
            "exercise": "Use `itertools.accumulate()` for running totals",
            "answer": "x = 10\nassert x > 0, f'Expected positive, got {x}'"
          },
          {
            "exercise": "Combine generators with functional tools",
            "answer": "# Use assertions for internal checks, not user input validation\ndef internal_function(data):\n    assert data is not None\n    # process data"
          },
          {
            "exercise": "Lazy evaluation with `itertools.islice()`",
            "answer": "def calculate(x, y):\n    result = x + y\n    assert result >= 0, 'Result should be non-negative'\n    return result"
          }
        ]
      },
      {
        "skill": "Skill 9: The `operator` Module",
        "exercises": [
          {
            "exercise": "Use `operator.add`, `operator.mul`, etc.",
            "answer": "import logging\n\ntry:\n    risky_operation()\nexcept Exception as e:\n    logging.error(f'Operation failed: {e}')\n    raise"
          },
          {
            "exercise": "Use `operator.itemgetter()` for sorting and selection",
            "answer": "import logging\n\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    process()\nexcept ValueError as e:\n    logging.warning(f'Invalid value: {e}')"
          },
          {
            "exercise": "Use `operator.attrgetter()` for sorting by attribute",
            "answer": "try:\n    result = compute()\nexcept Exception as e:\n    logger.exception('Computation failed')\n    result = default_value"
          },
          {
            "exercise": "Use with `map()` or `sorted()` for cleaner code",
            "answer": "# Log and re-raise\ntry:\n    critical_operation()\nexcept Exception as e:\n    logger.critical(f'Critical failure: {e}')\n    raise"
          },
          {
            "exercise": "Compare with lambda equivalents",
            "answer": "import logging\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    data = fetch()\nexcept ConnectionError:\n    logger.error('Connection failed', exc_info=True)"
          }
        ]
      },
      {
        "skill": "Skill 10: Functional Idioms in Real Projects",
        "exercises": [
          {
            "exercise": "Replace explicit loops with `map()`/`filter()`",
            "answer": "# Good: Specific exceptions\ntry:\n    data = int(input())\nexcept ValueError:\n    print('Invalid integer')\n\n# Bad: Catch all\n# except Exception:\n#     pass"
          },
          {
            "exercise": "Replace conditionals with `any()`/`all()`",
            "answer": "# Don't use exceptions for control flow\n# Bad:\n# try:\n#     lst[i]\n# except IndexError:\n#     return None\n# Good:\nif i < len(lst):\n    return lst[i]"
          },
          {
            "exercise": "Avoid readability loss with deeply nested lambdas",
            "answer": "try:\n    result = operation()\nexcept SpecificError:\n    handle_error()\n# Don't catch Exception unless you re-raise"
          },
          {
            "exercise": "Document purpose of partial/reduce logic",
            "answer": "# Document exceptions in docstrings\ndef divide(a, b):\n    \"\"\"Divide a by b.\n    \n    Raises:\n        ZeroDivisionError: If b is zero\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    return a / b"
          },
          {
            "exercise": "Know when imperative style is clearer than functional",
            "answer": "# Clean up in finally\nresource = None\ntry:\n    resource = acquire()\n    use(resource)\nfinally:\n    if resource:\n        release(resource)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 15: Built-in Functions & Utilities",
    "skills": [
      {
        "skill": "Skill 1: Measuring and Inspecting",
        "exercises": [
          {
            "exercise": "Use `len()` to get length of sequences",
            "answer": "lst = [1, 2, 3, 4, 5]\nprint(len(lst))  # 5"
          },
          {
            "exercise": "Use `type()` to check object type",
            "answer": "x = 42\nprint(type(x))  # <class 'int'>"
          },
          {
            "exercise": "Use `id()` to get unique object identifier",
            "answer": "a = [1, 2, 3]\nprint(id(a))  # Unique memory address"
          },
          {
            "exercise": "Use `dir()` to list available attributes",
            "answer": "x = 10\nprint(dir(x))  # Lists all attributes and methods"
          },
          {
            "exercise": "Use `vars()` and `__dict__` to inspect objects",
            "answer": "class Person:\n    def __init__(self, name):\n        self.name = name\n\np = Person('Alice')\nprint(vars(p))  # {'name': 'Alice'}\nprint(p.__dict__)  # {'name': 'Alice'}"
          }
        ]
      },
      {
        "skill": "Skill 2: Conversion Functions",
        "exercises": [
          {
            "exercise": "Convert to `int()`, `float()`, `str()`",
            "answer": "print(int('42'))  # 42\nprint(float(3.14))  # 3.14\nprint(str(100))  # '100'"
          },
          {
            "exercise": "Convert iterable to `list()`, `set()`, or `tuple()`",
            "answer": "lst = [1, 2, 3]\nprint(list(range(5)))  # [0, 1, 2, 3, 4]\nprint(set([1, 2, 2, 3]))  # {1, 2, 3}\nprint(tuple([1, 2, 3]))  # (1, 2, 3)"
          },
          {
            "exercise": "Use `bool()` to test truthiness",
            "answer": "print(bool(0))  # False\nprint(bool(1))  # True\nprint(bool([]))  # False\nprint(bool([1]))  # True"
          },
          {
            "exercise": "Convert string to number and back",
            "answer": "s = '123'\nn = int(s)\nprint(n)  # 123\nback = str(n)\nprint(back)  # '123'"
          },
          {
            "exercise": "Use `repr()` vs `str()` to control display",
            "answer": "x = 42\nprint(repr(x))  # '42'\nprint(str(x))  # '42'\n# repr() is for debugging, str() is for display"
          }
        ]
      },
      {
        "skill": "Skill 3: Math and Aggregation",
        "exercises": [
          {
            "exercise": "Use `sum()` on numeric list",
            "answer": "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers))  # 15"
          },
          {
            "exercise": "Use `min()` and `max()` on values or with key",
            "answer": "numbers = [10, 5, 20, 15]\nprint(min(numbers))  # 5\nprint(max(numbers))  # 20\n# With key function:\nwords = ['apple', 'pie', 'zoo']\nprint(max(words, key=len))  # 'apple'"
          },
          {
            "exercise": "Use `abs()` for absolute value",
            "answer": "print(abs(-10))  # 10\nprint(abs(5))  # 5"
          },
          {
            "exercise": "Use `pow()` and `round()`",
            "answer": "print(pow(2, 3))  # 8\nprint(round(3.14159, 2))  # 3.14"
          },
          {
            "exercise": "Calculate average with `sum() / len()`",
            "answer": "numbers = [10, 20, 30, 40]\naverage = sum(numbers) / len(numbers)\nprint(average)  # 25.0"
          }
        ]
      },
      {
        "skill": "Skill 4: Sorting Utilities",
        "exercises": [
          {
            "exercise": "Use `sorted()` to return new sorted list",
            "answer": "lst = [3, 1, 4, 1, 5]\nsorted_lst = sorted(lst)\nprint(sorted_lst)  # [1, 1, 3, 4, 5]"
          },
          {
            "exercise": "Use `sorted(..., reverse=True)`",
            "answer": "lst = [3, 1, 4, 1, 5]\nreverse_sorted = sorted(lst, reverse=True)\nprint(reverse_sorted)  # [5, 4, 3, 1, 1]"
          },
          {
            "exercise": "Use `key=` argument with lambda",
            "answer": "words = ['apple', 'pie', 'zoo', 'a']\nsorted_words = sorted(words, key=len)\nprint(sorted_words)  # ['a', 'pie', 'zoo', 'apple']"
          },
          {
            "exercise": "Use `min()`/`max()` with `key=`",
            "answer": "numbers = [10, 5, 20, 15]\nprint(min(numbers, key=lambda x: abs(x - 12)))  # 10\nprint(max(numbers, key=lambda x: x % 10))  # 15"
          },
          {
            "exercise": "Use `reversed()` to reverse iterables",
            "answer": "lst = [1, 2, 3, 4, 5]\nreversed_lst = list(reversed(lst))\nprint(reversed_lst)  # [5, 4, 3, 2, 1]"
          }
        ]
      },
      {
        "skill": "Skill 5: Enumerate and Zip",
        "exercises": [
          {
            "exercise": "Use `enumerate()` for index-value pairs",
            "answer": "items = ['a', 'b', 'c']\nfor i, val in enumerate(items):\n    print(i, val)  # 0 a, 1 b, 2 c"
          },
          {
            "exercise": "Set custom start index in `enumerate()`",
            "answer": "items = ['a', 'b', 'c']\nfor i, val in enumerate(items, start=1):\n    print(i, val)  # 1 a, 2 b, 3 c"
          },
          {
            "exercise": "Use `zip()` to combine multiple iterables",
            "answer": "nums = [1, 2, 3]\nletters = ['a', 'b', 'c']\nfor n, l in zip(nums, letters):\n    print(n, l)  # (1, 'a'), (2, 'b'), (3, 'c')"
          },
          {
            "exercise": "Unpack zipped iterables",
            "answer": "nums = [1, 2, 3]\nletters = ['a', 'b', 'c']\npairs = list(zip(nums, letters))\nprint(pairs)  # [(1, 'a'), (2, 'b'), (3, 'c')]"
          },
          {
            "exercise": "Use `zip()` with `*` operator to transpose",
            "answer": "# Transpose with zip\nmatrix = [[1, 2, 3], [4, 5, 6]]\ntransposed = list(zip(*matrix))\nprint(transposed)  # [(1, 4), (2, 5), (3, 6)]"
          }
        ]
      },
      {
        "skill": "Skill 6: Range and Iteration Tools",
        "exercises": [
          {
            "exercise": "Use `range(stop)`",
            "answer": "for i in range(5):\n    print(i)  # 0, 1, 2, 3, 4"
          },
          {
            "exercise": "Use `range(start, stop)`",
            "answer": "for i in range(2, 7):\n    print(i)  # 2, 3, 4, 5, 6"
          },
          {
            "exercise": "Use `range(start, stop, step)`",
            "answer": "for i in range(0, 10, 2):\n    print(i)  # 0, 2, 4, 6, 8"
          },
          {
            "exercise": "Loop in reverse with `range(high, low, -1)`",
            "answer": "for i in range(10, 0, -1):\n    print(i)  # 10, 9, 8, ..., 1"
          },
          {
            "exercise": "Use `range()` with `len()` for indexed access",
            "answer": "lst = ['a', 'b', 'c', 'd']\nfor i in range(len(lst)):\n    print(i, lst[i])  # Index and value"
          }
        ]
      },
      {
        "skill": "Skill 7: Boolean Tools",
        "exercises": [
          {
            "exercise": "Use `all()` and `any()`",
            "answer": "numbers = [1, 2, 3, 4]\nprint(all(x > 0 for x in numbers))  # True\nprint(any(x > 3 for x in numbers))  # True"
          },
          {
            "exercise": "Use `isinstance()` for type safety",
            "answer": "obj = 42\nprint(isinstance(obj, int))  # True\nprint(isinstance(obj, str))  # False"
          },
          {
            "exercise": "Use `callable()` to check if something is callable",
            "answer": "func = lambda x: x + 1\nprint(callable(func))  # True\nprint(callable(42))  # False"
          },
          {
            "exercise": "Use `hash()` for immutables",
            "answer": "s = 'hello'\nprint(hash(s))  # Returns hash value\nlst = [1, 2]\n# print(hash(lst))  # Error: unhashable type"
          },
          {
            "exercise": "Use `eval()` cautiously for dynamic code",
            "answer": "# CAUTION: eval() can execute arbitrary code\nresult = eval('2 + 3')\nprint(result)  # 5\n# Never use eval() with untrusted input!"
          }
        ]
      },
      {
        "skill": "Skill 8: Memory and Identity",
        "exercises": [
          {
            "exercise": "Use `id()` to compare object identity",
            "answer": "a = [1, 2, 3]\nb = [1, 2, 3]\nprint(id(a) == id(b))  # False (different objects)\nprint(a == b)  # True (same content)"
          },
          {
            "exercise": "Use `is` vs `==`",
            "answer": "a = [1, 2, 3]\nb = a\nprint(a is b)  # True (same object)\nprint(a == b)  # True (same content)"
          },
          {
            "exercise": "Use `del` to delete variables",
            "answer": "x = 10\ny = x\ndel x\nprint(y)  # 10 (y still exists)"
          },
          {
            "exercise": "Understand interning for small objects",
            "answer": "# Small integers are interned\na = 256\nb = 256\nprint(a is b)  # True\n# Large integers are not\nc = 1000\nd = 1000\nprint(c is d)  # May be False"
          },
          {
            "exercise": "Use `copy()` and `deepcopy()` (from `copy` module)",
            "answer": "import copy\noriginal = [[1, 2], [3, 4]]\nshallow = original.copy()\ndeep = copy.deepcopy(original)\noriginal[0][0] = 99\nprint(shallow[0][0])  # 99 (affected)\nprint(deep[0][0])  # 1 (not affected)"
          }
        ]
      },
      {
        "skill": "Skill 9: Function Wrapping Tools",
        "exercises": [
          {
            "exercise": "Use `help()` to get function documentation",
            "answer": "def greet(name):\n    \"\"\"Greet a person by name.\"\"\"\n    return f'Hello, {name}'\n\nhelp(greet)  # Shows docstring"
          },
          {
            "exercise": "Use `callable()` to test object as function",
            "answer": "print(callable(print))  # True\nprint(callable(42))  # False\nprint(callable(lambda x: x))  # True"
          },
          {
            "exercise": "Use `globals()` and `locals()` for introspection",
            "answer": "def func():\n    local_var = 10\n    print(locals())  # Shows local variables\n\nprint(globals().keys())  # Shows global variables"
          },
          {
            "exercise": "Use `__name__ == \"__main__\"` idiom",
            "answer": "def main():\n    print('Running as script')\n\nif __name__ == '__main__':\n    main()"
          },
          {
            "exercise": "Define lightweight functions with `lambda`",
            "answer": "add = lambda x, y: x + y\nprint(add(2, 3))  # 5"
          }
        ]
      },
      {
        "skill": "Skill 10: Defensive Built-ins",
        "exercises": [
          {
            "exercise": "Use `try/except` around risky built-in calls",
            "answer": "try:\n    value = int(input('Enter number: '))\nexcept ValueError:\n    print('Invalid number')"
          },
          {
            "exercise": "Default to safe values with `or` (`val or default`)",
            "answer": "user_input = None\nvalue = user_input or 'default'\nprint(value)  # 'default'"
          },
          {
            "exercise": "Use `get()` on dict to avoid KeyError",
            "answer": "d = {'a': 1, 'b': 2}\nvalue = d.get('c', 'not found')\nprint(value)  # 'not found'"
          },
          {
            "exercise": "Use `str(x)` to prevent print failures",
            "answer": "obj = None\nprint(str(obj))  # 'None' (safe to print anything)"
          },
          {
            "exercise": "Prefer built-ins over reinventing solutions",
            "answer": "# Use built-ins instead of reinventing\nnumbers = [1, 2, 3, 4, 5]\ntotal = sum(numbers)  # Better than manual loop\nmaximum = max(numbers)  # Better than manual loop"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 16: Error Handling & Exceptions",
    "skills": [
      {
        "skill": "Skill 1: Basic Try/Except",
        "exercises": [
          {
            "exercise": "Wrap risky code in `try/except`",
            "answer": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')"
          },
          {
            "exercise": "Catch a specific exception (e.g. `ValueError`)",
            "answer": "try:\n    num = int('abc')\nexcept ValueError:\n    print('Invalid integer')"
          },
          {
            "exercise": "Catch multiple exception types",
            "answer": "try:\n    with open('missing.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    print('File not found')"
          },
          {
            "exercise": "Use a generic `except:` block (carefully)",
            "answer": "try:\n    lst = [1, 2, 3]\n    print(lst[10])\nexcept IndexError:\n    print('Index out of range')"
          },
          {
            "exercise": "Print or log exception details",
            "answer": "try:\n    d = {'a': 1}\n    print(d['b'])\nexcept KeyError:\n    print('Key not found')"
          }
        ]
      },
      {
        "skill": "Skill 2: `else` and `finally` Blocks",
        "exercises": [
          {
            "exercise": "Use `try/except/else` to separate logic",
            "answer": "try:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print('Error')\nelse:\n    print('Success:', result)"
          },
          {
            "exercise": "Use `finally` to always run cleanup code",
            "answer": "f = None\ntry:\n    f = open('file.txt', 'r')\n    data = f.read()\nexcept FileNotFoundError:\n    print('Not found')\nfinally:\n    if f:\n        f.close()"
          },
          {
            "exercise": "Use `finally` for file/resource closure",
            "answer": "try:\n    result = compute()\nexcept Exception:\n    result = None\nfinally:\n    cleanup()"
          },
          {
            "exercise": "Combine `else` with `finally`",
            "answer": "try:\n    data = fetch()\nexcept Exception as e:\n    log_error(e)\n    raise\nfinally:\n    close_connection()"
          },
          {
            "exercise": "Understand flow control between blocks",
            "answer": "# finally always runs\ntry:\n    x = 10 / 2\nexcept:\n    print('Error')\nfinally:\n    print('Cleanup')"
          }
        ]
      },
      {
        "skill": "Skill 3: Raising Exceptions",
        "exercises": [
          {
            "exercise": "Use `raise` to signal an error",
            "answer": "def check_positive(x):\n    if x < 0:\n        raise ValueError('Must be positive')\n    return x"
          },
          {
            "exercise": "Raise with a custom message",
            "answer": "def divide(a, b):\n    if b == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    return a / b"
          },
          {
            "exercise": "Raise built-in exceptions like `TypeError`, `ValueError`",
            "answer": "try:\n    data = fetch()\nexcept ConnectionError:\n    raise RuntimeError('Failed to fetch data')"
          },
          {
            "exercise": "Use `raise` inside conditionals",
            "answer": "try:\n    process()\nexcept ValueError as e:\n    raise ValueError(f'Processing failed: {e}') from e"
          },
          {
            "exercise": "Use `raise` to rethrow caught exception",
            "answer": "class InvalidAgeError(Exception):\n    pass\n\ndef set_age(age):\n    if age < 0:\n        raise InvalidAgeError('Age cannot be negative')"
          }
        ]
      },
      {
        "skill": "Skill 4: Assertions",
        "exercises": [
          {
            "exercise": "Use `assert` to enforce assumptions",
            "answer": "def divide(a, b):\n    assert b != 0, 'Divisor cannot be zero'\n    return a / b"
          },
          {
            "exercise": "Assert inside functions to check input",
            "answer": "def process_list(lst):\n    assert isinstance(lst, list), 'Must be a list'\n    assert len(lst) > 0, 'List cannot be empty'"
          },
          {
            "exercise": "Add error message to assertion",
            "answer": "x = 10\nassert x > 0, f'Expected positive, got {x}'"
          },
          {
            "exercise": "Use assertions during debugging",
            "answer": "# Use assertions for internal checks, not user validation\ndef internal_function(data):\n    assert data is not None\n    # process data"
          },
          {
            "exercise": "Know when not to use `assert` in production",
            "answer": "def calculate(x, y):\n    result = x + y\n    assert result >= 0, 'Result should be non-negative'\n    return result"
          }
        ]
      },
      {
        "skill": "Skill 5: Custom Exception Classes",
        "exercises": [
          {
            "exercise": "Define your own exception class",
            "answer": "class MyError(Exception):\n    pass\n\nraise MyError('Something went wrong')"
          },
          {
            "exercise": "Inherit from `Exception`",
            "answer": "class ValidationError(Exception):\n    def __init__(self, field, message):\n        self.field = field\n        self.message = message\n        super().__init__(f'{field}: {message}')"
          },
          {
            "exercise": "Use `__init__` to accept custom error data",
            "answer": "class DatabaseError(Exception):\n    pass\n\nclass ConnectionError(DatabaseError):\n    pass\n\nclass QueryError(DatabaseError):\n    pass"
          },
          {
            "exercise": "Raise custom exceptions in real code",
            "answer": "class InvalidInputError(ValueError):\n    \"\"\"Raised when input validation fails.\"\"\"\n    pass"
          },
          {
            "exercise": "Catch custom exceptions specifically",
            "answer": "class ConfigError(Exception):\n    def __init__(self, config_key, reason):\n        self.config_key = config_key\n        self.reason = reason\n        super().__init__(f'Config error for {config_key}: {reason}')"
          }
        ]
      },
      {
        "skill": "Skill 6: Exception Object Inspection",
        "exercises": [
          {
            "exercise": "Catch exception as variable: `except X as e:`",
            "answer": "try:\n    result = int('abc')\nexcept ValueError as e:\n    print(f'Error: {e}')"
          },
          {
            "exercise": "Access message with `str(e)`",
            "answer": "try:\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(str(e))  # Convert to string"
          },
          {
            "exercise": "Use `repr(e)` for debugging",
            "answer": "try:\n    result = int('abc')\nexcept ValueError as e:\n    print(repr(e))  # For debugging"
          },
          {
            "exercise": "Log full exception details with traceback module",
            "answer": "import traceback\n\ntry:\n    result = 10 / 0\nexcept Exception as e:\n    traceback.print_exc()"
          },
          {
            "exercise": "Use exception chaining (`raise ... from ...`)",
            "answer": "try:\n    process()\nexcept ValueError as e:\n    raise RuntimeError('Processing failed') from e"
          }
        ]
      },
      {
        "skill": "Skill 7: Defensive Programming Patterns",
        "exercises": [
          {
            "exercise": "Catch and handle predictable user input errors",
            "answer": "while True:\n    try:\n        age = int(input('Enter age: '))\n        break\n    except ValueError:\n        print('Please enter a valid number')"
          },
          {
            "exercise": "Catch file-related exceptions (`FileNotFoundError`)",
            "answer": "try:\n    with open('data.txt', 'r') as f:\n        data = f.read()\nexcept FileNotFoundError:\n    print('File not found')\n    data = None"
          },
          {
            "exercise": "Use `try` around network, file, and parsing logic",
            "answer": "try:\n    with open('file.txt', 'r') as f:\n        content = f.read()\nexcept (FileNotFoundError, PermissionError) as e:\n    print(f'Cannot read file: {e}')"
          },
          {
            "exercise": "Build fallback logic with `try/except`",
            "answer": "def safe_divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 0  # Fallback value"
          },
          {
            "exercise": "Fail gracefully and report clearly",
            "answer": "try:\n    result = risky_operation()\nexcept Exception as e:\n    logger.error(f'Operation failed: {e}')\n    result = None"
          }
        ]
      },
      {
        "skill": "Skill 8: Suppressing and Ignoring Errors",
        "exercises": [
          {
            "exercise": "Use `contextlib.suppress()` to ignore known errors",
            "answer": "from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open('file.txt', 'r') as f:\n        data = f.read()"
          },
          {
            "exercise": "Use empty `except` block only when justified",
            "answer": "try:\n    os.remove('temp.txt')\nexcept FileNotFoundError:\n    pass  # Ignore if file doesn't exist"
          },
          {
            "exercise": "Avoid broad `except:` \u2014 always be specific",
            "answer": "# Be specific - avoid broad except\ntry:\n    process()\nexcept ValueError:\n    pass  # Only ignore ValueError"
          },
          {
            "exercise": "Use warnings instead of exceptions where appropriate",
            "answer": "import warnings\n\nwarnings.warn('This feature is deprecated', DeprecationWarning)"
          },
          {
            "exercise": "Use logging for silent failure diagnostics",
            "answer": "import logging\n\ntry:\n    risky_operation()\nexcept Exception as e:\n    logging.warning(f'Operation failed silently: {e}')"
          }
        ]
      },
      {
        "skill": "Skill 9: Testing with Exceptions",
        "exercises": [
          {
            "exercise": "Write tests that expect exceptions",
            "answer": "import pytest\n\ndef test_divide_by_zero():\n    with pytest.raises(ZeroDivisionError):\n        result = 10 / 0"
          },
          {
            "exercise": "Use `pytest.raises()` or `unittest` assertRaises",
            "answer": "import pytest\n\ndef test_value_error():\n    with pytest.raises(ValueError, match='invalid'):\n        raise ValueError('invalid input')"
          },
          {
            "exercise": "Trigger exceptions on invalid input",
            "answer": "def divide(a, b):\n    if b == 0:\n        raise ValueError('Cannot divide by zero')\n    return a / b\n\n# Test that it raises\nassert divide(10, 0) raises ValueError"
          },
          {
            "exercise": "Validate exception messages",
            "answer": "import pytest\n\ndef test_error_message():\n    with pytest.raises(ValueError) as exc_info:\n        raise ValueError('custom message')\n    assert 'custom' in str(exc_info.value)"
          },
          {
            "exercise": "Ensure code fails for the right reason",
            "answer": "def process(data):\n    if not data:\n        raise ValueError('Data cannot be empty')\n    return len(data)\n\n# Test with invalid input\ntry:\n    process([])\n    assert False, 'Should have raised'\nexcept ValueError:\n    pass  # Expected"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Prefer prevention over exception catching",
            "answer": "# Prevent before catching\nif x != 0:\n    result = 10 / x\n# vs\ntry:\n    result = 10 / x\nexcept ZeroDivisionError:\n    pass"
          },
          {
            "exercise": "Catch only what you can handle",
            "answer": "# Catch only what you can handle\ntry:\n    result = risky_operation()\nexcept ValueError:\n    # Handle specific error\n    result = default_value"
          },
          {
            "exercise": "Clean up with `finally` or `with` statements",
            "answer": "try:\n    f = open('file.txt', 'r')\n    data = f.read()\nfinally:\n    f.close()\n# Or better: use with statement\nwith open('file.txt', 'r') as f:\n    data = f.read()"
          },
          {
            "exercise": "Raise exceptions that match the problem",
            "answer": "# Raise exceptions that match the problem\nif age < 0:\n    raise ValueError('Age cannot be negative')\n# Not: raise Exception('Age cannot be negative')"
          },
          {
            "exercise": "Keep error messages helpful and human-readable",
            "answer": "# Helpful error messages\nif not username:\n    raise ValueError('Username is required and cannot be empty')\n# Not: raise ValueError('Error')"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 17: Datetime & Time Utilities",
    "skills": [
      {
        "skill": "Skill 1: Getting the Current Time",
        "exercises": [
          {
            "exercise": "Get current datetime with `datetime.now()`",
            "answer": "from datetime import datetime\n\nnow = datetime.now()\nprint(now)"
          },
          {
            "exercise": "Get current date with `datetime.today()`",
            "answer": "from datetime import datetime\n\ntoday = datetime.today()\nprint(today)"
          },
          {
            "exercise": "Get current timestamp with `time.time()`",
            "answer": "import time\n\ntimestamp = time.time()\nprint(timestamp)  # Seconds since epoch"
          },
          {
            "exercise": "Convert timestamp to datetime",
            "answer": "from datetime import datetime\n\ntimestamp = 1609459200\ndt = datetime.fromtimestamp(timestamp)\nprint(dt)"
          },
          {
            "exercise": "Use `datetime.utcnow()` for timezone-neutral time",
            "answer": "from datetime import datetime\n\nutc_now = datetime.utcnow()\nprint(utc_now)"
          }
        ]
      },
      {
        "skill": "Skill 2: Working with `timedelta`",
        "exercises": [
          {
            "exercise": "Create a `timedelta` (e.g. `timedelta(days=5)`)",
            "answer": "from datetime import timedelta\n\ndelta = timedelta(days=5)\nprint(delta)"
          },
          {
            "exercise": "Add and subtract `timedelta` to/from `datetime`",
            "answer": "from datetime import datetime, timedelta\n\nnow = datetime.now()\nfuture = now + timedelta(days=7)\nprint(future)"
          },
          {
            "exercise": "Calculate difference between two datetimes",
            "answer": "from datetime import datetime\n\ndt1 = datetime(2024, 1, 1)\ndt2 = datetime(2024, 1, 10)\ndiff = dt2 - dt1\nprint(diff.days)  # 9"
          },
          {
            "exercise": "Convert timedelta to seconds/days",
            "answer": "from datetime import timedelta\n\ndelta = timedelta(days=5, hours=3)\nprint(delta.total_seconds())"
          },
          {
            "exercise": "Use negative `timedelta` for reverse time shift",
            "answer": "from datetime import datetime, timedelta\n\nnow = datetime.now()\npast = now - timedelta(days=30)\nprint(past)"
          }
        ]
      },
      {
        "skill": "Skill 3: Skillatting Dates and Times",
        "exercises": [
          {
            "exercise": "Skillat datetime with `.strftime()`",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nformatted = dt.strftime('%Y-%m-%d')\nprint(formatted)  # '2024-01-15'"
          },
          {
            "exercise": "Use Skillat codes like `%Y-%m-%d`, `%H:%M:%S`",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nformatted = dt.strftime('%Y-%m-%d %H:%M:%S')\nprint(formatted)"
          },
          {
            "exercise": "Combine literals and codes in Skillat strings",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nformatted = dt.strftime('Date: %Y-%m-%d, Time: %H:%M')\nprint(formatted)"
          },
          {
            "exercise": "Skillat date-only or time-only",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\ndate_only = dt.strftime('%Y-%m-%d')\nprint(date_only)"
          },
          {
            "exercise": "Create custom timestamp strings",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\ntimestamp_str = dt.strftime('%Y%m%d_%H%M%S')\nprint(timestamp_str)"
          }
        ]
      },
      {
        "skill": "Skill 4: Parsing Strings into Datetime",
        "exercises": [
          {
            "exercise": "Use `datetime.strptime()` to parse string",
            "answer": "from datetime import datetime\n\ndt = datetime.strptime('2024-01-15', '%Y-%m-%d')\nprint(dt)"
          },
          {
            "exercise": "Match Skillat string to input Skillat",
            "answer": "from datetime import datetime\n\ndate_string = '2024-01-15 14:30:00'\ndt = datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\nprint(dt)"
          },
          {
            "exercise": "Handle invalid Skillats with try/except",
            "answer": "from datetime import datetime\n\ntry:\n    dt = datetime.strptime('invalid', '%Y-%m-%d')\nexcept ValueError:\n    print('Invalid date format')"
          },
          {
            "exercise": "Parse date-only or time-only",
            "answer": "from datetime import datetime\n\ndate_str = '2024-01-15'\ndt = datetime.strptime(date_str, '%Y-%m-%d')\nprint(dt.date())"
          },
          {
            "exercise": "Parse strings from APIs or user input",
            "answer": "from datetime import datetime\n\napi_date = '2024-01-15T14:30:00'\ndt = datetime.strptime(api_date, '%Y-%m-%dT%H:%M:%S')\nprint(dt)"
          }
        ]
      },
      {
        "skill": "Skill 5: Datetime Arithmetic",
        "exercises": [
          {
            "exercise": "Compare two datetimes with `<`, `==`, `>`",
            "answer": "from datetime import datetime\n\ndt1 = datetime(2024, 1, 15)\ndt2 = datetime(2024, 1, 20)\nprint(dt1 < dt2)  # True"
          },
          {
            "exercise": "Find days between two dates",
            "answer": "from datetime import datetime\n\ndt1 = datetime(2024, 1, 1)\ndt2 = datetime(2024, 1, 10)\ndiff = (dt2 - dt1).days\nprint(diff)  # 9 days"
          },
          {
            "exercise": "Add days/hours/minutes to datetime",
            "answer": "from datetime import datetime, timedelta\n\ndt = datetime.now()\nfuture = dt + timedelta(days=7, hours=3)\nprint(future)"
          },
          {
            "exercise": "Round/truncate datetimes (e.g., floor to hour)",
            "answer": "from datetime import datetime\n\ndt = datetime(2024, 1, 15, 14, 30, 45)\nrounded = dt.replace(minute=0, second=0, microsecond=0)\nprint(rounded)  # Hour precision"
          },
          {
            "exercise": "Use arithmetic for scheduling or countdowns",
            "answer": "from datetime import datetime, timedelta\n\nmeeting = datetime(2024, 1, 20, 10, 0)\nnow = datetime.now()\ntime_until = meeting - now\nprint(f'Days until meeting: {time_until.days}')"
          }
        ]
      },
      {
        "skill": "Skill 6: Sleep and Delays",
        "exercises": [
          {
            "exercise": "Pause with `time.sleep(seconds)`",
            "answer": "import time\n\ntime.sleep(2)  # Pause for 2 seconds\nprint('Done')"
          },
          {
            "exercise": "Use `sleep()` in loops to throttle execution",
            "answer": "import time\n\nfor i in range(5):\n    print(i)\n    time.sleep(1)  # Throttle loop"
          },
          {
            "exercise": "Measure delay duration with `time.time()`",
            "answer": "import time\n\nstart = time.time()\ntime.sleep(0.5)\nend = time.time()\nprint(f'Slept for {end - start:.2f} seconds')"
          },
          {
            "exercise": "Add artificial delay for testing",
            "answer": "import time\n\nprint('Processing...')\ntime.sleep(2)  # Simulate delay\nprint('Complete')"
          },
          {
            "exercise": "Use `sleep()` for polling/checking intervals",
            "answer": "import time\n\nwhile True:\n    check_status()\n    time.sleep(5)  # Poll every 5 seconds"
          }
        ]
      },
      {
        "skill": "Skill 7: Epoch and Timestamp Conversion",
        "exercises": [
          {
            "exercise": "Convert timestamp to `datetime.fromtimestamp()`",
            "answer": "from datetime import datetime\n\ntimestamp = 1609459200\ndt = datetime.fromtimestamp(timestamp)\nprint(dt)"
          },
          {
            "exercise": "Convert datetime to timestamp with `.timestamp()`",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\ntimestamp = dt.timestamp()\nprint(timestamp)"
          },
          {
            "exercise": "Convert between timezones with external libs (preview)",
            "answer": "from datetime import datetime\nimport pytz\n\n# Convert with timezone (needs pytz)\ntimestamp = 1609459200\ndt = datetime.fromtimestamp(timestamp, tz=pytz.UTC)\nprint(dt)"
          },
          {
            "exercise": "Handle platSkill differences in epoch behavior",
            "answer": "from datetime import datetime\n\ntimestamp = 1609459200\ndt = datetime.fromtimestamp(timestamp)\nprint(dt.year, dt.month, dt.day)"
          },
          {
            "exercise": "Validate timestamps for range or bounds",
            "answer": "from datetime import datetime\n\ntimestamp = 1609459200\nif 0 < timestamp < 2**31:\n    dt = datetime.fromtimestamp(timestamp)\n    print(dt)"
          }
        ]
      },
      {
        "skill": "Skill 8: Date Components",
        "exercises": [
          {
            "exercise": "Access `year`, `month`, `day`, `hour`, etc.",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nprint(dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second)"
          },
          {
            "exercise": "Skillat using f-strings: `f\"{dt.year}-{dt.month}\"`",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nprint(f'{dt.year}-{dt.month:02d}-{dt.day:02d}')"
          },
          {
            "exercise": "Combine extracted parts into new strings",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\ndate_str = f'{dt.year}/{dt.month}/{dt.day}'\nprint(date_str)"
          },
          {
            "exercise": "Check if a date falls on a weekend",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nif dt.weekday() >= 5:  # 5=Sat, 6=Sun\n    print('Weekend')"
          },
          {
            "exercise": "Use `.weekday()` or `.isoweekday()`",
            "answer": "from datetime import datetime\n\ndt = datetime.now()\nprint(dt.weekday())  # 0=Mon, 6=Sun\nprint(dt.isoweekday())  # 1=Mon, 7=Sun"
          }
        ]
      },
      {
        "skill": "Skill 9: Working with Dates (without Time)",
        "exercises": [
          {
            "exercise": "Create `datetime.date()` object",
            "answer": "from datetime import date\n\nd = date(2024, 1, 15)\nprint(d)"
          },
          {
            "exercise": "Use `.today()` to get current date",
            "answer": "from datetime import date\n\ntoday = date.today()\nprint(today)"
          },
          {
            "exercise": "Do arithmetic with `date` and `timedelta`",
            "answer": "from datetime import date, timedelta\n\ntoday = date.today()\nfuture = today + timedelta(days=7)\nprint(future)"
          },
          {
            "exercise": "Compare dates without worrying about time",
            "answer": "from datetime import date\n\nd1 = date(2024, 1, 1)\nd2 = date(2024, 1, 10)\nprint(d1 < d2)  # True"
          },
          {
            "exercise": "Skillat and parse pure dates",
            "answer": "from datetime import date\n\nd = date.today()\nformatted = d.strftime('%Y-%m-%d')\nprint(formatted)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices for Time Handling",
        "exercises": [
          {
            "exercise": "Always document expected Skillat",
            "answer": "# Document expected format\ndef parse_date(date_str: str) -> datetime:\n    \"\"\"Parse date in YYYY-MM-DD format.\"\"\"\n    return datetime.strptime(date_str, '%Y-%m-%d')"
          },
          {
            "exercise": "Avoid manual string slicing for dates",
            "answer": "# Don't manually parse dates\n# Bad: date_str[0:4], date_str[5:7]\n# Good:\nfrom datetime import datetime\ndt = datetime.strptime(date_str, '%Y-%m-%d')"
          },
          {
            "exercise": "Prefer UTC or ISO Skillats for APIs",
            "answer": "from datetime import datetime\n\n# Use ISO format for APIs\ndt = datetime.now()\niso_str = dt.isoformat()\nprint(iso_str)  # '2024-01-15T14:30:00'"
          },
          {
            "exercise": "Handle time zones explicitly when needed",
            "answer": "# Handle timezones explicitly\nimport pytz\nfrom datetime import datetime\n\nutc = pytz.UTC\ndt = datetime.now(utc)\nprint(dt)"
          },
          {
            "exercise": "Validate and sanitize user-provided time data",
            "answer": "from datetime import datetime\n\ndef parse_user_date(date_str):\n    try:\n        return datetime.strptime(date_str, '%Y-%m-%d')\n    except ValueError:\n        return None  # or raise custom error"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 18: Regular Expressions (`re` module)",
    "skills": [
      {
        "skill": "Skill 1: Basic Matching",
        "exercises": [
          {
            "exercise": "Import `re` and use `re.search()`",
            "answer": "import re\n\npattern = r'\\d+'\ntext = 'abc 123 def'\nmatch = re.search(pattern, text)\nif match:\n    print(match.group())  # '123'"
          },
          {
            "exercise": "Use `re.match()` vs `re.search()`",
            "answer": "import re\n\n# match() checks from start, search() anywhere\ntext = 'hello world'\nprint(re.match(r'hello', text))  # Match\nprint(re.match(r'world', text))  # None\nprint(re.search(r'world', text))  # Match"
          },
          {
            "exercise": "Use `re.fullmatch()` for complete string match",
            "answer": "import re\n\ntext = 'hello'\nif re.fullmatch(r'hello', text):\n    print('Exact match')"
          },
          {
            "exercise": "Use `bool(re.search(...))` to test a match",
            "answer": "import re\n\npattern = r'\\d+'\ntext = 'abc 123 def'\nif re.search(pattern, text):\n    print('Found digits')"
          },
          {
            "exercise": "Retrieve match object with `.group()`",
            "answer": "import re\n\nmatch = re.search(r'(\\d+)', 'abc 123 def')\nif match:\n    print(match.group())  # '123'\n    print(match.group(1))  # '123' (first group)"
          }
        ]
      },
      {
        "skill": "Skill 2: Common Patterns",
        "exercises": [
          {
            "exercise": "Match digits with `\\d`",
            "answer": "import re\n\ntext = 'abc 123 def'\ndigits = re.findall(r'\\d', text)\nprint(digits)  # ['1', '2', '3']"
          },
          {
            "exercise": "Match word characters with `\\w`",
            "answer": "import re\n\ntext = 'hello world'\nwords = re.findall(r'\\w+', text)\nprint(words)  # ['hello', 'world']"
          },
          {
            "exercise": "Match whitespace with `\\s`",
            "answer": "import re\n\ntext = 'hello   world'\nspaces = re.findall(r'\\s+', text)\nprint(spaces)  # ['   ']"
          },
          {
            "exercise": "Match any character with `.`",
            "answer": "import re\n\ntext = 'a.b.c'\nparts = re.findall(r'.', text)\nprint(parts)  # ['a', '.', 'b', '.', 'c']"
          },
          {
            "exercise": "Escape special characters with `\\`",
            "answer": "import re\n\n# Escape special chars\ntext = '2.5'\nmatch = re.search(r'2\\.5', text)\nprint(match.group())  # '2.5'"
          }
        ]
      },
      {
        "skill": "Skill 3: Character Sets and Ranges",
        "exercises": [
          {
            "exercise": "Match characters from a set: `[aeiou]`",
            "answer": "import re\n\ntext = 'hello'\nvowels = re.findall(r'[aeiou]', text)\nprint(vowels)  # ['e', 'o']"
          },
          {
            "exercise": "Match digits `[0-9]` or letters `[a-zA-Z]`",
            "answer": "import re\n\ntext = 'abc123'\nchars = re.findall(r'[a-z0-9]', text)\nprint(chars)  # ['a', 'b', 'c', '1', '2', '3']"
          },
          {
            "exercise": "Negate a set with `[^...]`",
            "answer": "import re\n\ntext = 'hello123'\nno_digits = re.findall(r'[^0-9]', text)\nprint(no_digits)  # ['h', 'e', 'l', 'l', 'o']"
          },
          {
            "exercise": "Use shorthand with predefined classes",
            "answer": "import re\n\ntext = 'test123'\npattern = r'[a-zA-Z]+'\nletters = re.findall(pattern, text)\nprint(letters)  # ['test']"
          },
          {
            "exercise": "Combine multiple sets in pattern",
            "answer": "import re\n\ntext = 'a1b2c3'\nmatches = re.findall(r'[a-z][0-9]', text)\nprint(matches)  # ['a1', 'b2', 'c3']"
          }
        ]
      },
      {
        "skill": "Skill 4: Quantifiers and Repeats",
        "exercises": [
          {
            "exercise": "Match zero or more: `*`",
            "answer": "import re\n\ntext = 'aaabbb'\nmatches = re.findall(r'a*', text)\nprint(matches)  # Matches zero or more 'a'"
          },
          {
            "exercise": "Match one or more: `+`",
            "answer": "import re\n\ntext = 'aaabbb'\nmatches = re.findall(r'a+', text)\nprint(matches)  # ['aaa'] (one or more)"
          },
          {
            "exercise": "Match zero or one: `?`",
            "answer": "import re\n\ntext = 'color colour'\nmatches = re.findall(r'colou?r', text)\nprint(matches)  # ['color', 'colour']"
          },
          {
            "exercise": "Match exact or range: `{3}`, `{2,4}`",
            "answer": "import re\n\ntext = '123 1234 12345'\nmatches = re.findall(r'\\d{3}', text)\nprint(matches)  # ['123', '123', '123']\n# Or range:\nmatches = re.findall(r'\\d{3,4}', text)\nprint(matches)  # ['123', '1234', '1234']"
          },
          {
            "exercise": "Combine quantifiers with groups",
            "answer": "import re\n\ntext = 'abc 123'\nmatches = re.findall(r'(\\w+) (\\d+)', text)\nprint(matches)  # [('abc', '123')]"
          }
        ]
      },
      {
        "skill": "Skill 5: Anchors and Boundaries",
        "exercises": [
          {
            "exercise": "Match start of string with `^`",
            "answer": "import re\n\ntext = 'hello world'\nif re.search(r'^hello', text):\n    print('Starts with hello')"
          },
          {
            "exercise": "Match end of string with `$`",
            "answer": "import re\n\ntext = 'hello world'\nif re.search(r'world$', text):\n    print('Ends with world')"
          },
          {
            "exercise": "Use `\\b` for word boundaries",
            "answer": "import re\n\ntext = 'the cat sat'\nmatches = re.findall(r'\\bcat\\b', text)\nprint(matches)  # ['cat'] (word boundary)"
          },
          {
            "exercise": "Use `\\B` for non-boundaries",
            "answer": "import re\n\ntext = 'the cat sat'\nmatches = re.findall(r'\\Bcat\\B', text)\nprint(matches)  # [] (non-boundary)"
          },
          {
            "exercise": "Match start/end of lines with `re.MULTILINE`",
            "answer": "import re\n\ntext = 'line1\\nline2\\nline3'\nmatches = re.findall(r'^line', text, re.MULTILINE)\nprint(matches)  # ['line', 'line', 'line']"
          }
        ]
      },
      {
        "skill": "Skill 6: Grouping and Capturing",
        "exercises": [
          {
            "exercise": "Use parentheses `()` to capture groups",
            "answer": "import re\n\nmatch = re.search(r'(\\d+)-(\\d+)', '123-456')\nif match:\n    print(match.group(1))  # '123'\n    print(match.group(2))  # '456'"
          },
          {
            "exercise": "Access matched groups with `.group(n)`",
            "answer": "import re\n\nmatch = re.search(r'(\\d+)-(\\d+)', '123-456')\nif match:\n    print(match.group(1))  # First group\n    print(match.group(2))  # Second group"
          },
          {
            "exercise": "Use named groups `(?P<name>...)`",
            "answer": "import re\n\nmatch = re.search(r'(?P<area>\\d{3})-(?P<number>\\d{4})', '123-4567')\nif match:\n    print(match.group('area'))  # '123'\n    print(match.group('number'))  # '4567'"
          },
          {
            "exercise": "Use non-capturing groups `(?:...)`",
            "answer": "import re\n\n# Non-capturing group\nmatches = re.findall(r'(?:\\d+)-\\w+', '123-abc 456-def')\nprint(matches)  # ['123-abc', '456-def']"
          },
          {
            "exercise": "Use nested groups and access by index",
            "answer": "import re\n\nmatch = re.search(r'((\\d+)-(\\d+))', '123-456')\nif match:\n    print(match.group(0))  # '123-456'\n    print(match.group(1))  # '123-456'\n    print(match.group(2))  # '123'"
          }
        ]
      },
      {
        "skill": "Skill 7: Searching and Finding",
        "exercises": [
          {
            "exercise": "Use `re.findall()` to get all matches",
            "answer": "import re\n\ntext = 'abc 123 def 456'\nmatches = re.findall(r'\\d+', text)\nprint(matches)  # ['123', '456']"
          },
          {
            "exercise": "Use `re.finditer()` to iterate matches",
            "answer": "import re\n\ntext = 'abc 123 def 456'\nfor match in re.finditer(r'\\d+', text):\n    print(match.group(), match.start(), match.end())"
          },
          {
            "exercise": "Use `.groups()` with `finditer()`",
            "answer": "import re\n\ntext = 'abc 123 def 456'\nfor match in re.finditer(r'(\\w+) (\\d+)', text):\n    print(match.groups())  # ('abc', '123'), ('def', '456')"
          },
          {
            "exercise": "Use `re.sub()` to replace patterns",
            "answer": "import re\n\ntext = 'hello world'\nresult = re.sub(r'world', 'Python', text)\nprint(result)  # 'hello Python'"
          },
          {
            "exercise": "Use `re.split()` to tokenize text",
            "answer": "import re\n\ntext = 'one,two,three'\nparts = re.split(r',', text)\nprint(parts)  # ['one', 'two', 'three']"
          }
        ]
      },
      {
        "skill": "Skill 8: Flags and Modes",
        "exercises": [
          {
            "exercise": "Use `re.IGNORECASE` for case-insensitive",
            "answer": "import re\n\ntext = 'Hello World'\nmatches = re.findall(r'hello', text, re.IGNORECASE)\nprint(matches)  # ['Hello']"
          },
          {
            "exercise": "Use `re.MULTILINE` for multi-line anchors",
            "answer": "import re\n\ntext = 'line1\\nline2'\nmatches = re.findall(r'^line', text, re.MULTILINE)\nprint(matches)  # ['line', 'line']"
          },
          {
            "exercise": "Use `re.DOTALL` to include newlines in `.`",
            "answer": "import re\n\ntext = 'hello\\nworld'\nmatch = re.search(r'hello.world', text, re.DOTALL)\nprint(match.group() if match else None)"
          },
          {
            "exercise": "Combine multiple flags (`re.I | re.S`)",
            "answer": "import re\n\ntext = 'Hello'\nmatches = re.findall(r'hello', text, re.I | re.M)\nprint(matches)  # ['Hello']"
          },
          {
            "exercise": "Use inline flags like `(?i)` in pattern",
            "answer": "import re\n\npattern = r'(?i)hello'  # Inline flag\nmatches = re.findall(pattern, 'Hello HELLO')\nprint(matches)  # ['Hello', 'HELLO']"
          }
        ]
      },
      {
        "skill": "Skill 9: Advanced Patterns",
        "exercises": [
          {
            "exercise": "Use lookahead `(?=...)` and negative lookahead `(?!...)`",
            "answer": "import re\n\n# Lookahead: match 'test' only if followed by '123'\ntext = 'test123 test456'\nmatches = re.findall(r'test(?=123)', text)\nprint(matches)  # ['test']"
          },
          {
            "exercise": "Use lookbehind `(?<=...)` and negative lookbehind `(?<!...)`",
            "answer": "import re\n\n# Negative lookahead\ntext = 'test123 test456'\nmatches = re.findall(r'test(?!123)', text)\nprint(matches)  # ['test'] (from test456)"
          },
          {
            "exercise": "Use conditional matching `(?(1)yes|no)`",
            "answer": "import re\n\n# Lookbehind: match digits preceded by 'test'\ntext = 'test123 abc456'\nmatches = re.findall(r'(?<=test)\\d+', text)\nprint(matches)  # ['123']"
          },
          {
            "exercise": "Match repeated groups with backreferences",
            "answer": "import re\n\n# Backreference: match repeated words\ntext = 'hello hello world'\nmatches = re.findall(r'(\\w+) \\1', text)\nprint(matches)  # ['hello']"
          },
          {
            "exercise": "Use verbose mode with `re.VERBOSE`",
            "answer": "import re\n\n# Verbose mode for readable patterns\npattern = r'''\n    \\d{3}  # Area code\n    -      # Separator\n    \\d{4}  # Number\n'''\nmatches = re.findall(pattern, '123-4567', re.VERBOSE)\nprint(matches)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Test patterns before using in production",
            "answer": "import re\n\n# Test patterns before using\npattern = r'\\d{3}-\\d{4}'\ntest_cases = ['123-4567', '12-34', 'abc-defg']\nfor test in test_cases:\n    print(f'{test}: {bool(re.match(pattern, test))}')"
          },
          {
            "exercise": "Use raw strings `r\"\"` for regex patterns",
            "answer": "import re\n\n# Use raw strings\npattern = r'\\d+'  # Good\n# pattern = '\\\\d+'  # Bad (must escape backslash)"
          },
          {
            "exercise": "Comment and Skillat long patterns with `re.VERBOSE`",
            "answer": "import re\n\n# Comment complex patterns\npattern = r'''\n    ^           # Start of string\n    \\d{3}       # Three digits\n    -           # Hyphen\n    \\d{4}       # Four digits\n    $           # End of string\n'''\nmatch = re.match(pattern, '123-4567', re.VERBOSE)"
          },
          {
            "exercise": "Use anchors to avoid partial matches",
            "answer": "import re\n\n# Use anchors to avoid partial matches\npattern = r'^\\d{3}-\\d{4}$'  # Exact match only\ntext = '123-4567'\nprint(bool(re.match(pattern, text)))"
          },
          {
            "exercise": "Handle `None` safely when no match is found",
            "answer": "import re\n\nmatch = re.search(r'(\\d+)', 'abc')\nif match:\n    print(match.group(1))\nelse:\n    print('No match')  # Handle None safely"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 19: JSON, YAML, and Serialization",
    "skills": [
      {
        "skill": "Skill 1: Working with JSON",
        "exercises": [
          {
            "exercise": "Import the `json` module",
            "answer": "import json"
          },
          {
            "exercise": "Convert Python object to JSON with `json.dumps()`",
            "answer": "import json\n\ndata = {'name': 'Alice', 'age': 30}\njson_str = json.dumps(data)\nprint(json_str)  # '{\"name\": \"Alice\", \"age\": 30}'"
          },
          {
            "exercise": "Convert JSON string to Python object with `json.loads()`",
            "answer": "import json\n\njson_str = '{\"name\": \"Alice\", \"age\": 30}'\ndata = json.loads(json_str)\nprint(data)  # {'name': 'Alice', 'age': 30}"
          },
          {
            "exercise": "Use `json.dump()` to write JSON to a file",
            "answer": "import json\n\ndata = {'name': 'Alice'}\nwith open('data.json', 'w') as f:\n    json.dump(data, f)"
          },
          {
            "exercise": "Use `json.load()` to read JSON from a file",
            "answer": "import json\n\nwith open('data.json', 'r') as f:\n    data = json.load(f)\nprint(data)"
          }
        ]
      },
      {
        "skill": "Skill 2: Customizing JSON Behavior",
        "exercises": [
          {
            "exercise": "Pretty-print JSON with `indent=`",
            "answer": "import json\n\ndata = {'name': 'Alice', 'age': 30}\njson_str = json.dumps(data, indent=2)\nprint(json_str)"
          },
          {
            "exercise": "Sort keys with `sort_keys=True`",
            "answer": "import json\n\ndata = {'c': 3, 'a': 1, 'b': 2}\njson_str = json.dumps(data, sort_keys=True)\nprint(json_str)"
          },
          {
            "exercise": "Customize serialization with `default=`",
            "answer": "import json\nfrom datetime import datetime\n\ndef default_handler(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    raise TypeError(f'Object of type {type(obj)} is not JSON serializable')\n\ndata = {'time': datetime.now()}\njson_str = json.dumps(data, default=default_handler)"
          },
          {
            "exercise": "Convert non-serializable objects (e.g. datetime)",
            "answer": "import json\nfrom datetime import datetime\n\ndef json_serial(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    raise TypeError\n\ndata = {'time': datetime.now()}\njson_str = json.dumps(data, default=json_serial)"
          },
          {
            "exercise": "Handle errors with `try/except` during parsing",
            "answer": "import json\n\ntry:\n    data = json.loads('{invalid json}')\nexcept json.JSONDecodeError as e:\n    print(f'JSON error: {e}')"
          }
        ]
      },
      {
        "skill": "Skill 3: Understanding JSON Types",
        "exercises": [
          {
            "exercise": "Map JSON null to Python `None`",
            "answer": "import json\n\njson_str = '{\"value\": null}'\ndata = json.loads(json_str)\nprint(data['value'])  # None"
          },
          {
            "exercise": "Understand that JSON only supports text keys",
            "answer": "import json\n\n# JSON only supports string keys\ndata = {1: 'one', 'two': 2}\njson_str = json.dumps(data)\nprint(json_str)  # {\"1\": \"one\", \"two\": 2}"
          },
          {
            "exercise": "Convert nested JSON structures",
            "answer": "import json\n\njson_str = '{\"user\": {\"name\": \"Alice\", \"age\": 30}}'\ndata = json.loads(json_str)\nprint(data['user']['name'])"
          },
          {
            "exercise": "Validate expected data types after parsing",
            "answer": "import json\n\ndata = json.loads('[1, 2, 3]')\nif isinstance(data, list):\n    print('Valid list')"
          },
          {
            "exercise": "Normalize data after reading JSON",
            "answer": "import json\n\njson_str = '{\"age\": \"30\"}'\ndata = json.loads(json_str)\nage = int(data['age'])  # Convert to int\nprint(age)"
          }
        ]
      },
      {
        "skill": "Skill 4: YAML Basics (using `pyyaml`)",
        "exercises": [
          {
            "exercise": "Install and import `yaml` (`pip install pyyaml`)",
            "answer": "import yaml\n\nyaml_str = 'name: Alice\\nage: 30'\ndata = yaml.safe_load(yaml_str)\nprint(data)"
          },
          {
            "exercise": "Load YAML string with `yaml.safe_load()`",
            "answer": "import yaml\n\ndata = {'name': 'Alice', 'age': 30}\nyaml_str = yaml.dump(data)\nprint(yaml_str)"
          },
          {
            "exercise": "Dump Python object to YAML with `yaml.dump()`",
            "answer": "import yaml\n\nwith open('config.yaml', 'r') as f:\n    data = yaml.safe_load(f)\nprint(data)"
          },
          {
            "exercise": "Read YAML from a file",
            "answer": "# JSON is valid YAML\nimport yaml\n\njson_str = '{\"name\": \"Alice\"}'\ndata = yaml.safe_load(json_str)\nprint(data)"
          },
          {
            "exercise": "Compare YAML and JSON in structure",
            "answer": "import yaml\nimport json\n\nyaml_str = 'name: Alice\\nage: 30'\ndata = yaml.safe_load(yaml_str)\njson_str = json.dumps(data)\nprint(json_str)"
          }
        ]
      },
      {
        "skill": "Skill 5: YAML Structures",
        "exercises": [
          {
            "exercise": "Represent lists and dictionaries",
            "answer": "import yaml\n\nyaml_str = '''\nusers:\n  - Alice\n  - Bob\ndata:\n  key: value\n'''\ndata = yaml.safe_load(yaml_str)\nprint(data)"
          },
          {
            "exercise": "Use anchors (`&`) and aliases (`*`)",
            "answer": "import yaml\n\nyaml_str = '''\ndefaults: &defaults\n  timeout: 30\n  retry: 3\n\ndev:\n  <<: *defaults\n  host: dev.example.com\n'''\ndata = yaml.safe_load(yaml_str)"
          },
          {
            "exercise": "Use inline YAML vs block YAML",
            "answer": "import yaml\n\n# Inline YAML\nyaml_str = '{name: Alice, age: 30}'\ndata = yaml.safe_load(yaml_str)\nprint(data)"
          },
          {
            "exercise": "Parse nested YAML into dicts/lists",
            "answer": "import yaml\n\nyaml_str = '''\nconfig:\n  database:\n    host: localhost\n    port: 5432\n'''\ndata = yaml.safe_load(yaml_str)\nprint(data['config']['database']['host'])"
          },
          {
            "exercise": "Handle multi-document YAML (``)",
            "answer": "import yaml\n\n# Multiple documents\nyaml_str = '''---\ndoc: 1\n---\ndoc: 2\n'''\nfor doc in yaml.safe_load_all(yaml_str):\n    print(doc)"
          }
        ]
      },
      {
        "skill": "Skill 6: Error Handling with JSON/YAML",
        "exercises": [
          {
            "exercise": "Catch `json.JSONDecodeError`",
            "answer": "import json\n\ntry:\n    data = json.loads('{invalid}')\nexcept json.JSONDecodeError:\n    print('Invalid JSON')"
          },
          {
            "exercise": "Catch `yaml.YAMLError`",
            "answer": "import yaml\n\ntry:\n    data = yaml.safe_load('invalid: [yaml')\nexcept yaml.YAMLError:\n    print('Invalid YAML')"
          },
          {
            "exercise": "Use default values when loading invalid config",
            "answer": "import json\n\ntry:\n    data = json.load(open('config.json'))\nexcept FileNotFoundError:\n    data = {'default': 'config'}"
          },
          {
            "exercise": "Validate data structure after loading",
            "answer": "import json\n\ndata = json.loads('{\"items\": [1, 2, 3]}')\nif isinstance(data, dict) and 'items' in data:\n    print('Valid structure')"
          },
          {
            "exercise": "Log bad files and continue safely",
            "answer": "import yaml\nimport logging\n\ntry:\n    with open('config.yaml') as f:\n        data = yaml.safe_load(f)\nexcept yaml.YAMLError as e:\n    logging.error(f'YAML error: {e}')\n    data = {}"
          }
        ]
      },
      {
        "skill": "Skill 7: Custom Serializers",
        "exercises": [
          {
            "exercise": "Define a class with a `to_dict()` method",
            "answer": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def to_dict(self):\n        return {'name': self.name, 'age': self.age}\n\nimport json\np = Person('Alice', 30)\njson.dumps(p.to_dict())"
          },
          {
            "exercise": "Serialize custom objects with `default=` in `json.dumps()`",
            "answer": "import json\nfrom datetime import datetime\n\ndef serialize_datetime(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    raise TypeError\n\ndata = {'time': datetime.now()}\njson.dumps(data, default=serialize_datetime)"
          },
          {
            "exercise": "Reconstruct object from dict after parsing",
            "answer": "import json\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\ndef person_from_dict(d):\n    return Person(d['name'])\n\njson_str = '{\"name\": \"Alice\"}'\ndata = json.loads(json_str)\nperson = person_from_dict(data)"
          },
          {
            "exercise": "Use `dataclasses.asdict()` for serialization",
            "answer": "from dataclasses import dataclass, asdict\nimport json\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person('Alice', 30)\njson.dumps(asdict(p))"
          },
          {
            "exercise": "Register serialization logic for complex types",
            "answer": "import json\nfrom datetime import datetime\n\nclass DateTimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n\ndata = {'time': datetime.now()}\njson.dumps(data, cls=DateTimeEncoder)"
          }
        ]
      },
      {
        "skill": "Skill 8: Use Cases and Patterns",
        "exercises": [
          {
            "exercise": "Save app settings to JSON/YAML",
            "answer": "import json\n\nconfig = {'debug': False, 'db_host': 'localhost'}\nwith open('config.json', 'w') as f:\n    json.dump(config, f)"
          },
          {
            "exercise": "Load configuration files at runtime",
            "answer": "import json\n\nwith open('config.json', 'r') as f:\n    config = json.load(f)\n\nif config.get('debug'):\n    print('Debug mode')"
          },
          {
            "exercise": "Store experiment metadata or results",
            "answer": "import json\n\nresults = {'accuracy': 0.95, 'loss': 0.05}\nwith open('results.json', 'w') as f:\n    json.dump(results, f, indent=2)"
          },
          {
            "exercise": "Transmit structured data over APIs",
            "answer": "import json\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()  # Parse JSON response\nprint(data)"
          },
          {
            "exercise": "Use serialization to cache expensive results",
            "answer": "import json\n\ndef compute_expensive():\n    return [1, 2, 3, 4, 5]\n\n# Cache results\nresults = compute_expensive()\nwith open('cache.json', 'w') as f:\n    json.dump(results, f)"
          }
        ]
      },
      {
        "skill": "Skill 9: Binary Serialization (Preview)",
        "exercises": [
          {
            "exercise": "Serialize with `pickle` (with caution)",
            "answer": "import pickle\n\ndata = [1, 2, 3]\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(data, f)"
          },
          {
            "exercise": "Save and load binary objects with `pickle.dump()` / `load()`",
            "answer": "import pickle\n\nwith open('data.pkl', 'rb') as f:\n    data = pickle.load(f)\nprint(data)"
          },
          {
            "exercise": "Understand security risks of `pickle`",
            "answer": "# WARNING: pickle can execute arbitrary code\n# Only use with trusted sources\nimport pickle\n\n# Safe:\ndata = pickle.loads(trusted_bytes)\n# Unsafe:\n# data = pickle.loads(untrusted_bytes)"
          },
          {
            "exercise": "Consider alternatives like `dill` or `joblib`",
            "answer": "# Alternatives to pickle\n# import dill  # More flexible\n# import joblib  # Better for numpy/sklearn\nimport joblib\n\ndata = [1, 2, 3]\njoblib.dump(data, 'data.pkl')\nloaded = joblib.load('data.pkl')"
          },
          {
            "exercise": "Use only trusted sources when deserializing",
            "answer": "import pickle\n\n# Only load from trusted sources\ntry:\n    with open('trusted.pkl', 'rb') as f:\n        data = pickle.load(f)\nexcept pickle.UnpicklingError:\n    print('Corrupted pickle file')"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Prefer JSON for interoperability",
            "answer": "import json\n\n# JSON is widely supported and human-readable\ndata = {'key': 'value'}\njson_str = json.dumps(data)\n# Preferred over pickle for simple data"
          },
          {
            "exercise": "Use `safe_load()` in YAML to avoid code execution",
            "answer": "import yaml\n\n# Use safe_load to prevent code execution\nwith open('config.yaml') as f:\n    data = yaml.safe_load(f)  # Safe\n    # data = yaml.load(f)  # Unsafe - don't use"
          },
          {
            "exercise": "Validate file structure after parsing",
            "answer": "import json\n\ndata = json.loads(json_str)\n\n# Validate structure\nif not isinstance(data, dict):\n    raise ValueError('Expected dictionary')\nif 'required_key' not in data:\n    raise ValueError('Missing required key')"
          },
          {
            "exercise": "Avoid re-serializing entire files needlessly",
            "answer": "import json\n\n# Don't re-serialize unnecessarily\ndata = load_data()\n# Use data in memory\nprocess(data)\n# Only save when needed\nwith open('output.json', 'w') as f:\n    json.dump(data, f)"
          },
          {
            "exercise": "Separate schema validation from raw loading",
            "answer": "import json\nfrom jsonschema import validate, ValidationError\n\nschema = {\n    'type': 'object',\n    'properties': {\n        'name': {'type': 'string'},\n        'age': {'type': 'number'}\n    },\n    'required': ['name']\n}\n\ntry:\n    validate(data, schema)\nexcept ValidationError:\n    print('Invalid data')"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 20: File I/O and OS Utilities",
    "skills": [
      {
        "skill": "Skill 1: Reading Files",
        "exercises": [
          {
            "exercise": "Open a file with `open('filename.txt')`",
            "answer": "with open('file.txt', 'r') as f:\n    content = f.read()\nprint(content)"
          },
          {
            "exercise": "Read entire content with `.read()`",
            "answer": "with open('file.txt', 'r') as f:\n    content = f.read()\nprint(content)"
          },
          {
            "exercise": "Read line by line with `.readlines()` or loop",
            "answer": "with open('file.txt', 'r') as f:\n    lines = f.readlines()\n# Or iterate:\nwith open('file.txt', 'r') as f:\n    for line in f:\n        print(line.strip())"
          },
          {
            "exercise": "Use `.strip()` to clean line endings",
            "answer": "with open('file.txt', 'r') as f:\n    for line in f:\n        clean_line = line.strip()\n        print(clean_line)"
          },
          {
            "exercise": "Use `with open(...) as f:` to ensure closure",
            "answer": "with open('file.txt', 'r') as f:\n    for line in f:\n        # Process line by line\n        process(line)"
          }
        ]
      },
      {
        "skill": "Skill 2: Writing Files",
        "exercises": [
          {
            "exercise": "Write text to a file with `write()`",
            "answer": "with open('output.txt', 'w') as f:\n    f.write('Hello, World!')"
          },
          {
            "exercise": "Open file in write `'w'` or append `'a'` mode",
            "answer": "with open('output.txt', 'w') as f:\n    f.write('Line 1\\n')\n# 'w' overwrites, 'a' appends\nwith open('output.txt', 'a') as f:\n    f.write('Line 2\\n')"
          },
          {
            "exercise": "Write multiple lines with `writelines()`",
            "answer": "lines = ['Line 1\\n', 'Line 2\\n', 'Line 3\\n']\nwith open('output.txt', 'w') as f:\n    f.writelines(lines)"
          },
          {
            "exercise": "Use newline `\\n` manually for line breaks",
            "answer": "with open('output.txt', 'w') as f:\n    f.write('Line 1\\n')\n    f.write('Line 2\\n')"
          },
          {
            "exercise": "Overwrite vs append mode behavior",
            "answer": "# 'w' overwrites existing content\nwith open('file.txt', 'w') as f:\n    f.write('New content')\n\n# 'a' appends to existing content\nwith open('file.txt', 'a') as f:\n    f.write('\\nAppended')"
          }
        ]
      },
      {
        "skill": "Skill 3: File Modes and Binary Data",
        "exercises": [
          {
            "exercise": "Open file in binary mode `'rb'` / `'wb'`",
            "answer": "# Text modes: 'r', 'w', 'a'\n# Binary modes: 'rb', 'wb', 'ab'\nwith open('image.png', 'rb') as f:\n    data = f.read()"
          },
          {
            "exercise": "Read and write binary files",
            "answer": "with open('file.dat', 'rb') as f:\n    binary_data = f.read()\n\nwith open('output.dat', 'wb') as f:\n    f.write(binary_data)"
          },
          {
            "exercise": "Use `.decode()` and `.encode()` for strings \u2194 bytes",
            "answer": "# Convert between text and bytes\ntext = 'Hello'\nbytes_data = text.encode('utf-8')\nback_to_text = bytes_data.decode('utf-8')"
          },
          {
            "exercise": "Handle images and non-text files",
            "answer": "with open('image.png', 'rb') as f:\n    image_data = f.read()\nprint(len(image_data))"
          },
          {
            "exercise": "Use `io.BytesIO` for in-memory binary buffers",
            "answer": "from io import BytesIO\n\nbuffer = BytesIO()\nbuffer.write(b'Hello')\ndata = buffer.getvalue()\nprint(data)"
          }
        ]
      },
      {
        "skill": "Skill 4: File Paths and OS Navigation",
        "exercises": [
          {
            "exercise": "Use `os.path.join()` to build platSkill-safe paths",
            "answer": "import os\n\npath = os.path.join('folder', 'subfolder', 'file.txt')\nprint(path)"
          },
          {
            "exercise": "Get current working directory with `os.getcwd()`",
            "answer": "import os\n\ncwd = os.getcwd()\nprint(cwd)"
          },
          {
            "exercise": "Change directory with `os.chdir()`",
            "answer": "import os\n\nos.chdir('/path/to/directory')\nprint(os.getcwd())"
          },
          {
            "exercise": "Check existence with `os.path.exists()`",
            "answer": "import os\n\nif os.path.exists('file.txt'):\n    print('File exists')"
          },
          {
            "exercise": "Use `os.path.abspath()` for full paths",
            "answer": "import os\n\nrelative_path = 'file.txt'\nabsolute_path = os.path.abspath(relative_path)\nprint(absolute_path)"
          }
        ]
      },
      {
        "skill": "Skill 5: Creating and Modifying Files/Dirs",
        "exercises": [
          {
            "exercise": "Create a file with open \\+ `'w'` mode",
            "answer": "with open('new_file.txt', 'w') as f:\n    f.write('Content')"
          },
          {
            "exercise": "Use `os.mkdir()` or `os.makedirs()`",
            "answer": "import os\n\nos.mkdir('new_folder')\n# Or create parent directories:\nos.makedirs('parent/child/folder', exist_ok=True)"
          },
          {
            "exercise": "Rename with `os.rename()`",
            "answer": "import os\n\nos.rename('old_name.txt', 'new_name.txt')"
          },
          {
            "exercise": "Delete files or directories with `os.remove()` / `os.rmdir()`",
            "answer": "import os\n\nos.remove('file.txt')  # Delete file\nos.rmdir('empty_folder')  # Delete empty dir"
          },
          {
            "exercise": "Use `shutil` for recursive copy/delete",
            "answer": "import shutil\n\n# Copy file\nshutil.copy('source.txt', 'dest.txt')\n\n# Copy directory\nshutil.copytree('source_dir', 'dest_dir')\n\n# Delete directory and contents\nshutil.rmtree('dir_to_delete')"
          }
        ]
      },
      {
        "skill": "Skill 6: Working with Directories",
        "exercises": [
          {
            "exercise": "List files with `os.listdir()`",
            "answer": "import os\n\nfor item in os.listdir('.'):\n    print(item)"
          },
          {
            "exercise": "Walk directories with `os.walk()`",
            "answer": "import os\n\nfor item in os.listdir('.'):\n    if os.path.isfile(item):\n        print(f'File: {item}')\n    elif os.path.isdir(item):\n        print(f'Dir: {item}')"
          },
          {
            "exercise": "Filter files by extension",
            "answer": "import os\n\nfor root, dirs, files in os.walk('.'):\n    print(f'Directory: {root}')\n    for file in files:\n        print(f'  File: {file}')"
          },
          {
            "exercise": "Get file sizes or metadata",
            "answer": "from pathlib import Path\n\nfor item in Path('.').iterdir():\n    print(item)"
          },
          {
            "exercise": "Sort directory contents by date or name",
            "answer": "import os\n\nfiles = [f for f in os.listdir('.') if f.endswith('.txt')]\nprint(files)"
          }
        ]
      },
      {
        "skill": "Skill 7: Context Managers",
        "exercises": [
          {
            "exercise": "Use `with open(...) as f:` for safe file handling",
            "answer": "import os\n\nsize = os.path.getsize('file.txt')\nprint(f'Size: {size} bytes')"
          },
          {
            "exercise": "Define your own context manager with `__enter__`/`__exit__`",
            "answer": "import os\n\nmod_time = os.path.getmtime('file.txt')\nfrom datetime import datetime\ndt = datetime.fromtimestamp(mod_time)\nprint(dt)"
          },
          {
            "exercise": "Use `contextlib.contextmanager` to simplify",
            "answer": "import os\nimport stat\n\nst = os.stat('file.txt')\nif st.st_mode & stat.S_IRUSR:\n    print('Readable by owner')"
          },
          {
            "exercise": "Wrap OS or DB operations with context",
            "answer": "import os\n\nos.chmod('file.txt', 0o644)  # rw-r--r--"
          },
          {
            "exercise": "Handle exceptions inside `with` blocks",
            "answer": "from pathlib import Path\n\npath = Path('file.txt')\nprint(f'Size: {path.stat().st_size}')\nprint(f'Modified: {path.stat().st_mtime}')"
          }
        ]
      },
      {
        "skill": "Skill 8: Temporary Files",
        "exercises": [
          {
            "exercise": "Use `tempfile.TemporaryFile()`",
            "answer": "from pathlib import Path\n\npath = Path('folder/file.txt')\nprint(path)"
          },
          {
            "exercise": "Use `tempfile.NamedTemporaryFile()`",
            "answer": "from pathlib import Path\n\npath = Path('file.txt')\nif path.exists():\n    print('File exists')"
          },
          {
            "exercise": "Work with temp directories",
            "answer": "from pathlib import Path\n\npath = Path('file.txt')\ncontent = path.read_text()\nprint(content)"
          },
          {
            "exercise": "Ensure auto-cleanup",
            "answer": "from pathlib import Path\n\npath = Path('output.txt')\npath.write_text('Hello, World!')"
          },
          {
            "exercise": "Use tempfiles in tests or scripts",
            "answer": "from pathlib import Path\n\npath = Path('folder/subfolder/file.txt')\npath.parent.mkdir(parents=True, exist_ok=True)\npath.write_text('Content')"
          }
        ]
      },
      {
        "skill": "Skill 9: Standard Input and Output",
        "exercises": [
          {
            "exercise": "Read from `input()` in console",
            "answer": "import tempfile\n\nwith tempfile.TemporaryFile() as f:\n    f.write(b'Hello')\n    f.seek(0)\n    print(f.read())"
          },
          {
            "exercise": "Redirect input/output in files or subprocesses",
            "answer": "import tempfile\n\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    f.write(b'Hello')\n    temp_path = f.name\nprint(temp_path)"
          },
          {
            "exercise": "Use `print(..., file=f)` to redirect output",
            "answer": "import tempfile\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print(f'Temp dir: {tmpdir}')\n    # Use tmpdir\n# Automatically cleaned up"
          },
          {
            "exercise": "Use `sys.stdin` / `sys.stdout` directly",
            "answer": "import tempfile\nimport os\n\ntemp_dir = tempfile.mkdtemp()\nprint(temp_dir)\n# Remember to clean up:\nos.rmdir(temp_dir)"
          },
          {
            "exercise": "Create CLI programs with text prompts",
            "answer": "import tempfile\nfrom pathlib import Path\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    temp_file = Path(tmpdir) / 'test.txt'\n    temp_file.write_text('Hello')"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Always use `with` when handling files",
            "answer": "# Always use context managers\nwith open('file.txt', 'r') as f:\n    content = f.read()\n# File automatically closed"
          },
          {
            "exercise": "Normalize and check file paths",
            "answer": "from pathlib import Path\n\n# Use pathlib for cross-platform paths\npath = Path('folder') / 'subfolder' / 'file.txt'"
          },
          {
            "exercise": "Catch `FileNotFoundError` and `PermissionError`",
            "answer": "# Check before operations\nimport os\n\nif os.path.exists('file.txt'):\n    os.remove('file.txt')"
          },
          {
            "exercise": "Avoid hardcoding file paths",
            "answer": "# Handle errors gracefully\ntry:\n    with open('file.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    content = ''  # Default"
          },
          {
            "exercise": "Log actions when modifying the filesystem",
            "answer": "# Use appropriate encodings\nwith open('file.txt', 'r', encoding='utf-8') as f:\n    content = f.read()"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 21: CSV & Tabular Data",
    "skills": [
      {
        "skill": "Skill 1: Reading CSV Files",
        "exercises": [
          {
            "exercise": "Use `csv.reader()` to read rows from a file",
            "answer": "import math\n\nprint(math.pi)"
          },
          {
            "exercise": "Loop over lines and access fields by index",
            "answer": "import math\n\nprint(math.sqrt(16))  # 4.0"
          },
          {
            "exercise": "Handle header rows manually",
            "answer": "from math import pi, sqrt\n\nprint(pi)\nprint(sqrt(16))"
          },
          {
            "exercise": "Read with different delimiters (e.g., tabs)",
            "answer": "from math import *\n\nprint(sin(0))  # 0.0"
          },
          {
            "exercise": "Use `with open()` for safe file access",
            "answer": "import math as m\n\nprint(m.pi)"
          }
        ]
      },
      {
        "skill": "Skill 2: Writing CSV Files",
        "exercises": [
          {
            "exercise": "Use `csv.writer()` to write rows to a file",
            "answer": "# mymodule.py\ndef greet(name):\n    return f'Hello, {name}'\n\n# main.py\nimport mymodule\nprint(mymodule.greet('Alice'))"
          },
          {
            "exercise": "Write header and data rows",
            "answer": "# mymodule.py\nPI = 3.14159\n\n# main.py\nimport mymodule\nprint(mymodule.PI)"
          },
          {
            "exercise": "Handle special characters with quoting",
            "answer": "# mymodule.py\ndef _internal():\n    pass\n\ndef public():\n    _internal()\n\n# main.py\nimport mymodule\nmymodule.public()"
          },
          {
            "exercise": "Append to existing CSVs",
            "answer": "# mymodule.py\nif __name__ == '__main__':\n    print('Running as script')\n# Else: imported as module"
          },
          {
            "exercise": "Write using custom delimiter or quoting rules",
            "answer": "# mymodule.py\n__all__ = ['public_func']\n\ndef public_func():\n    pass\n\ndef _private_func():\n    pass"
          }
        ]
      },
      {
        "skill": "Skill 3: Using `csv.DictReader`",
        "exercises": [
          {
            "exercise": "Read CSV rows as dictionaries",
            "answer": "# mypackage/__init__.py\nfrom .module import func\n\n# main.py\nfrom mypackage import func"
          },
          {
            "exercise": "Access values by field name",
            "answer": "# mypackage/__init__.py\n__version__ = '1.0.0'\n\n# main.py\nimport mypackage\nprint(mypackage.__version__)"
          },
          {
            "exercise": "Handle missing or extra fields",
            "answer": "# mypackage/\n#   __init__.py\n#   module1.py\n#   module2.py\nfrom mypackage import module1, module2"
          },
          {
            "exercise": "Customize fieldnames manually",
            "answer": "# mypackage/subpackage/__init__.py\n# Access with:\nfrom mypackage.subpackage import module"
          },
          {
            "exercise": "Combine with `list()` or `enumerate()`",
            "answer": "# mypackage/__init__.py\nfrom .module import *\n\n__all__ = ['func1', 'func2']"
          }
        ]
      },
      {
        "skill": "Skill 4: Using `csv.DictWriter`",
        "exercises": [
          {
            "exercise": "Write dicts to CSV rows",
            "answer": "import sys\n\nfor path in sys.path:\n    print(path)"
          },
          {
            "exercise": "Set fieldnames and write header",
            "answer": "import sys\n\nsys.path.insert(0, '/custom/path')\nimport mymodule"
          },
          {
            "exercise": "Write from a list of dictionaries",
            "answer": "import os\n\nproject_root = os.path.abspath('.')\nprint(project_root)"
          },
          {
            "exercise": "Handle missing fields safely",
            "answer": "# Run from project root:\n# python -m mypackage.module"
          },
          {
            "exercise": "Control quoting and Skillatting options",
            "answer": "import sys\nimport os\n\nsys.path.append(os.path.dirname(__file__))"
          }
        ]
      },
      {
        "skill": "Skill 5: Parsing and Cleaning Fields",
        "exercises": [
          {
            "exercise": "Strip whitespace from CSV values",
            "answer": "from mypackage.module import func"
          },
          {
            "exercise": "Convert numeric fields to `int`/`float`",
            "answer": "# Relative import in package\n# mypackage/module1.py\nfrom .module2 import func"
          },
          {
            "exercise": "Handle null or empty values",
            "answer": "# Parent package import\nfrom ..parentmodule import func"
          },
          {
            "exercise": "Replace or remove unwanted characters",
            "answer": "# Absolute import (preferred)\nfrom mypackage.module import func\n\n# Relative import\nfrom .module import func"
          },
          {
            "exercise": "Validate data while reading",
            "answer": "from mypackage import module1, module2\n\nmodule1.func()\nmodule2.func()"
          }
        ]
      },
      {
        "skill": "Skill 6: Handling Unicode and Encodings",
        "exercises": [
          {
            "exercise": "Read/write CSVs with UTF-8 encoding",
            "answer": "import importlib\n\nmodule = importlib.import_module('mymodule')\nmodule.func()"
          },
          {
            "exercise": "Handle UnicodeDecodeError",
            "answer": "import importlib\nimport sys\n\nif 'mymodule' in sys.modules:\n    importlib.reload(sys.modules['mymodule'])"
          },
          {
            "exercise": "Read non-UTF encodings (e.g., Latin-1)",
            "answer": "import sys\n\nif 'mymodule' in sys.modules:\n    del sys.modules['mymodule']\nimport mymodule  # Fresh import"
          },
          {
            "exercise": "Write with BOM if needed",
            "answer": "# Check if module exists\nimport importlib.util\n\nspec = importlib.util.find_spec('mymodule')\nif spec:\n    print('Module found')"
          },
          {
            "exercise": "Normalize encodings in data pipeline",
            "answer": "import sys\n\nprint('mymodule' in sys.modules)"
          }
        ]
      },
      {
        "skill": "Skill 7: Tabular TransSkillations",
        "exercises": [
          {
            "exercise": "Filter rows based on column values",
            "answer": "# Don't use import *\n# Bad:\nfrom module import *\n\n# Good:\nfrom module import func1, func2"
          },
          {
            "exercise": "Add new computed columns",
            "answer": "# Use absolute imports when possible\nfrom mypackage.module import func"
          },
          {
            "exercise": "Remove or reorder columns",
            "answer": "# Organize imports\nimport os  # stdlib\nimport sys\n\nimport numpy  # third-party\n\nfrom mypackage import module  # local"
          },
          {
            "exercise": "Aggregate data by group",
            "answer": "# Avoid circular imports\n# module1.py: import module2 at top\n# module2.py: import module1 at top\n# Solution: import at function level if needed"
          },
          {
            "exercise": "Use list comprehension to transSkill rows",
            "answer": "# Document module dependencies\n# requirements.txt or setup.py"
          }
        ]
      },
      {
        "skill": "Skill 8: Converting CSV to Other Skillats",
        "exercises": [
          {
            "exercise": "Convert to JSON with `json.dumps()`",
            "answer": "import sys\n\nprint(sys.modules.keys())  # All loaded modules"
          },
          {
            "exercise": "Convert to list of dicts",
            "answer": "import mymodule\n\nprint(dir(mymodule))  # Module attributes"
          },
          {
            "exercise": "Convert to Excel with `openpyxl` or `pandas`",
            "answer": "import mymodule\n\nif hasattr(mymodule, 'func'):\n    mymodule.func()"
          },
          {
            "exercise": "Save to tab-delimited Skillat",
            "answer": "import sys\n\nprint(sys.path)  # Module search paths"
          },
          {
            "exercise": "Pipe CSV to other tools or APIs",
            "answer": "import mymodule\n\nprint(mymodule.__file__)  # Module file path"
          }
        ]
      },
      {
        "skill": "Skill 9: Using CSV with Pandas (Preview)",
        "exercises": [
          {
            "exercise": "Read CSV with `pd.read_csv()`",
            "answer": "# __init__.py makes directory a package\n# mypackage/\n#   __init__.py  (can be empty)\n#   module.py"
          },
          {
            "exercise": "Inspect with `.head()` and `.info()`",
            "answer": "# setup.py for distribution\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='mypackage',\n    version='1.0.0',\n    packages=find_packages()\n)"
          },
          {
            "exercise": "Filter rows using Boolean indexing",
            "answer": "pip install -e .  # Editable install"
          },
          {
            "exercise": "Save back to file with `.to_csv()`",
            "answer": "# MANIFEST.in for non-Python files\ninclude README.md\ninclude LICENSE\nrecursive-include mypackage *.txt"
          },
          {
            "exercise": "Handle missing values with `.fillna()` / `.dropna()`",
            "answer": "# pyproject.toml (modern)\n[build-system]\nrequires = ['setuptools', 'wheel']\nbuild-backend = 'setuptools.build_meta'"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Use `newline=''` when opening CSV files (Windows)",
            "answer": "# Keep modules focused\n# One module = one responsibility"
          },
          {
            "exercise": "Always handle encoding explicitly",
            "answer": "# Use __init__.py to expose API\n# mypackage/__init__.py\nfrom .core import main_func\n\n__all__ = ['main_func']"
          },
          {
            "exercise": "Validate data shape and types",
            "answer": "# Document module usage\n# mymodule.py\n\"\"\"\nModule for data processing.\n\nExample:\n    from mymodule import process\n    process(data)\n\"\"\""
          },
          {
            "exercise": "Avoid `eval()` on CSV content",
            "answer": "# Test modules independently\n# test_mymodule.py\nimport pytest\nfrom mymodule import func\n\ndef test_func():\n    assert func(1) == 2"
          },
          {
            "exercise": "Test with small samples before full reads/writes",
            "answer": "# Version your packages\n# mypackage/__init__.py\n__version__ = '1.0.0'"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 22: Pandas Essentials",
    "skills": [
      {
        "skill": "Skill 1: Creating DataFrames",
        "exercises": [
          {
            "exercise": "Import pandas with `import pandas as pd`",
            "answer": "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof'\n\nclass Cat(Animal):\n    def speak(self):\n        return 'Meow'"
          },
          {
            "exercise": "Create a DataFrame from a dictionary",
            "answer": "class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed"
          },
          {
            "exercise": "Create a DataFrame from a list of dicts",
            "answer": "class Parent:\n    def method(self):\n        return 'parent'\n\nclass Child(Parent):\n    def method(self):\n        return 'child'\n\nc = Child()\nprint(c.method())  # 'child'"
          },
          {
            "exercise": "Create a DataFrame from a list of lists \\+ column names",
            "answer": "class Parent:\n    def __init__(self, x):\n        self.x = x\n\nclass Child(Parent):\n    def __init__(self, x, y):\n        super().__init__(x)\n        self.y = y"
          },
          {
            "exercise": "View structure with `.head()`, `.tail()`, and `.info()`",
            "answer": "class Base:\n    def method(self):\n        return 'base'\n\nclass Derived(Base):\n    def method(self):\n        base_result = super().method()\n        return f'{base_result} + derived'"
          }
        ]
      },
      {
        "skill": "Skill 2: Reading and Writing Files",
        "exercises": [
          {
            "exercise": "Read CSV with `pd.read_csv()`",
            "answer": "class A:\n    def method(self):\n        return 'A'\n\nclass B:\n    def method(self):\n        return 'B'\n\nclass C(A, B):\n    pass\n\nc = C()\nprint(c.method())  # 'A' (MRO: C, A, B)"
          },
          {
            "exercise": "Write DataFrame to CSV with `.to_csv()`",
            "answer": "class C(A, B):\n    pass\n\nprint(C.__mro__)  # Method Resolution Order"
          },
          {
            "exercise": "Read Excel with `pd.read_excel()`",
            "answer": "class C(A, B):\n    def method(self):\n        # Call next in MRO\n        return super().method()"
          },
          {
            "exercise": "Read from clipboard or URL",
            "answer": "# Diamond problem\nclass A:\n    def method(self): pass\n\nclass B(A):\n    def method(self): super().method()\n\nclass C(A):\n    def method(self): super().method()\n\nclass D(B, C):\n    pass"
          },
          {
            "exercise": "Export to Excel or JSON",
            "answer": "class Mixin:\n    def mixin_method(self):\n        return 'mixin'\n\nclass MyClass(Mixin, BaseClass):\n    pass"
          }
        ]
      },
      {
        "skill": "Skill 3: Exploring Data",
        "exercises": [
          {
            "exercise": "View shape with `.shape`",
            "answer": "from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof'"
          },
          {
            "exercise": "View column names with `.columns`",
            "answer": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n# Cannot instantiate:\n# s = Shape()  # Error"
          },
          {
            "exercise": "Get summary stats with `.describe()`",
            "answer": "from abc import ABC, abstractmethod\n\nclass DataProcessor(ABC):\n    @abstractmethod\n    def process(self, data):\n        pass\n\n    def validate(self, data):\n        # Concrete method\n        return data is not None"
          },
          {
            "exercise": "View unique values with `.unique()`",
            "answer": "from abc import ABC, abstractmethod\n\nclass Interface(ABC):\n    @abstractmethod\n    def method1(self): pass\n    \n    @abstractmethod\n    def method2(self): pass"
          },
          {
            "exercise": "Use `.value_counts()` on a column",
            "answer": "from abc import ABC, abstractmethod\n\nclass Base(ABC):\n    @abstractmethod\n    def required_method(self):\n        # Can provide default\n        return 'default'\n\nclass Child(Base):\n    def required_method(self):\n        return super().required_method()"
          }
        ]
      },
      {
        "skill": "Skill 4: Selecting Columns and Rows",
        "exercises": [
          {
            "exercise": "Select a column: `df['col']` or `df.col`",
            "answer": "class MyClass:\n    def __init__(self, value):\n        self._value = value\n    \n    @property\n    def value(self):\n        return self._value"
          },
          {
            "exercise": "Select multiple columns with a list",
            "answer": "class MyClass:\n    def __init__(self, value):\n        self._value = value\n    \n    @property\n    def value(self):\n        return self._value\n    \n    @value.setter\n    def value(self, new_value):\n        if new_value >= 0:\n            self._value = new_value"
          },
          {
            "exercise": "Use `.loc[]` for label-based access",
            "answer": "class Temperature:\n    def __init__(self, celsius):\n        self._celsius = celsius\n    \n    @property\n    def fahrenheit(self):\n        return self._celsius * 9/5 + 32"
          },
          {
            "exercise": "Use `.iloc[]` for integer-position access",
            "answer": "class MyClass:\n    @property\n    def computed(self):\n        return expensive_computation()"
          },
          {
            "exercise": "Slice rows with `.iloc[start:end]`",
            "answer": "class Circle:\n    def __init__(self, radius):\n        self._radius = radius\n    \n    @property\n    def area(self):\n        return 3.14159 * self._radius ** 2"
          }
        ]
      },
      {
        "skill": "Skill 5: Filtering Data",
        "exercises": [
          {
            "exercise": "Filter rows with a Boolean mask",
            "answer": "class MyClass:\n    @staticmethod\n    def utility_func(x):\n        return x * 2\n\n# Call without instance\nresult = MyClass.utility_func(5)"
          },
          {
            "exercise": "Combine multiple conditions with `&` and `|`",
            "answer": "class Math:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\nprint(Math.add(2, 3))  # 5"
          },
          {
            "exercise": "Filter with `.isin()`",
            "answer": "class MyClass:\n    @classmethod\n    def from_string(cls, s):\n        value = int(s)\n        return cls(value)"
          },
          {
            "exercise": "Filter with `.str.contains()` for text",
            "answer": "class MyClass:\n    count = 0\n    \n    @classmethod\n    def increment_count(cls):\n        cls.count += 1"
          },
          {
            "exercise": "Chain filters with `.query()`",
            "answer": "class Animal:\n    @classmethod\n    def create(cls, name):\n        return cls(name)\n\nclass Dog(Animal):\n    pass\n\ndog = Dog.create('Rex')  # Returns Dog instance"
          }
        ]
      },
      {
        "skill": "Skill 6: Creating and Modifying Columns",
        "exercises": [
          {
            "exercise": "Add new column: `df['new'] = ...`",
            "answer": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)"
          },
          {
            "exercise": "Modify column in place",
            "answer": "class MyClass:\n    def __str__(self):\n        return 'String representation'\n    \n    def __repr__(self):\n        return 'MyClass()'\n\nobj = MyClass()\nprint(str(obj))  # Uses __str__\nprint(repr(obj))  # Uses __repr__"
          },
          {
            "exercise": "Apply a function to a column with `.apply()`",
            "answer": "class MyList:\n    def __init__(self, items):\n        self.items = items\n    \n    def __len__(self):\n        return len(self.items)\n    \n    def __getitem__(self, index):\n        return self.items[index]"
          },
          {
            "exercise": "Use `.map()` or `.replace()` for remapping values",
            "answer": "class Number:\n    def __init__(self, value):\n        self.value = value\n    \n    def __eq__(self, other):\n        return self.value == other.value\n    \n    def __lt__(self, other):\n        return self.value < other.value"
          },
          {
            "exercise": "Delete columns with `del` or `.drop()`",
            "answer": "class Resource:\n    def __enter__(self):\n        print('Acquiring')\n        return self\n    \n    def __exit__(self, *args):\n        print('Releasing')\n\nwith Resource() as r:\n    pass"
          }
        ]
      },
      {
        "skill": "Skill 7: Handling Missing Data",
        "exercises": [
          {
            "exercise": "Detect missing data with `.isnull()`",
            "answer": "class MyClass:\n    class Meta:\n        ordering = ['name']\n        verbose_name = 'My Class'"
          },
          {
            "exercise": "Drop missing rows with `.dropna()`",
            "answer": "def create_class(name, bases, attrs):\n    # Metaclass logic\n    return type(name, bases, attrs)"
          },
          {
            "exercise": "Fill missing values with `.fillna()`",
            "answer": "class Singleton(type):\n    _instances = {}\n    \n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]"
          },
          {
            "exercise": "Forward/backward fill with `method='ffill'/'bfill'`",
            "answer": "class MyMeta(type):\n    def __new__(mcs, name, bases, attrs):\n        # Modify class before creation\n        attrs['modified'] = True\n        return super().__new__(mcs, name, bases, attrs)"
          },
          {
            "exercise": "Drop columns with too many missing values",
            "answer": "from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int"
          }
        ]
      },
      {
        "skill": "Skill 8: Grouping and Aggregation",
        "exercises": [
          {
            "exercise": "Use `.groupby()` and `.agg()` for summaries",
            "answer": "class MyClass:\n    def __init__(self):\n        self.__private = 'private'\n        self._protected = 'protected'"
          },
          {
            "exercise": "Get group counts with `.size()`",
            "answer": "class MyClass:\n    def __init__(self):\n        self.__private = 'private'\n    \n    def get_private(self):\n        return self.__private"
          },
          {
            "exercise": "Compute mean/sum/count per group",
            "answer": "class MyClass:\n    def __init__(self):\n        self._internal = 'use with caution'"
          },
          {
            "exercise": "Apply custom aggregation functions",
            "answer": "# Name mangling\nclass MyClass:\n    def __init__(self):\n        self.__private = 'value'\n\nobj = MyClass()\nprint(obj._MyClass__private)  # Accessible but don't"
          },
          {
            "exercise": "Use `.reset_index()` after groupby",
            "answer": "class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance\n    \n    def deposit(self, amount):\n        self.__balance += amount"
          }
        ]
      },
      {
        "skill": "Skill 9: Sorting and Reordering",
        "exercises": [
          {
            "exercise": "Sort by values with `.sort_values()`",
            "answer": "class MyClass:\n    def __init__(self, data):\n        self.data = data\n\n    def __getstate__(self):\n        return {'data': self.data}\n\n    def __setstate__(self, state):\n        self.data = state['data']"
          },
          {
            "exercise": "Sort by index with `.sort_index()`",
            "answer": "import copy\n\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\noriginal = MyClass([1, 2, 3])\nshallow = copy.copy(original)\ndeep = copy.deepcopy(original)"
          },
          {
            "exercise": "Reorder columns manually",
            "answer": "class MyClass:\n    def __copy__(self):\n        return MyClass(self.value)\n\n    def __deepcopy__(self, memo):\n        return MyClass(copy.deepcopy(self.value, memo))"
          },
          {
            "exercise": "Reindex rows/columns with `.reindex()`",
            "answer": "import pickle\n\nobj = MyClass()\npickled = pickle.dumps(obj)\nrestored = pickle.loads(pickled)"
          },
          {
            "exercise": "Rename columns with `.rename()`",
            "answer": "class MyClass:\n    def __reduce__(self):\n        return (MyClass, (self.arg1, self.arg2))"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Avoid modifying DataFrames in place unnecessarily",
            "answer": "# Favor composition\nclass Engine:\n    def start(self): pass\n\nclass Car:\n    def __init__(self):\n        self.engine = Engine()"
          },
          {
            "exercise": "Use `.copy()` when working with slices",
            "answer": "# Program to interface\nfrom abc import ABC, abstractmethod\n\nclass DataStore(ABC):\n    @abstractmethod\n    def save(self, data): pass\n\nclass FileStore(DataStore):\n    def save(self, data):\n        pass"
          },
          {
            "exercise": "Validate assumptions after filters",
            "answer": "# Keep classes focused\nclass User:\n    def __init__(self, name):\n        self.name = name\n\nclass UserValidator:\n    @staticmethod\n    def validate(user):\n        return bool(user.name)"
          },
          {
            "exercise": "Document transSkillations with comments",
            "answer": "# Use inheritance for \"is-a\"\n# Use composition for \"has-a\"\nclass Vehicle:  # is-a relationship\n    pass\n\nclass Car(Vehicle):\n    def __init__(self):\n        self.engine = Engine()  # has-a"
          },
          {
            "exercise": "Start with small samples before large transSkillations",
            "answer": "# Test classes thoroughly\nimport pytest\n\ndef test_my_class():\n    obj = MyClass()\n    assert obj.method() == expected"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 23: NumPy Fundamentals",
    "skills": [
      {
        "skill": "Skill 1: Creating Arrays",
        "exercises": [
          {
            "exercise": "Import NumPy as `np`",
            "answer": "def decorator(func):\n    def wrapper():\n        print('Before')\n        func()\n        print('After')\n    return wrapper\n\n@decorator\ndef greet():\n    print('Hello')\n\ngreet()"
          },
          {
            "exercise": "Create 1D array with `np.array([1, 2, 3])`",
            "answer": "def decorator(func):\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Create 2D array with nested lists",
            "answer": "def uppercase(func):\n    def wrapper():\n        result = func()\n        return result.upper()\n    return wrapper\n\n@uppercase\ndef greet():\n    return 'hello'\n\nprint(greet())  # 'HELLO'"
          },
          {
            "exercise": "Use `np.zeros()`, `np.ones()`, `np.full()`",
            "answer": "@decorator\ndef my_func():\n    pass\n\n# Equivalent to:\n# my_func = decorator(my_func)"
          },
          {
            "exercise": "Generate ranges with `np.arange()` and `np.linspace()`",
            "answer": "def timer(func):\n    import time\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f'Took {end-start:.2f}s')\n        return result\n    return wrapper"
          }
        ]
      },
      {
        "skill": "Skill 2: Inspecting Arrays",
        "exercises": [
          {
            "exercise": "Get shape with `.shape`",
            "answer": "def repeat(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef greet():\n    print('Hello')"
          },
          {
            "exercise": "Get dimensions with `.ndim`",
            "answer": "def with_prefix(prefix):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return prefix + func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@with_prefix('>>> ')\ndef say(msg):\n    return msg"
          },
          {
            "exercise": "Get data type with `.dtype`",
            "answer": "def check_type(expected_type):\n    def decorator(func):\n        def wrapper(arg):\n            if not isinstance(arg, expected_type):\n                raise TypeError\n            return func(arg)\n        return wrapper\n    return decorator"
          },
          {
            "exercise": "Get size (number of elements) with `.size`",
            "answer": "@with_logging(level='INFO')\ndef process():\n    pass"
          },
          {
            "exercise": "Use `.itemsize` and `.nbytes` to inspect memory usage",
            "answer": "def cache(maxsize):\n    def decorator(func):\n        cached = {}\n        def wrapper(*args):\n            if args in cached:\n                return cached[args]\n            result = func(*args)\n            cached[args] = result\n            return result\n        return wrapper\n    return decorator"
          }
        ]
      },
      {
        "skill": "Skill 3: Indexing and Slicing",
        "exercises": [
          {
            "exercise": "Index a single element with `[i]` or `[i,j]`",
            "answer": "from functools import wraps\n\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Slice 1D arrays with `[start:stop]`",
            "answer": "from functools import wraps\n\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n\n@decorator\ndef greet():\n    \"\"\"Greet function\"\"\"\n    pass\n\nprint(greet.__name__)  # 'greet'\nprint(greet.__doc__)   # 'Greet function'"
          },
          {
            "exercise": "Slice 2D arrays with `[start:end, start:end]`",
            "answer": "from functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    wrapper.decorated = True\n    return wrapper"
          },
          {
            "exercise": "Use negative indices",
            "answer": "from functools import wraps\nimport inspect\n\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        sig = inspect.signature(func)\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Use `.flatten()` or `.ravel()` to collapse arrays",
            "answer": "from functools import wraps\n\ndef preserve_metadata(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          }
        ]
      },
      {
        "skill": "Skill 4: Vectorized Operations",
        "exercises": [
          {
            "exercise": "PerSkill element-wise arithmetic (+, \\-, \\*, /)",
            "answer": "def outer(func):\n    @wraps(func)\n    def middle(*args, **kwargs):\n        @wraps(func)\n        def inner():\n            return func(*args, **kwargs)\n        return inner()\n    return middle"
          },
          {
            "exercise": "Use broadcasting with scalars",
            "answer": "@decorator1\n@decorator2\ndef func():\n    pass\n\n# Applied as: decorator1(decorator2(func))"
          },
          {
            "exercise": "Use `np.add()`, `np.multiply()` for clarity",
            "answer": "@log\n@cache\n@validate\ndef process(data):\n    pass\n# Order matters!"
          },
          {
            "exercise": "Compare arrays element-wise",
            "answer": "def combined(func):\n    @log\n    @cache\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Use `np.where()` for conditional logic",
            "answer": "@timer\n@memoize\ndef expensive_func(n):\n    # Timed and cached\n    pass"
          }
        ]
      },
      {
        "skill": "Skill 5: Boolean Masking",
        "exercises": [
          {
            "exercise": "Filter array with Boolean mask",
            "answer": "class Counter:\n    def __init__(self, func):\n        self.func = func\n        self.count = 0\n    \n    def __call__(self, *args, **kwargs):\n        self.count += 1\n        return self.func(*args, **kwargs)"
          },
          {
            "exercise": "Combine masks with `&`, `|`, `~`",
            "answer": "class Decorator:\n    def __init__(self, func):\n        self.func = func\n    \n    def __call__(self, *args, **kwargs):\n        print('Called')\n        return self.func(*args, **kwargs)\n\n@Decorator\ndef greet():\n    print('Hello')"
          },
          {
            "exercise": "Count matching values with `np.sum(mask)`",
            "answer": "class Cache:\n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n    \n    def __call__(self, *args):\n        if args in self.cache:\n            return self.cache[args]\n        result = self.func(*args)\n        self.cache[args] = result\n        return result"
          },
          {
            "exercise": "Modify elements based on condition",
            "answer": "from functools import wraps\n\nclass LogDecorator:\n    def __init__(self, func):\n        wraps(func)(self)\n        self.func = func\n    \n    def __call__(self, *args, **kwargs):\n        print(f'Calling {self.func.__name__}')\n        return self.func(*args, **kwargs)"
          },
          {
            "exercise": "Use `np.nonzero()` to get matching indices",
            "answer": "class Validator:\n    def __init__(self, func):\n        self.func = func\n    \n    def __call__(self, *args):\n        # Validate args\n        return self.func(*args)"
          }
        ]
      },
      {
        "skill": "Skill 6: Aggregation Functions",
        "exercises": [
          {
            "exercise": "Use `np.sum()`, `np.mean()`, `np.std()`",
            "answer": "def method_decorator(func):\n    @wraps(func)\n    def wrapper(self, *args, **kwargs):\n        return func(self, *args, **kwargs)\n    return wrapper\n\nclass MyClass:\n    @method_decorator\n    def method(self):\n        pass"
          },
          {
            "exercise": "Use `np.min()` / `np.max()`",
            "answer": "class MyClass:\n    @property\n    def value(self):\n        return self._value\n    \n    @value.setter\n    def value(self, val):\n        self._value = val"
          },
          {
            "exercise": "Aggregate along axes with `axis=`",
            "answer": "class MyClass:\n    @staticmethod\n    def utility():\n        pass\n    \n    @classmethod\n    def factory(cls):\n        return cls()"
          },
          {
            "exercise": "Use `np.cumsum()` and `np.cumprod()`",
            "answer": "def validate_args(func):\n    @wraps(func)\n    def wrapper(self, *args, **kwargs):\n        # Validate\n        return func(self, *args, **kwargs)\n    return wrapper\n\nclass MyClass:\n    @validate_args\n    def process(self, data):\n        pass"
          },
          {
            "exercise": "Combine aggregation with masking",
            "answer": "class MyClass:\n    @cache_method\n    def expensive_operation(self, n):\n        return n ** 2"
          }
        ]
      },
      {
        "skill": "Skill 7: Reshaping and Transposing",
        "exercises": [
          {
            "exercise": "Reshape array with `.reshape()`",
            "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
          },
          {
            "exercise": "Transpose with `.T` or `.transpose()`",
            "answer": "@lru_cache(maxsize=None)  # Unbounded cache\ndef compute(x):\n    return x ** 2"
          },
          {
            "exercise": "Use `np.newaxis` to add dimensions",
            "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_func(n):\n    # Computation\n    return result\n\nprint(expensive_func.cache_info())  # Stats\nexpensive_func.cache_clear()  # Clear cache"
          },
          {
            "exercise": "Flatten with `.ravel()` or `.flatten()`",
            "answer": "from functools import cache  # Python 3.9+\n\n@cache\ndef factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n-1)"
          },
          {
            "exercise": "Stack arrays with `np.vstack()`, `np.hstack()`",
            "answer": "@lru_cache(maxsize=1000)\ndef fetch_data(url):\n    # Expensive API call\n    return data"
          }
        ]
      },
      {
        "skill": "Skill 8: Random Arrays",
        "exercises": [
          {
            "exercise": "Generate random floats with `np.random.rand()`",
            "answer": "from functools import singledispatch\n\n@singledispatch\ndef process(arg):\n    print(f'Generic: {arg}')\n\n@process.register(int)\ndef _(arg):\n    print(f'Int: {arg}')\n\n@process.register(str)\ndef _(arg):\n    print(f'Str: {arg}')"
          },
          {
            "exercise": "Generate random integers with `np.random.randint()`",
            "answer": "@singledispatch\ndef show(obj):\n    print(f'Object: {obj}')\n\n@show.register(list)\ndef _(obj):\n    print(f'List: {obj}')\n\n@show.register(dict)\ndef _(obj):\n    print(f'Dict: {obj}')"
          },
          {
            "exercise": "Shuffle array with `np.random.shuffle()`",
            "answer": "from functools import singledispatch\n\n@singledispatch\ndef serialize(obj):\n    return str(obj)\n\n@serialize.register(list)\ndef _(obj):\n    return '[' + ','.join(serialize(x) for x in obj) + ']'"
          },
          {
            "exercise": "Set random seed with `np.random.seed()`",
            "answer": "@singledispatch\ndef format_value(val):\n    return str(val)\n\n@format_value.register(int)\ndef _(val):\n    return f'{val:,}'\n\n@format_value.register(float)\ndef _(val):\n    return f'{val:.2f}'"
          },
          {
            "exercise": "Sample with or without replacement",
            "answer": "from functools import singledispatch\nfrom typing import List\n\n@singledispatch\ndef process(data):\n    pass\n\n@process.register(List)\ndef _(data: List):\n    return [x * 2 for x in data]"
          }
        ]
      },
      {
        "skill": "Skill 9: Working with NaN and Infs",
        "exercises": [
          {
            "exercise": "Use `np.isnan()` and `np.isinf()`",
            "answer": "# Keep decorators simple\ndef simple_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Replace with `np.nan_to_num()`",
            "answer": "from functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)  # Always use wraps\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper"
          },
          {
            "exercise": "Filter out NaNs before aggregation",
            "answer": "# Document decorator behavior\ndef timer(func):\n    \"\"\"Times function execution.\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        print(f'Time: {time.time() - start}')\n        return result\n    return wrapper"
          },
          {
            "exercise": "Use `np.nanmean()`, `np.nansum()`",
            "answer": "# Test decorated functions\ndef test_decorator():\n    @my_decorator\n    def func():\n        return 42\n    assert func() == 42"
          },
          {
            "exercise": "Use `np.isfinite()` to remove invalid data",
            "answer": "# Consider performance\n@lru_cache  # Use built-in when possible\ndef expensive_func(n):\n    return n ** 2"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Prefer vectorized ops over loops",
            "answer": "def conditional_decorator(condition):\n    def decorator(func):\n        if condition:\n            @wraps(func)\n            def wrapper(*args, **kwargs):\n                print('Decorated')\n                return func(*args, **kwargs)\n            return wrapper\n        return func\n    return decorator"
          },
          {
            "exercise": "Avoid modifying views unless intentional",
            "answer": "def debug(enabled=True):\n    def decorator(func):\n        if not enabled:\n            return func\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            print(f'Calling {func.__name__}')\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator"
          },
          {
            "exercise": "Use `astype()` to convert dtypes",
            "answer": "import os\n\ndef cache_if_prod(func):\n    if os.getenv('ENV') == 'production':\n        return lru_cache(func)\n    return func"
          },
          {
            "exercise": "Preallocate arrays for large ops",
            "answer": "def rate_limit(calls_per_second):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Rate limiting logic\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator"
          },
          {
            "exercise": "Document assumptions and axis usage",
            "answer": "def retry(max_attempts=3):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception:\n                    if attempt == max_attempts - 1:\n                        raise\n        return wrapper\n    return decorator"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 24: Matplotlib Basics",
    "skills": [
      {
        "skill": "Skill 1: Creating a Simple Plot",
        "exercises": [
          {
            "exercise": "Import `matplotlib.pyplot as plt`",
            "answer": "class Counter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current >= self.end:\n            raise StopIteration\n        self.current += 1\n        return self.current - 1"
          },
          {
            "exercise": "Plot a list of numbers with `plt.plot()`",
            "answer": "class MyIterator:\n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        # Return next value or raise StopIteration\n        pass"
          },
          {
            "exercise": "Show the plot with `plt.show()`",
            "answer": "counter = Counter(0, 5)\nfor num in counter:\n    print(num)  # 0, 1, 2, 3, 4"
          },
          {
            "exercise": "Add a title with `plt.title()`",
            "answer": "class Fibonacci:\n    def __init__(self, max_count):\n        self.max_count = max_count\n        self.count = 0\n        self.a, self.b = 0, 1\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.count >= self.max_count:\n            raise StopIteration\n        self.count += 1\n        result = self.a\n        self.a, self.b = self.b, self.a + self.b\n        return result"
          },
          {
            "exercise": "Label x and y axes with `plt.xlabel()` and `plt.ylabel()`",
            "answer": "# Built-in iterables\nfor item in [1, 2, 3]:  # List\n    print(item)\n\nfor char in 'hello':  # String\n    print(char)"
          }
        ]
      },
      {
        "skill": "Skill 2: Plot Customization",
        "exercises": [
          {
            "exercise": "Change line color, style, and width",
            "answer": "def count_up(start, end):\n    current = start\n    while current < end:\n        yield current\n        current += 1\n\nfor num in count_up(0, 5):\n    print(num)"
          },
          {
            "exercise": "Add markers to data points",
            "answer": "def simple_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = simple_generator()\nprint(next(gen))  # 1\nprint(next(gen))  # 2"
          },
          {
            "exercise": "Set axis limits with `plt.xlim()` / `plt.ylim()`",
            "answer": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor num in fibonacci(10):\n    print(num)"
          },
          {
            "exercise": "Add a grid with `plt.grid(True)`",
            "answer": "def infinite_sequence():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\ngen = infinite_sequence()\nprint(next(gen))  # 0\nprint(next(gen))  # 1"
          },
          {
            "exercise": "Add a legend with `plt.legend()`",
            "answer": "def read_large_file(filepath):\n    with open(filepath, 'r') as f:\n        for line in f:\n            yield line.strip()"
          }
        ]
      },
      {
        "skill": "Skill 3: Plotting Multiple Series",
        "exercises": [
          {
            "exercise": "Plot multiple lines on the same axes",
            "answer": "gen = (x**2 for x in range(10))\nfor val in gen:\n    print(val)"
          },
          {
            "exercise": "Use labels for each line and display with `legend()`",
            "answer": "squares = (x**2 for x in range(10))\nprint(next(squares))  # 0\nprint(next(squares))  # 1"
          },
          {
            "exercise": "Customize each series with different styles",
            "answer": "# Generator vs List Comprehension\ngen = (x for x in range(1000000))  # Memory efficient\nlst = [x for x in range(1000000)]  # All in memory"
          },
          {
            "exercise": "Overlay plots with `plt.plot()` multiple times",
            "answer": "even_squares = (x**2 for x in range(10) if x % 2 == 0)"
          },
          {
            "exercise": "Use `plt.figure()` to reset between plots",
            "answer": "# Pass to functions\nsum_of_squares = sum(x**2 for x in range(10))"
          }
        ]
      },
      {
        "skill": "Skill 4: Scatter and Bar Charts",
        "exercises": [
          {
            "exercise": "Create a scatter plot with `plt.scatter()`",
            "answer": "gen = (x for x in range(5))\ntry:\n    while True:\n        print(next(gen))\nexcept StopIteration:\n    print('Done')"
          },
          {
            "exercise": "Create a bar chart with `plt.bar()`",
            "answer": "def my_generator():\n    yield 1\n    yield 2\n    return 'Finished'\n\ngen = my_generator()\ntry:\n    while True:\n        print(next(gen))\nexcept StopIteration as e:\n    print(e.value)  # 'Finished'"
          },
          {
            "exercise": "Horizontal bars with `plt.barh()`",
            "answer": "gen = (x for x in range(3))\nprint(list(gen))  # [0, 1, 2]\nprint(list(gen))  # [] (exhausted)"
          },
          {
            "exercise": "Customize bar width, color, and alignment",
            "answer": "def generator():\n    try:\n        yield 1\n        yield 2\n    finally:\n        print('Cleanup')\n\ngen = generator()\nnext(gen)\ngen.close()  # Triggers finally"
          },
          {
            "exercise": "Add labels to bar chart elements",
            "answer": "import itertools\n\ngen = itertools.count()\nfor i, val in enumerate(gen):\n    if i >= 5:\n        break\n    print(val)"
          }
        ]
      },
      {
        "skill": "Skill 5: Histograms and Pie Charts",
        "exercises": [
          {
            "exercise": "Create a histogram with `plt.hist()`",
            "answer": "from itertools import count, cycle, repeat\n\n# count: infinite counting\nfor i in count(10, 2):  # Start at 10, step 2\n    if i > 20:\n        break\n    print(i)"
          },
          {
            "exercise": "Set bins and range",
            "answer": "from itertools import cycle\n\ncolors = cycle(['red', 'green', 'blue'])\nfor i, color in enumerate(colors):\n    if i >= 6:\n        break\n    print(color)"
          },
          {
            "exercise": "Plot a pie chart with `plt.pie()`",
            "answer": "from itertools import repeat\n\nfor val in repeat('hello', 3):\n    print(val)  # Prints 'hello' 3 times"
          },
          {
            "exercise": "Add percentage labels to pie chart",
            "answer": "from itertools import count\n\ncounter = count(1)\nprint(next(counter))  # 1\nprint(next(counter))  # 2"
          },
          {
            "exercise": "Use `explode` and colors in pie charts",
            "answer": "from itertools import islice, count\n\nfirst_ten = list(islice(count(), 10))\nprint(first_ten)  # [0, 1, 2, ..., 9]"
          }
        ]
      },
      {
        "skill": "Skill 6: Subplots and Layouts",
        "exercises": [
          {
            "exercise": "Use `plt.subplot(rows, cols, index)`",
            "answer": "from itertools import chain, zip_longest\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\ncombined = chain(list1, list2)\nprint(list(combined))  # [1, 2, 3, 4, 5, 6]"
          },
          {
            "exercise": "Adjust layout with `plt.tight_layout()`",
            "answer": "from itertools import zip_longest\n\na = [1, 2, 3]\nb = ['a', 'b']\nresult = zip_longest(a, b, fillvalue='x')\nprint(list(result))  # [(1, 'a'), (2, 'b'), (3, 'x')]"
          },
          {
            "exercise": "Create shared x/y axis plots",
            "answer": "from itertools import chain\n\nlists = [[1, 2], [3, 4], [5, 6]]\nflattened = chain.from_iterable(lists)\nprint(list(flattened))  # [1, 2, 3, 4, 5, 6]"
          },
          {
            "exercise": "Title each subplot individually",
            "answer": "from itertools import product\n\ncolors = ['red', 'blue']\nsizes = ['S', 'M']\ncombinations = product(colors, sizes)\nprint(list(combinations))"
          },
          {
            "exercise": "Use `plt.subplots()` for cleaner syntax",
            "answer": "from itertools import permutations, combinations\n\nitems = [1, 2, 3]\nprint(list(permutations(items, 2)))\nprint(list(combinations(items, 2)))"
          }
        ]
      },
      {
        "skill": "Skill 7: Saving Figures",
        "exercises": [
          {
            "exercise": "Save to file with `plt.savefig('filename.png')`",
            "answer": "from itertools import groupby\n\ndata = [('A', 1), ('A', 2), ('B', 3), ('B', 4)]\nfor key, group in groupby(data, key=lambda x: x[0]):\n    print(key, list(group))"
          },
          {
            "exercise": "Set resolution with `dpi=`",
            "answer": "from itertools import groupby\n\nnumbers = [1, 1, 2, 2, 2, 3, 3]\nfor key, group in groupby(numbers):\n    print(key, len(list(group)))"
          },
          {
            "exercise": "Save to PDF or SVG Skillat",
            "answer": "from itertools import filterfalse\n\ndef is_even(n):\n    return n % 2 == 0\n\nodd_numbers = filterfalse(is_even, range(10))\nprint(list(odd_numbers))"
          },
          {
            "exercise": "Control figure size with `figsize=`",
            "answer": "from itertools import dropwhile, takewhile\n\nnumbers = [1, 2, 3, 4, 5, 4, 3]\nresult = dropwhile(lambda x: x < 4, numbers)\nprint(list(result))  # [4, 5, 4, 3]"
          },
          {
            "exercise": "Export without borders or whitespace",
            "answer": "from itertools import accumulate\n\nnumbers = [1, 2, 3, 4, 5]\ncumulative_sum = accumulate(numbers)\nprint(list(cumulative_sum))  # [1, 3, 6, 10, 15]"
          }
        ]
      },
      {
        "skill": "Skill 8: Customizing Ticks and Labels",
        "exercises": [
          {
            "exercise": "Customize tick marks with `plt.xticks()` / `plt.yticks()`",
            "answer": "def generator_with_send():\n    value = 0\n    while True:\n        received = yield value\n        if received is not None:\n            value = received\n        value += 1\n\ngen = generator_with_send()\nnext(gen)  # Prime\ngen.send(10)  # Send value"
          },
          {
            "exercise": "Rotate tick labels",
            "answer": "def echo():\n    while True:\n        value = yield\n        if value:\n            print(f'Received: {value}')\n\ngen = echo()\nnext(gen)\ngen.send('hello')"
          },
          {
            "exercise": "Skillat tick labels with strings or dates",
            "answer": "def averager():\n    total = 0\n    count = 0\n    avg = 0\n    while True:\n        value = yield avg\n        total += value\n        count += 1\n        avg = total / count"
          },
          {
            "exercise": "Remove ticks or tick labels",
            "answer": "def consumer():\n    while True:\n        data = yield\n        process(data)\n\nc = consumer()\nnext(c)  # Prime\nc.send(data)"
          },
          {
            "exercise": "Use `tick_params()` for fine-grained control",
            "answer": "def coroutine():\n    result = None\n    while True:\n        value = yield result\n        result = process(value)"
          }
        ]
      },
      {
        "skill": "Skill 9: Plot Styles and Themes",
        "exercises": [
          {
            "exercise": "Use built-in styles with `plt.style.use('ggplot')`",
            "answer": "def task_manager():\n    tasks = []\n    while True:\n        task = yield\n        if task:\n            tasks.append(task)\n        else:\n            for t in tasks:\n                yield t\n            tasks.clear()"
          },
          {
            "exercise": "Explore styles like `seaborn`, `bmh`, `classic`",
            "answer": "def pipeline():\n    stage1 = (x**2 for x in range(10))\n    stage2 = (x + 1 for x in stage1)\n    stage3 = (x * 2 for x in stage2)\n    return stage3"
          },
          {
            "exercise": "Customize font sizes and line widths globally",
            "answer": "def async_generator():\n    for i in range(10):\n        yield from range(i)\n        yield i"
          },
          {
            "exercise": "Reset to default style",
            "answer": "def flatten(nested_list):\n    for item in nested_list:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item"
          },
          {
            "exercise": "Create custom style templates",
            "answer": "# Generator-based pipeline\ndef source():\n    for i in range(10):\n        yield i\n\ndef transform(gen):\n    for value in gen:\n        yield value ** 2\n\ndef sink(gen):\n    return sum(gen)\n\nresult = sink(transform(source()))"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Always use `plt.show()` when working interactively",
            "answer": "# Use generators for large data\ndef read_large_file(path):\n    with open(path) as f:\n        for line in f:\n            yield line.strip()"
          },
          {
            "exercise": "Label all axes and plots for clarity",
            "answer": "# Prefer generator expressions\nsum_of_squares = sum(x**2 for x in range(1000000))\n# Instead of:\n# sum([x**2 for x in range(1000000)])"
          },
          {
            "exercise": "Use subplots for comparing multiple datasets",
            "answer": "# Chain generators\ndef process_data():\n    raw = read_data()\n    cleaned = (clean(x) for x in raw)\n    transformed = (transform(x) for x in cleaned)\n    return transformed"
          },
          {
            "exercise": "Save plots with meaningful filenames",
            "answer": "# Handle StopIteration\ndef safe_next(gen, default=None):\n    try:\n        return next(gen)\n    except StopIteration:\n        return default"
          },
          {
            "exercise": "Preview plots before exporting in production scripts",
            "answer": "# Document generator behavior\ndef my_generator(n):\n    \"\"\"Generate first n squares.\n    \n    Yields:\n        int: Square of each number\n    \"\"\"\n    for i in range(n):\n        yield i ** 2"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 25: Virtual Environments & Pip",
    "skills": [
      {
        "skill": "Skill 1: Creating and Activating Virtual Environments",
        "exercises": [
          {
            "exercise": "Use `python -m venv env` to create a virtual environment",
            "answer": "with open('file.txt', 'r') as f:\n    content = f.read()\n# File automatically closed"
          },
          {
            "exercise": "Activate environment (Mac/Linux: `source env/bin/activate`, Windows: `env\\Scripts\\activate`)",
            "answer": "# Multiple context managers\nwith open('in.txt') as fin, open('out.txt', 'w') as fout:\n    fout.write(fin.read())"
          },
          {
            "exercise": "Confirm activation with `which python` / `where python`",
            "answer": "# Equivalent to:\nf = open('file.txt')\ntry:\n    content = f.read()\nfinally:\n    f.close()"
          },
          {
            "exercise": "Deactivate with `deactivate`",
            "answer": "import threading\n\nlock = threading.Lock()\nwith lock:\n    # Critical section\n    pass"
          },
          {
            "exercise": "Delete or recreate environment cleanly",
            "answer": "from contextlib import closing\nimport urllib.request\n\nwith closing(urllib.request.urlopen('http://example.com')) as page:\n    data = page.read()"
          }
        ]
      },
      {
        "skill": "Skill 2: Installing Packages with `pip`",
        "exercises": [
          {
            "exercise": "Install package with `pip install package_name`",
            "answer": "class FileManager:\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n    \n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.file:\n            self.file.close()\n        return False"
          },
          {
            "exercise": "Install specific version `pip install package==1.2.3`",
            "answer": "class Timer:\n    def __enter__(self):\n        self.start = time.time()\n        return self\n    \n    def __exit__(self, *args):\n        self.end = time.time()\n        self.elapsed = self.end - self.start\n\nwith Timer() as t:\n    # Code to time\n    pass\nprint(f'Took {t.elapsed}s')"
          },
          {
            "exercise": "Install multiple packages at once",
            "answer": "class DatabaseConnection:\n    def __enter__(self):\n        self.conn = connect()\n        return self.conn\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            self.conn.rollback()\n        else:\n            self.conn.commit()\n        self.conn.close()"
          },
          {
            "exercise": "Upgrade package with `pip install --upgrade`",
            "answer": "class Resource:\n    def __enter__(self):\n        print('Acquiring')\n        return self\n    \n    def __exit__(self, *args):\n        print('Releasing')\n        return False  # Don't suppress exceptions"
          },
          {
            "exercise": "Uninstall with `pip uninstall package_name`",
            "answer": "with FileManager('file.txt', 'r') as f:\n    content = f.read()"
          }
        ]
      },
      {
        "skill": "Skill 3: Managing Requirements",
        "exercises": [
          {
            "exercise": "Create `requirements.txt` with `pip freeze > requirements.txt`",
            "answer": "from contextlib import contextmanager\n\n@contextmanager\ndef file_manager(filename, mode):\n    f = open(filename, mode)\n    try:\n        yield f\n    finally:\n        f.close()"
          },
          {
            "exercise": "Install from `requirements.txt` with `pip install -r requirements.txt`",
            "answer": "@contextmanager\ndef timer():\n    start = time.time()\n    yield\n    end = time.time()\n    print(f'Took {end - start}s')\n\nwith timer():\n    # Code to time\n    pass"
          },
          {
            "exercise": "Update `requirements.txt` when packages change",
            "answer": "@contextmanager\ndef transaction(db):\n    try:\n        yield db\n        db.commit()\n    except Exception:\n        db.rollback()\n        raise"
          },
          {
            "exercise": "Use constraints files or optional extras",
            "answer": "@contextmanager\ndef temporary_directory():\n    import tempfile\n    import shutil\n    tmpdir = tempfile.mkdtemp()\n    try:\n        yield tmpdir\n    finally:\n        shutil.rmtree(tmpdir)"
          },
          {
            "exercise": "Review and audit dependencies",
            "answer": "@contextmanager\ndef chdir(path):\n    import os\n    old_dir = os.getcwd()\n    try:\n        os.chdir(path)\n        yield\n    finally:\n        os.chdir(old_dir)"
          }
        ]
      },
      {
        "skill": "Skill 4: Inspecting and Searching Packages",
        "exercises": [
          {
            "exercise": "List installed packages with `pip list`",
            "answer": "class MyContext:\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            print(f'Exception: {exc_val}')\n        return False  # Propagate exception"
          },
          {
            "exercise": "Show detailed info with `pip show package_name`",
            "answer": "@contextmanager\ndef handle_errors():\n    try:\n        yield\n    except ValueError as e:\n        print(f'Caught ValueError: {e}')\n        # Exception is suppressed"
          },
          {
            "exercise": "Search PyPI with `pip search` (deprecated) or use web search",
            "answer": "@contextmanager\ndef suppress_errors():\n    try:\n        yield\n    except Exception:\n        pass  # Suppress all exceptions"
          },
          {
            "exercise": "Use `pip check` to find dependency conflicts",
            "answer": "class SafeContext:\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            log_error(exc_val)\n            return True  # Suppress exception"
          },
          {
            "exercise": "Use `pipdeptree` (external tool) for tree view",
            "answer": "with suppress(FileNotFoundError):\n    os.remove('file.txt')"
          }
        ]
      },
      {
        "skill": "Skill 5: Working with Editable Installs",
        "exercises": [
          {
            "exercise": "Use `pip install -e .` to install in editable mode",
            "answer": "from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    os.remove('nonexistent.txt')"
          },
          {
            "exercise": "Understand when to use for local development",
            "answer": "from contextlib import redirect_stdout\nimport io\n\nf = io.StringIO()\nwith redirect_stdout(f):\n    print('Hello')\noutput = f.getvalue()"
          },
          {
            "exercise": "Install with `setup.py` or `pyproject.toml`",
            "answer": "from contextlib import nullcontext\n\nwith nullcontext() as ctx:\n    # ctx is None\n    pass"
          },
          {
            "exercise": "Link local packages across projects",
            "answer": "from contextlib import ExitStack\n\nwith ExitStack() as stack:\n    files = [stack.enter_context(open(f)) for f in filenames]\n    # All files auto-closed"
          },
          {
            "exercise": "Uninstall or reset editable packages",
            "answer": "from contextlib import closing\n\nwith closing(resource) as r:\n    r.use()"
          }
        ]
      },
      {
        "skill": "Skill 6: Virtual Environment Tools",
        "exercises": [
          {
            "exercise": "Use `virtualenv` for legacy or alternate workflows",
            "answer": "class Nested:\n    def __enter__(self):\n        with other_context():\n            # Use other context\n            pass\n        return self"
          },
          {
            "exercise": "Use `pipenv` to manage venv \\+ deps together",
            "answer": "@contextmanager\ndef nested_contexts():\n    with context1():\n        with context2():\n            yield"
          },
          {
            "exercise": "Use `poetry` for modern dependency \\+ project management",
            "answer": "with context1(), context2(), context3():\n    # All three contexts active\n    pass"
          },
          {
            "exercise": "Compare `venv`, `pipenv`, and `poetry`",
            "answer": "from contextlib import ExitStack\n\nwith ExitStack() as stack:\n    for resource in resources:\n        stack.enter_context(resource)"
          },
          {
            "exercise": "Choose the right tool for your workflow",
            "answer": "@contextmanager\ndef multi_level():\n    with outer():\n        with inner():\n            yield"
          }
        ]
      },
      {
        "skill": "Skill 7: Isolating and Sharing Projects",
        "exercises": [
          {
            "exercise": "Use `.venv/` inside project folder",
            "answer": "@contextmanager\ndef logged_operation(name):\n    print(f'Starting {name}')\n    try:\n        yield\n    finally:\n        print(f'Finished {name}')"
          },
          {
            "exercise": "Exclude virtual environments in `.gitignore`",
            "answer": "@contextmanager\ndef database_transaction(db):\n    \"\"\"Context manager for database transactions.\"\"\"\n    try:\n        yield db\n        db.commit()\n    except Exception:\n        db.rollback()\n        raise"
          },
          {
            "exercise": "Share `requirements.txt` or `pyproject.toml`",
            "answer": "class Resource:\n    \"\"\"Managed resource with logging.\"\"\"\n    def __enter__(self):\n        log('Acquiring')\n        return self\n    \n    def __exit__(self, *args):\n        log('Releasing')"
          },
          {
            "exercise": "Use virtual environments per project",
            "answer": "@contextmanager\ndef timed(label):\n    start = time.time()\n    try:\n        yield\n    finally:\n        duration = time.time() - start\n        print(f'{label}: {duration:.2f}s')"
          },
          {
            "exercise": "Avoid using global Python for anything project-specific",
            "answer": "@contextmanager\ndef atomic_write(filename):\n    tmpfile = filename + '.tmp'\n    try:\n        with open(tmpfile, 'w') as f:\n            yield f\n        os.rename(tmpfile, filename)\n    except Exception:\n        os.remove(tmpfile)\n        raise"
          }
        ]
      },
      {
        "skill": "Skill 8: Python Version Management",
        "exercises": [
          {
            "exercise": "Use `pyenv` to manage multiple Python versions",
            "answer": "# Always use context managers for resources\nwith open('file.txt') as f:\n    data = f.read()\n# Better than manual open/close"
          },
          {
            "exercise": "Set global or local Python versions",
            "answer": "# Use contextlib for simple cases\nfrom contextlib import contextmanager\n\n@contextmanager\ndef my_context():\n    setup()\n    try:\n        yield\n    finally:\n        cleanup()"
          },
          {
            "exercise": "Rebuild environments when changing Python versions",
            "answer": "# Return useful objects from __enter__\nclass MyContext:\n    def __enter__(self):\n        self.resource = acquire()\n        return self.resource"
          },
          {
            "exercise": "Test compatibility with multiple Python versions",
            "answer": "# Handle exceptions appropriately\nclass MyContext:\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        cleanup()\n        return False  # Propagate exceptions"
          },
          {
            "exercise": "Combine `pyenv` with `virtualenv`",
            "answer": "# Document context manager behavior\n@contextmanager\ndef my_manager():\n    \"\"\"Context manager that does X.\n    \n    Yields:\n        Resource object\n    \"\"\"\n    resource = acquire()\n    try:\n        yield resource\n    finally:\n        release(resource)"
          }
        ]
      },
      {
        "skill": "Skill 9: Debugging Installation Issues",
        "exercises": [
          {
            "exercise": "Use `--verbose` to debug pip installs",
            "answer": "@contextmanager\ndef managed_resource():\n    resource = Resource()\n    try:\n        resource.setup()\n        yield resource\n    finally:\n        resource.cleanup()"
          },
          {
            "exercise": "Resolve permission errors (e.g., `--user`, venv)",
            "answer": "@contextmanager\ndef with_lock(lock, timeout=10):\n    acquired = lock.acquire(timeout=timeout)\n    try:\n        yield acquired\n    finally:\n        if acquired:\n            lock.release()"
          },
          {
            "exercise": "Handle `pip install` behind proxies or firewalls",
            "answer": "@contextmanager\ndef temp_env_var(key, value):\n    import os\n    old_value = os.environ.get(key)\n    os.environ[key] = value\n    try:\n        yield\n    finally:\n        if old_value:\n            os.environ[key] = old_value\n        else:\n            del os.environ[key]"
          },
          {
            "exercise": "Troubleshoot conflicting packages",
            "answer": "@contextmanager\ndef temporary_change(obj, attr, value):\n    old_value = getattr(obj, attr)\n    setattr(obj, attr, value)\n    try:\n        yield\n    finally:\n        setattr(obj, attr, old_value)"
          },
          {
            "exercise": "Clear cache with `pip cache purge`",
            "answer": "class ConnectionPool:\n    @contextmanager\n    def connection(self):\n        conn = self.acquire()\n        try:\n            yield conn\n        finally:\n            self.release(conn)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Always use virtual environments per project",
            "answer": "# Test context managers\ndef test_context_manager():\n    with MyContext() as ctx:\n        assert ctx is not None"
          },
          {
            "exercise": "Track dependencies explicitly",
            "answer": "# Ensure cleanup happens\ndef test_cleanup():\n    with MyContext() as ctx:\n        raise Exception()\n    # Verify cleanup occurred"
          },
          {
            "exercise": "Keep `requirements.txt` up to date",
            "answer": "# Test exception handling\ndef test_exception_handling():\n    try:\n        with MyContext():\n            raise ValueError()\n    except ValueError:\n        pass  # Expected"
          },
          {
            "exercise": "Use exact versions for production environments",
            "answer": "# Mock context managers\nfrom unittest.mock import Mock, patch\n\nwith patch('module.resource') as mock_resource:\n    mock_resource.__enter__.return_value = Mock()\n    with resource() as r:\n        r.use()"
          },
          {
            "exercise": "Learn one advanced tool like `poetry` or `pipenv` thoroughly",
            "answer": "# Test with pytest\nimport pytest\n\ndef test_my_context():\n    with MyContext() as ctx:\n        result = ctx.process()\n    assert result == expected"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 26: Packaging Python Projects",
    "skills": [
      {
        "skill": "Skill 1: Project Structure Basics",
        "exercises": [
          {
            "exercise": "Create a top-level project folder with a `src/` or package directory",
            "answer": "numbers = [1, 2, 3, 4, 5]\nsquares = list(map(lambda x: x**2, numbers))\nprint(squares)  # [1, 4, 9, 16, 25]"
          },
          {
            "exercise": "Add an `__init__.py` file to define a package",
            "answer": "def square(x):\n    return x ** 2\n\nnumbers = [1, 2, 3]\nresult = list(map(square, numbers))"
          },
          {
            "exercise": "Add a `README.md` and `LICENSE`",
            "answer": "# Map with multiple iterables\na = [1, 2, 3]\nb = [4, 5, 6]\nresult = list(map(lambda x, y: x + y, a, b))\nprint(result)  # [5, 7, 9]"
          },
          {
            "exercise": "Create a `tests/` folder for unit tests",
            "answer": "strings = ['1', '2', '3']\nnumbers = list(map(int, strings))\nprint(numbers)  # [1, 2, 3]"
          },
          {
            "exercise": "Separate application logic from configuration",
            "answer": "names = ['alice', 'bob']\nupper_names = list(map(str.upper, names))\nprint(upper_names)  # ['ALICE', 'BOB']"
          }
        ]
      },
      {
        "skill": "Skill 2: Creating a `setup.py`",
        "exercises": [
          {
            "exercise": "Create a `setup.py` with `setuptools.setup()`",
            "answer": "numbers = [1, 2, 3, 4, 5, 6]\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens)  # [2, 4, 6]"
          },
          {
            "exercise": "Define project metadata: name, version, description",
            "answer": "def is_positive(x):\n    return x > 0\n\nnumbers = [-2, -1, 0, 1, 2]\npositives = list(filter(is_positive, numbers))"
          },
          {
            "exercise": "Set `packages=` with `find_packages()`",
            "answer": "words = ['', 'hello', '', 'world']\nnon_empty = list(filter(None, words))\nprint(non_empty)  # ['hello', 'world']"
          },
          {
            "exercise": "Add required dependencies with `install_requires`",
            "answer": "users = [{'age': 25}, {'age': 30}, {'age': 18}]\nadults = list(filter(lambda u: u['age'] >= 21, users))"
          },
          {
            "exercise": "Add classifiers and Python version requirement",
            "answer": "# Filter with complex condition\nnumbers = range(1, 11)\nresult = list(filter(lambda x: x % 2 == 0 and x > 5, numbers))"
          }
        ]
      },
      {
        "skill": "Skill 3: Using `pyproject.toml`",
        "exercises": [
          {
            "exercise": "Create `pyproject.toml` with `[build-system]` and `[project]`",
            "answer": "from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\ntotal = reduce(lambda x, y: x + y, numbers)\nprint(total)  # 15"
          },
          {
            "exercise": "Specify build backends like `setuptools` or `poetry`",
            "answer": "from functools import reduce\n\nnumbers = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product)  # 24"
          },
          {
            "exercise": "Add dependencies and metadata under `[project]`",
            "answer": "from functools import reduce\n\nnumbers = [5, 2, 9, 1, 7]\nmaximum = reduce(lambda x, y: x if x > y else y, numbers)\nprint(maximum)  # 9"
          },
          {
            "exercise": "Declare optional dependencies and extras",
            "answer": "from functools import reduce\n\nwords = ['hello', 'world', 'python']\nconcatenated = reduce(lambda x, y: x + ' ' + y, words)"
          },
          {
            "exercise": "Migrate from `setup.py` to `pyproject.toml` if needed",
            "answer": "from functools import reduce\n\nnumbers = [1, 2, 3, 4]\nsum_with_initial = reduce(lambda x, y: x + y, numbers, 10)\nprint(sum_with_initial)  # 20"
          }
        ]
      },
      {
        "skill": "Skill 4: Building Distributions",
        "exercises": [
          {
            "exercise": "Build project with `python -m build`",
            "answer": "add_one = lambda x: x + 1\nprint(add_one(5))  # 6"
          },
          {
            "exercise": "Create source (`.tar.gz`) and wheel (`.whl`) distributions",
            "answer": "multiply = lambda x, y: x * y\nprint(multiply(3, 4))  # 12"
          },
          {
            "exercise": "Use `twine check` to validate distribution",
            "answer": "# Sort with lambda\npairs = [(1, 'one'), (3, 'three'), (2, 'two')]\nsorted_pairs = sorted(pairs, key=lambda x: x[0])"
          },
          {
            "exercise": "Inspect built packages in `dist/`",
            "answer": "# Filter with lambda\nnumbers = [1, 2, 3, 4, 5]\nevens = list(filter(lambda x: x % 2 == 0, numbers))"
          },
          {
            "exercise": "Clean build artifacts with `rm -rf build/ dist/ *.egg-info`",
            "answer": "# Map with lambda\nnumbers = [1, 2, 3]\nsquares = list(map(lambda x: x**2, numbers))"
          }
        ]
      },
      {
        "skill": "Skill 5: Installing Locally",
        "exercises": [
          {
            "exercise": "Install project locally with `pip install .`",
            "answer": "def make_multiplier(n):\n    def multiplier(x):\n        return x * n\n    return multiplier\n\ntimes_two = make_multiplier(2)\nprint(times_two(5))  # 10"
          },
          {
            "exercise": "Install editable version with `pip install -e .`",
            "answer": "def outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nadd_five = outer(5)\nprint(add_five(3))  # 8"
          },
          {
            "exercise": "Verify installation with `pip list`",
            "answer": "def make_counter():\n    count = 0\n    def counter():\n        nonlocal count\n        count += 1\n        return count\n    return counter\n\nc = make_counter()\nprint(c())  # 1\nprint(c())  # 2"
          },
          {
            "exercise": "Test import and CLI if defined",
            "answer": "def power(exponent):\n    return lambda base: base ** exponent\n\nsquare = power(2)\ncube = power(3)"
          },
          {
            "exercise": "Use virtual environments for isolation",
            "answer": "def greeting(prefix):\n    def greet(name):\n        return f'{prefix}, {name}'\n    return greet\n\nhello = greeting('Hello')"
          }
        ]
      },
      {
        "skill": "Skill 6: Defining Entry Points",
        "exercises": [
          {
            "exercise": "Use `entry_points` to define CLI commands",
            "answer": "add = lambda x: lambda y: x + y\nresult = add(2)(3)  # 5"
          },
          {
            "exercise": "Map script name to Python function",
            "answer": "def curry(func):\n    def curried(x):\n        def inner(y):\n            return func(x, y)\n        return inner\n    return curried\n\n@curry\ndef add(x, y):\n    return x + y\n\nresult = add(2)(3)  # 5"
          },
          {
            "exercise": "Use `console_scripts` in `setup.py` or `pyproject.toml`",
            "answer": "# Partial application\nfrom functools import partial\n\ndef multiply(x, y):\n    return x * y\n\ndouble = partial(multiply, 2)\nprint(double(5))  # 10"
          },
          {
            "exercise": "Test CLI after installation",
            "answer": "from functools import partial\n\nint_from_hex = partial(int, base=16)\nprint(int_from_hex('FF'))  # 255"
          },
          {
            "exercise": "Handle command-line args with `argparse` or `click`",
            "answer": "# Currying with multiple args\nadd = lambda x: lambda y: lambda z: x + y + z\nresult = add(1)(2)(3)  # 6"
          }
        ]
      },
      {
        "skill": "Skill 7: Versioning and Metadata",
        "exercises": [
          {
            "exercise": "Choose a versioning convention (e.g., semantic)",
            "answer": "numbers = [1, 2, 3, 4, 5]\nresult = list(filter(lambda x: x % 2 == 0, \n               map(lambda x: x**2, numbers)))"
          },
          {
            "exercise": "Define `__version__` in module or use `importlib.metadata`",
            "answer": "# Pipeline with functions\ndef process(data):\n    return list(filter(lambda x: x > 0,\n               map(lambda x: x * 2, data)))"
          },
          {
            "exercise": "Set author, URL, license, and keywords",
            "answer": "from functools import reduce\n\ndata = [1, 2, 3, 4, 5]\nresult = reduce(lambda x, y: x + y,\n                map(lambda x: x**2,\n                    filter(lambda x: x % 2 == 0, data)))"
          },
          {
            "exercise": "Add long description from `README.md`",
            "answer": "# Better with comprehensions\nnumbers = [1, 2, 3, 4, 5]\nresult = [x**2 for x in numbers if x % 2 == 0]"
          },
          {
            "exercise": "Use classifiers to improve PyPI searchability",
            "answer": "def pipeline(*funcs):\n    def apply(x):\n        for func in funcs:\n            x = func(x)\n        return x\n    return apply"
          }
        ]
      },
      {
        "skill": "Skill 8: Publishing to PyPI",
        "exercises": [
          {
            "exercise": "Register an account at [pypi.org](https://pypi.org/)",
            "answer": "def pure_function(x, y):\n    return x + y  # No side effects"
          },
          {
            "exercise": "Use `twine upload dist/*` to publish",
            "answer": "# Immutable operations\noriginal = [1, 2, 3]\n# Don't: original.append(4)\n# Do:\nnew_list = original + [4]"
          },
          {
            "exercise": "Use `test.pypi.org` for dry runs",
            "answer": "# Pure vs impure\ndef pure(x):\n    return x * 2\n\ntotal = 0\ndef impure(x):\n    global total\n    total += x\n    return total"
          },
          {
            "exercise": "Store credentials securely (e.g., keyring or `.pypirc`)",
            "answer": "# Use immutable data structures\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\n# p.x = 3  # Error: can't modify"
          },
          {
            "exercise": "Publish new versions with proper changelog",
            "answer": "def process(data):\n    # Don't modify input\n    result = data.copy()\n    result.append(new_item)\n    return result"
          }
        ]
      },
      {
        "skill": "Skill 9: Dependencies and Extras",
        "exercises": [
          {
            "exercise": "Define core dependencies with `install_requires`",
            "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef expensive_operation(n):\n    return n ** 2"
          },
          {
            "exercise": "Define optional groups with `extras_require`",
            "answer": "# Memoization with dict\ndef memoize(func):\n    cache = {}\n    def wrapper(*args):\n        if args not in cache:\n            cache[args] = func(*args)\n        return cache[args]\n    return wrapper\n\n@memoize\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)"
          },
          {
            "exercise": "Add testing or dev tools under `[project.optional-dependencies]`",
            "answer": "@lru_cache(maxsize=128)\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
          },
          {
            "exercise": "Use `pip install .[dev,test]` for grouped installs",
            "answer": "# Manual memoization\ncache = {}\ndef cached_func(n):\n    if n not in cache:\n        cache[n] = expensive_computation(n)\n    return cache[n]"
          },
          {
            "exercise": "Avoid unnecessary top-level dependencies",
            "answer": "from functools import cache  # Python 3.9+\n\n@cache\ndef factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n-1)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Keep packaging config in one place",
            "answer": "# Prefer comprehensions\nsquares = [x**2 for x in range(10)]\n# Over: list(map(lambda x: x**2, range(10)))"
          },
          {
            "exercise": "Test builds and installs before publishing",
            "answer": "# Use built-in functions\ntotal = sum(numbers)\n# Over: reduce(lambda x, y: x + y, numbers)"
          },
          {
            "exercise": "Version consistently and clearly",
            "answer": "# Combine with itertools\nfrom itertools import chain, islice\n\nresult = list(islice(chain(iter1, iter2), 10))"
          },
          {
            "exercise": "Separate app logic, test logic, and CLI",
            "answer": "# Use filter/map when clear\ndef is_even(x):\n    return x % 2 == 0\n\nevens = filter(is_even, numbers)"
          },
          {
            "exercise": "Include full documentation and licensing",
            "answer": "# Document functional code\ndef process_pipeline(data):\n    \"\"\"Process data through functional pipeline.\n    \n    Args:\n        data: Input list\n    \n    Returns:\n        Processed list\n    \"\"\"\n    return list(map(transform, filter(validate, data)))"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 27: Pythonic Style & Idioms",
    "skills": [
      {
        "skill": "Skill 1: Writing Readable Code",
        "exercises": [
          {
            "exercise": "Use meaningful variable and function names",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Follow PEP8 Skillatting guidelines",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Limit lines to 79\u201388 characters",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use blank lines to separate logical sections",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use comments to explain why, not what",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Pythonic Looping",
        "exercises": [
          {
            "exercise": "Use `for item in iterable:` instead of indexing",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `enumerate()` when you need an index",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `zip()` to iterate over multiple sequences",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid `range(len(...))` unless absolutely needed",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Prefer list/set/dict comprehensions when appropriate",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Idiomatic Conditionals",
        "exercises": [
          {
            "exercise": "Use truthy/falsy values directly: `if x:`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `any()` and `all()` for collection checks",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Prefer `if not x` over `if x == False`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `x or default` and `x and y` idioms",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Chain comparisons: `if 0 < x < 10`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: EAFP vs LBYL",
        "exercises": [
          {
            "exercise": "Embrace EAFP: try first, ask forgiveness later",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `try/except` to handle likely errors",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid over-checking with `if ... in` / `hasattr()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Know when LBYL is more readable",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Write safe `try` blocks with minimal code",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Unpacking Idioms",
        "exercises": [
          {
            "exercise": "Unpack multiple values: `x, y = pair`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use starred expressions: `head, *body, tail = sequence`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `enumerate()` or `zip()` for clean iteration",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Swap variables with `a, b = b, a`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use unpacking in function calls with `*args`, `**kwargs`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 6: Dictionary Idioms",
        "exercises": [
          {
            "exercise": "Use `.get()` to avoid `KeyError`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `defaultdict` for default values",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Merge dictionaries with `{**a, **b}` or `a | b`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `.items()` in loops",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use dictionary comprehensions",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 7: String Idioms",
        "exercises": [
          {
            "exercise": "Use f-strings for Skillatting",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Chain `.strip().lower()` when normalizing",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Split and join strings idiomatically",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `.partition()` or `.split()` to extract parts",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid `+` in loops; use `.join()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 8: Pythonic Defaults and Initialization",
        "exercises": [
          {
            "exercise": "Use `or` to set default values",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `dict.get(key, default)`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid mutable default arguments",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Initialize variables clearly and simply",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use ternary: `a if condition else b`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 9: Using Built-ins Effectively",
        "exercises": [
          {
            "exercise": "Prefer built-ins like `sum()`, `max()`, `sorted()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `key=` with `min()`/`max()`/`sorted()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Combine `map()`/`filter()` with comprehensions",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `reversed()` and `enumerate()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `any()` and `all()` for concise logic",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Prefer clarity over cleverness",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Write for humans, not just for the computer",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Follow the Zen of Python (`import this`)",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Consistently lint your code",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Study idioms in real codebases",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 28: Type Hints & Static Typing",
    "skills": [
      {
        "skill": "Skill 1: Basic Type Hints",
        "exercises": [
          {
            "exercise": "Add type hints for function arguments: `def greet(name: str)`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Add return type: `-> str`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use multiple typed arguments: `def add(x: int, y: int) -> int`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Annotate variables: `count: int = 0`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Add types to class attributes",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 2: Common Built-in Types",
        "exercises": [
          {
            "exercise": "Use `int`, `str`, `float`, `bool`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `list`, `dict`, `tuple`, `set`",
            "answer": "from typing import List\n\ndef func(items: List[int]) -> int:\n    return sum(items)"
          },
          {
            "exercise": "Use `None` as a return type: `-> None`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Annotate `Optional` values: `Optional[str]`",
            "answer": "from typing import Optional\n\ndef func(x: Optional[int] = None) -> int:\n    return x if x else 0"
          },
          {
            "exercise": "Use `Any` when unsure",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 3: Typing Collections",
        "exercises": [
          {
            "exercise": "Use `List[int]`, `Dict[str, float]`, `Tuple[int, str]`",
            "answer": "from typing import List\n\ndef func(items: List[int]) -> int:\n    return sum(items)"
          },
          {
            "exercise": "Use `from typing import List, Dict, Tuple`",
            "answer": "from typing import List\n\ndef func(items: List[int]) -> int:\n    return sum(items)"
          },
          {
            "exercise": "Use `Iterable`, `Sequence`, and `Mapping` for generality",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Annotate nested collections",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `Set[T]` and `FrozenSet[T]` when applicable",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 4: Optional and Union Types",
        "exercises": [
          {
            "exercise": "Use `Optional[str]` for possibly-None values",
            "answer": "from typing import Optional\n\ndef func(x: Optional[int] = None) -> int:\n    return x if x else 0"
          },
          {
            "exercise": "Use `Union[str, int]` for multi-type values",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `|` syntax in Python 3.10+: `str | None`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Combine `Optional` and collections",
            "answer": "from typing import Optional\n\ndef func(x: Optional[int] = None) -> int:\n    return x if x else 0"
          },
          {
            "exercise": "Avoid overly complex Union chains",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 5: Callable Types",
        "exercises": [
          {
            "exercise": "Use `Callable[[int, int], int]` for functions",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `Callable[..., Any]` for flexible arguments",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Annotate callbacks and higher-order functions",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `TypeVar` for generic callables",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Combine `Callable` with `Optional`",
            "answer": "from typing import Optional\n\ndef func(x: Optional[int] = None) -> int:\n    return x if x else 0"
          }
        ]
      },
      {
        "skill": "Skill 6: Type Aliases and TypeVar",
        "exercises": [
          {
            "exercise": "Create type aliases: `UserId = int`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Define reusable complex types",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `TypeVar` to define generic functions",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Constrain `TypeVar` to base class",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use bounded `TypeVar` for subtype safety",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 7: Classes and Static Typing",
        "exercises": [
          {
            "exercise": "Annotate instance attributes",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `self: ClassName` for clarity",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Annotate `__init__()` arguments",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Type hint classmethods and staticmethods",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `@dataclass` with type hints",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 8: Advanced Typing Tools",
        "exercises": [
          {
            "exercise": "Use `Literal` for exact values",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `Annotated` for metadata",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `Final`, `ClassVar`, `NewType` where appropriate",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Define `Protocol` interfaces (Python 3.8+)",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Create parametric generics with `Generic`",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 9: Using Static Type Checkers",
        "exercises": [
          {
            "exercise": "Use `mypy` for type checking",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Add gradual typing to legacy code",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Run `mypy` via CLI or pre-commit",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use `pyright` or `pyre` for alternative tooling",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Interpret type checker output and fix issues",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Add types incrementally, not all at once",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Use types to clarify, not complicate",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Avoid over-annotating obvious code",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Prefer interfaces over concrete types",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          },
          {
            "exercise": "Keep `typeshed` and tooling up to date",
            "answer": "from typing import Any\n\ndef func(x: Any) -> Any:\n    return x"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 29: Testing & Pytest",
    "skills": [
      {
        "skill": "Skill 1: Basics of Unit Testing",
        "exercises": [
          {
            "exercise": "Understand the purpose of testing",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Write your first test function using `def test_...():`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use `assert` to check correctness",
            "answer": "assert x == expected"
          },
          {
            "exercise": "Group tests in a `tests/` folder",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use meaningful test names",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 2: Installing and Running Pytest",
        "exercises": [
          {
            "exercise": "Install with `pip install pytest`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Run tests with `pytest` in terminal",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Run specific test files: `pytest tests/test_file.py`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use `-v` for verbose output",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Rerun failed tests only: `pytest --lf`",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 3: Writing Effective Assertions",
        "exercises": [
          {
            "exercise": "Assert equality with `assert x == y`",
            "answer": "assert x == expected"
          },
          {
            "exercise": "Use `assert isinstance(obj, Type)`",
            "answer": "assert x == expected"
          },
          {
            "exercise": "Check containment: `assert x in y`",
            "answer": "assert x == expected"
          },
          {
            "exercise": "Use `assert not` for negative cases",
            "answer": "assert x == expected"
          },
          {
            "exercise": "Add helpful failure messages",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 4: Structuring Test Files",
        "exercises": [
          {
            "exercise": "Organize by module or feature",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use consistent naming: `test_*.py`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Group related tests in classes (no `self` needed)",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Separate unit vs integration tests",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Add docstrings to describe test goals",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 5: Fixtures",
        "exercises": [
          {
            "exercise": "Use `@pytest.fixture` to set up reusable data",
            "answer": "@pytest.fixture\ndef my_fixture():\n    return value"
          },
          {
            "exercise": "Pass fixture as argument to test",
            "answer": "@pytest.fixture\ndef my_fixture():\n    return value"
          },
          {
            "exercise": "Use `scope=\"module\"` or `scope=\"session\"` for sharing",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Combine fixtures with setup logic",
            "answer": "@pytest.fixture\ndef my_fixture():\n    return value"
          },
          {
            "exercise": "Yield teardown steps after test runs",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 6: Parametrized Tests",
        "exercises": [
          {
            "exercise": "Use `@pytest.mark.parametrize()` to test multiple cases",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Provide argument names and test data",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Add test IDs for clarity in output",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use parametrization to reduce code duplication",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Nest parametrized fixtures if needed",
            "answer": "@pytest.fixture\ndef my_fixture():\n    return value"
          }
        ]
      },
      {
        "skill": "Skill 7: Mocking and Patching",
        "exercises": [
          {
            "exercise": "Use `unittest.mock.patch()` to replace dependencies",
            "answer": "from unittest.mock import Mock\n\nmock_obj = Mock()\nmock_obj.method.return_value = 'value'"
          },
          {
            "exercise": "Patch functions or objects in-place",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Mock return values and side effects",
            "answer": "from unittest.mock import Mock\n\nmock_obj = Mock()\nmock_obj.method.return_value = 'value'"
          },
          {
            "exercise": "Use `MagicMock()` for general mocks",
            "answer": "from unittest.mock import Mock\n\nmock_obj = Mock()\nmock_obj.method.return_value = 'value'"
          },
          {
            "exercise": "Assert that mocks were called correctly",
            "answer": "assert x == expected"
          }
        ]
      },
      {
        "skill": "Skill 8: Expected Failures and Exceptions",
        "exercises": [
          {
            "exercise": "Test raised errors with `pytest.raises(Exception)`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Match exception message content",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use `xfail` for tests expected to fail",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use `skip` to conditionally skip tests",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Use `assert` inside `raises()` context",
            "answer": "assert x == expected"
          }
        ]
      },
      {
        "skill": "Skill 9: Coverage and Reporting",
        "exercises": [
          {
            "exercise": "Install `pytest-cov` plugin",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Run tests with coverage: `pytest --cov=package_name`",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Generate terminal and HTML reports",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Identify untested branches",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Set minimum coverage threshold",
            "answer": "def test_example():\n    assert True"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Write tests early, not just after coding",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Keep tests fast and isolated",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Avoid complex test logic",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Test both happy and edge cases",
            "answer": "def test_example():\n    assert True"
          },
          {
            "exercise": "Automate testing with pre-commit or CI",
            "answer": "def test_example():\n    assert True"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 30: Decorators & Metaprogramming",
    "skills": [
      {
        "skill": "Skill 1: Functions as First-Class Citizens",
        "exercises": [
          {
            "exercise": "Assign a function to a variable",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Pass a function as an argument",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Return a function from a function",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Store functions in lists or dicts",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `callable()` to check if an object is a function",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Basic Decorator Syntax",
        "exercises": [
          {
            "exercise": "Define a decorator: a function that returns a wrapper",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `@decorator_name` to apply a decorator",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Access arguments inside the wrapper",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Return the result of the wrapped function",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Apply multiple decorators in sequence",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Writing Custom Decorators",
        "exercises": [
          {
            "exercise": "Write a logging decorator",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Write a timing decorator",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Write a decorator to validate inputs",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Add error handling via decorators",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Nest decorators for composition",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Using `functools.wraps`",
        "exercises": [
          {
            "exercise": "Import and apply `@wraps(original_func)`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Preserve original function metadata",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Access `__name__`, `__doc__`, etc. after wrapping",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid bugs in introspection tools and docs",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Explain why this is important for debugging",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Decorators with Arguments",
        "exercises": [
          {
            "exercise": "Write a decorator factory (a function returning a decorator)",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Accept and use arguments inside the outer function",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Maintain correct closure structure",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Add optional arguments with default values",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Combine arguments and `@wraps` usage",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 6: Class-Based Decorators",
        "exercises": [
          {
            "exercise": "Define a class with `__init__` and `__call__`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Apply class-based decorators like functions",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Store state between calls",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Compare class-based and function-based decorators",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use for complex stateful logic",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 7: Property Decorators",
        "exercises": [
          {
            "exercise": "Use `@property` to make method act like attribute",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Add a setter with `@property_name.setter`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Add a deleter with `@property_name.deleter`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Protect internal state with properties",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use docstrings to describe virtual attributes",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 8: Metaprogramming Tools",
        "exercises": [
          {
            "exercise": "Use `getattr()`, `setattr()`, `hasattr()` for dynamic access",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `type()` to inspect or create classes",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Dynamically create a class with `type()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Use `globals()` and `locals()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Inspect objects with `__dict__`, `dir()`, `vars()`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 9: `__new__` and `__init_subclass__`",
        "exercises": [
          {
            "exercise": "Use `__new__` for customizing object creation",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Control subclass behavior with `__init_subclass__`",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Track subclasses or enforce interface",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Dynamically modify classes at definition time",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Compare use cases with decorators and metaclasses",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Keep decorators focused and composable",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Always use `@wraps` to preserve metadata",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Avoid magic that hides too much logic",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Prefer functions over metaclasses unless necessary",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          },
          {
            "exercise": "Document decorated behavior clearly",
            "answer": "# Example code\nresult = process_data()\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 31: Concurrency with `threading` and `multiprocessing`",
    "skills": [
      {
        "skill": "Skill 1: Understanding Concurrency Basics",
        "exercises": [
          {
            "exercise": "Define the difference between concurrency and parallelism",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Understand Python's Global Interpreter Lock (GIL)",
            "answer": "import threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Critical section\n    shared_resource += 1"
          },
          {
            "exercise": "Identify when to use threads vs processes",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Recognize I/O-bound vs CPU-bound tasks",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use timing benchmarks to reveal bottlenecks",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      },
      {
        "skill": "Skill 2: Threading Basics",
        "exercises": [
          {
            "exercise": "Create a basic thread using `threading.Thread(target=...)`",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Start and join threads",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Pass arguments to thread functions",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Use `threading.active_count()` to inspect thread usage",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Use `name` attribute to identify threads",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          }
        ]
      },
      {
        "skill": "Skill 3: Thread Synchronization",
        "exercises": [
          {
            "exercise": "Use `threading.Lock()` to prevent race conditions",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Use `with lock:` syntax for safe access",
            "answer": "import threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Critical section\n    shared_resource += 1"
          },
          {
            "exercise": "Use `RLock`, `Semaphore`, and `Event` when needed",
            "answer": "import threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Critical section\n    shared_resource += 1"
          },
          {
            "exercise": "Share resources safely among threads",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Detect deadlocks and avoid nested locking",
            "answer": "import threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Critical section\n    shared_resource += 1"
          }
        ]
      },
      {
        "skill": "Skill 4: Using ThreadPoolExecutor",
        "exercises": [
          {
            "exercise": "Use `concurrent.futures.ThreadPoolExecutor()`",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Submit tasks with `.submit()` or `.map()`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Collect results with `.result()` or list comprehensions",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Compare perSkillance to standard threads",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Cancel or timeout long-running thread tasks",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          }
        ]
      },
      {
        "skill": "Skill 5: Multiprocessing Basics",
        "exercises": [
          {
            "exercise": "Import and create `multiprocessing.Process`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Start and join processes",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Pass data between processes using arguments",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Observe separate memory space between processes",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use `__name__ == \"__main__\"` guard to prevent recursion",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      },
      {
        "skill": "Skill 6: Process Communication",
        "exercises": [
          {
            "exercise": "Use `Queue()` to safely share data",
            "answer": "import queue\nimport threading\n\nq = queue.Queue()\nq.put(item)\nitem = q.get()"
          },
          {
            "exercise": "Use `Pipe()` for two-way communication",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use `Value` and `Array` for shared memory",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Monitor `is_alive()` and `.exitcode`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Avoid blocking calls or deadlocks",
            "answer": "import threading\n\nlock = threading.Lock()\n\nwith lock:\n    # Critical section\n    shared_resource += 1"
          }
        ]
      },
      {
        "skill": "Skill 7: Using ProcessPoolExecutor",
        "exercises": [
          {
            "exercise": "Use `concurrent.futures.ProcessPoolExecutor()`",
            "answer": "from multiprocessing import Pool\n\ndef worker(x):\n    return x ** 2\n\nwith Pool(4) as pool:\n    results = pool.map(worker, range(10))"
          },
          {
            "exercise": "Use `.submit()` to offload CPU-bound tasks",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Compare speed with threads on CPU-heavy functions",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Handle errors with `try/except` around `.result()`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Limit number of workers with `max_workers`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      },
      {
        "skill": "Skill 8: Timing and Profiling Concurrency",
        "exercises": [
          {
            "exercise": "Use `time.perf_counter()` to benchmark perSkillance",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Compare sequential, threaded, and multiprocessed versions",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Measure resource usage with `psutil`",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use logging to trace thread/process behavior",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Visualize concurrency with timelines or flame graphs",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      },
      {
        "skill": "Skill 9: Debugging Concurrency",
        "exercises": [
          {
            "exercise": "Use logging with thread names",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Watch for shared state and mutability issues",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use thread-safe queues and immutables",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Add timeouts and retries to avoid hangs",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Test with artificial race conditions",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Use threads for I/O-bound, processes for CPU-bound",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Prefer `Executor` APIs over manual threading",
            "answer": "import threading\n\ndef worker():\n    print('Working')\n\nthread = threading.Thread(target=worker)\nthread.start()\nthread.join()"
          },
          {
            "exercise": "Avoid shared state where possible",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Use multiprocessing cautiously on Windows",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          },
          {
            "exercise": "Profile, test, and document concurrent logic",
            "answer": "import threading\n\nthread = threading.Thread(target=function)\nthread.start()"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 32: Async IO with `asyncio`",
    "skills": [
      {
        "skill": "Skill 1: Async IO Fundamentals",
        "exercises": [
          {
            "exercise": "Understand the difference between `async` and `threading`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Define event loops and cooperative multitasking",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Identify I/O-bound workloads suitable for `asyncio`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Compare blocking vs non-blocking calls",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `time.sleep()` vs `asyncio.sleep()`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 2: Defining Async Functions",
        "exercises": [
          {
            "exercise": "Declare a coroutine with `async def`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `await` to pause until result is ready",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Await another coroutine or task",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Understand \"awaitable\" objects",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Catch errors inside async functions",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 3: Running Coroutines",
        "exercises": [
          {
            "exercise": "Use `asyncio.run()` to start the event loop",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Run nested coroutines using `await`",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Compare `await` vs `yield from` (legacy)",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Understand top-level await in REPLs and notebooks",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Use `main()` async wrappers for real scripts",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 4: Creating and Managing Tasks",
        "exercises": [
          {
            "exercise": "Create tasks with `asyncio.create_task()`",
            "answer": "import asyncio\n\ntask = asyncio.create_task(coroutine())\nresult = await task"
          },
          {
            "exercise": "Run tasks concurrently",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Await multiple tasks with `asyncio.gather()`",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Use `asyncio.wait()` for more control",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Cancel tasks safely",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 5: Using Async Context Managers",
        "exercises": [
          {
            "exercise": "Use `async with` to manage async resources",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Create your own `__aenter__` / `__aexit__`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `aiofiles` to read/write files asynchronously",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `async with` for HTTP requests or DB connections",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Clean up resources even on error",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 6: Queues and Coordination",
        "exercises": [
          {
            "exercise": "Use `asyncio.Queue` for producer/consumer patterns",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "`await queue.put()` and `await queue.get()`",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Use `queue.task_done()` and `join()`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Limit concurrency with semaphores or bounded queues",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Prevent deadlocks and starvation",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 7: Timeouts and Error Handling",
        "exercises": [
          {
            "exercise": "Use `asyncio.wait_for()` with timeouts",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `asyncio.timeout()` context manager (Python 3.11+)",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Catch `asyncio.TimeoutError` gracefully",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `shield()` to protect important coroutines",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Cancel tasks safely and handle exceptions",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 8: Async HTTP Requests",
        "exercises": [
          {
            "exercise": "Install and import `aiohttp`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Use `aiohttp.ClientSession()` to make requests",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Await GET and POST requests",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Handle timeouts and connection errors",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Stream or chunk large responses",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 9: Combining Async with Sync Code",
        "exercises": [
          {
            "exercise": "Use `run_in_executor()` to call sync functions",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Avoid blocking the event loop",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Identify and isolate slow sync code",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Wrap legacy libraries in threads if needed",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Consider `trio` or `curio` for alt async models",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      },
      {
        "skill": "Skill 10: Best Practices",
        "exercises": [
          {
            "exercise": "Never block in async code \u2014 always `await` I/O",
            "answer": "async def example():\n    result = await async_function()\n    return result"
          },
          {
            "exercise": "Use `gather()` for concurrent coroutines",
            "answer": "import asyncio\n\nresults = await asyncio.gather(task1(), task2(), task3())"
          },
          {
            "exercise": "Prefer high-level libraries like `aiohttp`, `aiosqlite`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Keep async code modular and readable",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          },
          {
            "exercise": "Test async code with `pytest-asyncio` or `anyio`",
            "answer": "import asyncio\n\nasync def main():\n    await asyncio.sleep(1)\n    return 'done'\n\nasyncio.run(main())"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 33: The `collections` Module",
    "skills": [
      {
        "skill": "Skill 1: `Counter`",
        "exercises": [
          {
            "exercise": "Count items in a list or string",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Get most common elements",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use arithmetic operations between counters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.elements()` and `.subtract()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert to dictionary",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: `defaultdict`",
        "exercises": [
          {
            "exercise": "Automatically create default values",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use with `int`, `list`, `set`, or custom factories",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid `KeyError` without checks",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert back to regular `dict`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Combine with loops to group or count",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: `namedtuple`",
        "exercises": [
          {
            "exercise": "Create immutable, tuple-like objects with named fields",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Access fields by name and position",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Unpack just like a tuple",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add defaults and methods with `_replace()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use as a lightweight alternative to a class",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: `deque`",
        "exercises": [
          {
            "exercise": "Append and pop from both ends",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use as a stack or queue",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Rotate elements",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Limit size with `maxlen`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use thread-safe operations",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: `OrderedDict`",
        "exercises": [
          {
            "exercise": "Remember insertion order (pre-3.7)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Reorder with `move_to_end()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Compare ordering-sensitive dictionaries",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use for LRU caches",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert between `dict` and `OrderedDict`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 34: The `itertools` Module",
    "skills": [
      {
        "skill": "Skill 1: Infinite Iterators",
        "exercises": [
          {
            "exercise": "Use `count()` to generate numbers",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `cycle()` to repeat a sequence",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `repeat()` to emit values",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Iterators That Terminate",
        "exercises": [
          {
            "exercise": "`accumulate()` running totals",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`chain()` multiple iterables",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`compress()` with a mask",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`dropwhile()` and `takewhile()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "`islice()` for slicing iterables",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Combinatorics Tools",
        "exercises": [
          {
            "exercise": "Use `product()` for cartesian products",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `permutations()` and `combinations()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `combinations_with_replacement()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Filter combinations with conditions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Count or deduplicate efficiently",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Grouping and Chunking",
        "exercises": [
          {
            "exercise": "Use `groupby()` with sorted data",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Group elements based on key function",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Combine `groupby()` with `itemgetter()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Chunk sequences with `islice()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Build custom chunking with `zip` and iterators",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Efficiency Patterns",
        "exercises": [
          {
            "exercise": "Combine with `map`, `filter`, and comprehensions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use laziness to handle large data",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Debug with `list()` conversion (careful\\!)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Compose multiple tools for pipelines",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `tee()` to copy iterators",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 35: Advanced `re` Techniques",
    "skills": [
      {
        "skill": "Skill 1: Review of Core `re` Syntax",
        "exercises": [
          {
            "exercise": "Use `.` `*` `+` `?` and `[]`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use anchors: `^`, `$`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Grouping with `()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Escaping special characters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use raw strings: `r\"pattern\"`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Matching and Searching",
        "exercises": [
          {
            "exercise": "`re.match()` vs `re.search()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Find all matches with `re.findall()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `re.finditer()` for perSkillance",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Match whole words and boundaries",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Extract groups with `.group(n)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Substitution and Splitting",
        "exercises": [
          {
            "exercise": "Use `re.sub()` to clean or transSkill text",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Reference groups in substitutions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `re.split()` with complex delimiters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add flags like `re.IGNORECASE`, `re.DOTALL`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use compiled patterns for speed",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Named Groups and Advanced Syntax",
        "exercises": [
          {
            "exercise": "Use named groups: `(?P<name>...)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `(?P=name)` to back-reference",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Non-capturing groups: `(?:...)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Lookahead and lookbehind assertions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `re.VERBOSE` for complex expressions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Regex Best Practices",
        "exercises": [
          {
            "exercise": "Prefer readability and testability",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use raw strings for patterns",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Pre-compile regex if used repeatedly",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Validate input or sanitize outputs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Don\u2019t overuse regex for problems that don\u2019t need it",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 36: Using the `dataclasses` Module",
    "skills": [
      {
        "skill": "Skill 1: Declaring a Basic Dataclass",
        "exercises": [
          {
            "exercise": "Use `@dataclass` decorator",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Define type-annotated fields",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Instantiate and access attributes",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Compare with `__init__` \\+ class",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Understand `repr`, `eq`, `order`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 2: Customizing Field Behavior",
        "exercises": [
          {
            "exercise": "Use `field(default=...)`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `default_factory`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Exclude fields from `repr`, `compare`, etc.",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Make fields init-only or frozen",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `InitVar` for pre/post-processing",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 3: Immutability and Hashability",
        "exercises": [
          {
            "exercise": "Use `frozen=True` for immutable instances",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Understand `__hash__` and equality",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use in sets and dict keys",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Avoid mutable defaults",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Combine frozen with default\\_factory for safety",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 4: Post-Init and Class Methods",
        "exercises": [
          {
            "exercise": "Use `__post_init__()` for validation",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `classmethod` constructors",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Add utility methods like `.as_dict()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Combine with type hints and validation",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Add docstrings to generated classes",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 5: Integration and Best Practices",
        "exercises": [
          {
            "exercise": "Use with `pydantic` or `attrs` as alternatives",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use in testing for expected structures",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Avoid logic-heavy methods in dataclasses",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Compose with other dataclasses",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `slots=True` (Python 3.10+) for memory savings",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 37: Working with `pathlib` and the Filesystem",
    "skills": [
      {
        "skill": "Skill 1: Getting Started with `pathlib`",
        "exercises": [
          {
            "exercise": "Create a `Path` object",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Join paths with `/`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Resolve absolute vs relative paths",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.name`, `.stem`, `.suffix`, `.parent`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Check existence and type",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: File and Directory Operations",
        "exercises": [
          {
            "exercise": "Create and remove files with `touch()` and `unlink()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create directories with `mkdir()` and `mkdir(parents=True)`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "List contents with `.iterdir()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Traverse recursively with `.rglob()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Rename, move, or copy with `.rename()`, `.replace()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Reading and Writing Files",
        "exercises": [
          {
            "exercise": "Use `.read_text()` and `.write_text()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.read_bytes()` for binary files",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Open files with `with path.open()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use file encodings explicitly",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Stream large files with chunking",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Cross-PlatSkill Path Safety",
        "exercises": [
          {
            "exercise": "Use `Path.cwd()` and `Path.home()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid string paths when possible",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Normalize paths with `.resolve()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `os.path` interop with `.as_posix()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid hardcoding `/` or `\\\\`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices",
        "exercises": [
          {
            "exercise": "Prefer `pathlib` over `os` and `os.path`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Always use `with` for file I/O",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Handle missing paths gracefully",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Wrap path logic in utility functions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Test path code across platSkills",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 38: Parsing and Serializing with `json`, `csv`, and `xml`",
    "skills": [
      {
        "skill": "Skill 1: Working with `json`",
        "exercises": [
          {
            "exercise": "Parse JSON with `json.loads()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert Python objects with `json.dumps()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Read/write JSON files using `json.load()` and `json.dump()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `indent=2` and `sort_keys=True` for pretty output",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Handle encoding errors and non-serializable types",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Serializing Custom Objects",
        "exercises": [
          {
            "exercise": "Serialize custom objects using `default=` parameter",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `asdict()` from `dataclasses` with `json.dump()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Parse nested JSON structures into Python dicts/lists",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `object_hook` to deserialize into custom objects",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Handle datetime and decimal values",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Working with `csv`",
        "exercises": [
          {
            "exercise": "Read CSV files using `csv.reader()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Write CSV files using `csv.writer()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `csv.DictReader()` and `DictWriter()` for clarity",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Handle headers, delimiters, and quoting",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Work with large files using streaming",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: XML with `ElementTree`",
        "exercises": [
          {
            "exercise": "Parse XML with `ET.fromstring()` and `ET.parse()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Navigate with `.find()`, `.findall()`, `.attrib`, and `.text`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Modify nodes and attributes",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create and write XML documents",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert XML to/from other Skillats",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices",
        "exercises": [
          {
            "exercise": "Always handle encoding explicitly",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Validate incoming data structures",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid loading untrusted XML (`defusedxml`)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use context managers for file I/O",
            "answer": "class ContextManager:\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        pass"
          },
          {
            "exercise": "Benchmark Skillats if perSkillance matters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 39: Building CLIs with `argparse` and `click`",
    "skills": [
      {
        "skill": "Skill 1: Command-Line Basics",
        "exercises": [
          {
            "exercise": "Use `sys.argv` to inspect arguments",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Parse simple arguments manually",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `input()` and `print()` for basic prompts",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Exit with `sys.exit()` codes",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Run scripts with custom CLI flags",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Using `argparse`",
        "exercises": [
          {
            "exercise": "Create an `ArgumentParser`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add required and optional arguments",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `type=`, `help=`, and `default=`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Parse args and use `args.varname`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Display usage and help",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Subcommands and Advanced Parsing",
        "exercises": [
          {
            "exercise": "Add subcommands with `add_subparsers()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Validate arguments with custom types",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `choices=` to restrict inputs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Group arguments for clarity",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `argparse.FileType`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Using `click` for Modern CLI Apps",
        "exercises": [
          {
            "exercise": "Decorate CLI entry point with `@click.command()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add options and arguments with `@click.option()` / `@click.argument()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `click.prompt()`, `click.confirm()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create nested commands with `@click.group()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use colors, progress bars, and environment variables",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: CLI Design & Best Practices",
        "exercises": [
          {
            "exercise": "Give clear and descriptive help messages",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Validate input gracefully",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Structure CLI scripts into reusable functions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Separate parsing and logic layers",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Follow UNIX conventions: exit codes, stdout/stderr, piping",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 40: Web APIs with `requests` and `httpx`",
    "skills": [
      {
        "skill": "Skill 1: Using `requests` for HTTP",
        "exercises": [
          {
            "exercise": "Make a `GET` request with `requests.get()`",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          },
          {
            "exercise": "Access `.text`, `.json()`, `.status_code`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Send data with `POST` and `requests.post()`",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          },
          {
            "exercise": "Pass query parameters and headers",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Handle errors with `raise_for_status()`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          }
        ]
      },
      {
        "skill": "Skill 2: Sending Data",
        "exercises": [
          {
            "exercise": "Send JSON using `json=`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Send Skill-encoded data with `data=`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Upload files with `files=`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Use custom headers",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Debug requests with logging",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          }
        ]
      },
      {
        "skill": "Skill 3: Sessions and Authentication",
        "exercises": [
          {
            "exercise": "Use `requests.Session()` to persist cookies",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          },
          {
            "exercise": "Add `auth=(username, password)`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Use bearer tokens with headers",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Refresh tokens manually or automatically",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Inspect cookies and redirect history",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          }
        ]
      },
      {
        "skill": "Skill 4: Using `httpx` for Async HTTP",
        "exercises": [
          {
            "exercise": "Install and import `httpx.AsyncClient()`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Make async requests with `await client.get()`",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          },
          {
            "exercise": "Use context manager to close connections",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Combine with `asyncio.gather()`",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Compare `requests` vs `httpx` for API use",
            "answer": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()"
          }
        ]
      },
      {
        "skill": "Skill 5: API Integration Best Practices",
        "exercises": [
          {
            "exercise": "Use retry logic for flaky endpoints",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Handle timeouts and rate limits",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Validate API responses with `.json()` and schema checks",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Abstract API logic into reusable functions",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          },
          {
            "exercise": "Log all interactions for reproducibility",
            "answer": "import requests\n\nresponse = requests.get(url)\nprint(response.status_code)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 41: SQL & Databases in Python (`sqlite3`, `SQLAlchemy`)",
    "skills": [
      {
        "skill": "Skill 1: Using `sqlite3` with Raw SQL",
        "exercises": [
          {
            "exercise": "Connect to a database with `sqlite3.connect()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Create a cursor and execute queries",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `?` placeholders to prevent SQL injection",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Commit transactions and close connections",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Fetch rows with `.fetchone()`, `.fetchall()`, `.fetchmany()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 2: Schema and Table Management",
        "exercises": [
          {
            "exercise": "Create tables with `CREATE TABLE IF NOT EXISTS`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Insert data into tables",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Read, update, delete rows",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `AUTOINCREMENT` and primary keys",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `with conn:` for transaction safety",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 3: Introducing SQLAlchemy Core",
        "exercises": [
          {
            "exercise": "Install and import `sqlalchemy`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Define `Table`, `Column`, and metadata",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Create engine and connect",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Build and execute `SELECT`, `INSERT`, etc.",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Reflect existing tables with `MetaData`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 4: SQLAlchemy ORM",
        "exercises": [
          {
            "exercise": "Define ORM models with classes",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `Base = declarative_base()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Create a `Session` and commit data",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Query with `session.query().filter()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Update and delete ORM objects",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices with SQL in Python",
        "exercises": [
          {
            "exercise": "Use parameterized queries",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use connection pooling in production",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Abstract DB logic into a data access layer",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Separate schema setup from app logic",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Write tests with in-memory SQLite",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 42: Jupyter Notebooks & Interactive Workflows",
    "skills": [
      {
        "skill": "Skill 1: Getting Started with Notebooks",
        "exercises": [
          {
            "exercise": "Launch Jupyter with `jupyter notebook` or `lab`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create and rename `.ipynb` files",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Run and re-run cells interactively",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use Markdown cells for notes",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Save checkpoints and version history",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Working with Code Cells",
        "exercises": [
          {
            "exercise": "Use Shift+Enter to run a cell",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `print()` vs implicit output",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Store variables and reuse across cells",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Import libraries at the top",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Restart kernel to clear state",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Interactive Tools",
        "exercises": [
          {
            "exercise": "Use `input()` and widgets",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `%time` and `%timeit` for perSkillance",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `%matplotlib inline` for plots",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `%%bash`, `%%writefile`, etc. magics",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Integrate pandas and visualization workflows",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Organizing and Sharing Notebooks",
        "exercises": [
          {
            "exercise": "Use headings and structure for clarity",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Export notebooks to HTML or PDF",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Share via GitHub or nbviewer",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use version control for `.ipynb` files",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid storing outputs in Git (use `.gitignore`)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices",
        "exercises": [
          {
            "exercise": "Keep cells short and focused",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid hidden state; restart frequently",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use notebooks for exploration, scripts for production",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add titles, sections, and comments",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Refactor logic into `.py` modules as needed",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 43: Data Science Patterns with `pandas`",
    "skills": [
      {
        "skill": "Skill 1: DataFrames and Series",
        "exercises": [
          {
            "exercise": "Create DataFrames from dicts or CSV",
            "answer": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nprint(df.head())"
          },
          {
            "exercise": "Access columns and rows (`df['col']`, `.loc`, `.iloc`)",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Inspect data with `.head()`, `.info()`, `.describe()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Convert columns to appropriate types",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Set and reset indexes",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 2: Data Cleaning",
        "exercises": [
          {
            "exercise": "Handle missing data with `.isna()`, `.fillna()`, `.dropna()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Rename columns and reindex",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Filter rows using boolean masks",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `.astype()` for type conversion",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Strip whitespace and clean strings",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 3: Aggregation and Grouping",
        "exercises": [
          {
            "exercise": "Use `.groupby()` and `.agg()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Count values and calculate means",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `.pivot_table()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Group by multiple columns",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Chain operations with method chaining",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 4: Data TransSkillation",
        "exercises": [
          {
            "exercise": "Apply functions with `.apply()` and `.map()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Vectorize computations over columns",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `.merge()`, `.join()`, and `.concat()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Sort with `.sort_values()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Drop duplicates and combine datasets",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices",
        "exercises": [
          {
            "exercise": "Use `.copy()` to avoid view/setting warnings",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Avoid loops; prefer vectorized ops",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Document transSkillations clearly",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Profile data size and memory usage",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Validate data before analysis",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 44: Data Visualization with `seaborn`, `plotly`, and `matplotlib`",
    "skills": [
      {
        "skill": "Skill 1: Basic Matplotlib Use",
        "exercises": [
          {
            "exercise": "Create line and bar plots with `plt.plot()` / `plt.bar()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Label axes and title plots",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `plt.show()` to render",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Save figures to file",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use subplots with `plt.subplots()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 2: Seaborn for Statistical Plots",
        "exercises": [
          {
            "exercise": "Create histograms, boxplots, and violin plots",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `sns.scatterplot()` and `sns.lineplot()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use hue/style/size for categories",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use `sns.pairplot()` for quick EDA",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Customize plots with themes",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 3: Interactive Plotting with Plotly",
        "exercises": [
          {
            "exercise": "Use `plotly.express.scatter()` and `line()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Add hover text and tooltips",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Add dropdown filters and sliders",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Create subplots and dashboards",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Export to HTML or image",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 4: Visualization Best Practices",
        "exercises": [
          {
            "exercise": "Choose the right chart type for your goal",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Avoid misleading axes or proportions",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Label everything: title, axes, legend",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use consistent color and size",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Ensure accessibility and readability",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      },
      {
        "skill": "Skill 5: Integrating with Pandas",
        "exercises": [
          {
            "exercise": "Plot directly from `df.plot()`",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Use seaborn on DataFrames",
            "answer": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nprint(df.head())"
          },
          {
            "exercise": "Plot groupby results",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          },
          {
            "exercise": "Annotate pandas plots",
            "answer": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nprint(df.head())"
          },
          {
            "exercise": "Skillat date/time axes in time series",
            "answer": "import numpy as np\n\ndata = np.array([1, 2, 3])\nprint(data.mean())"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 45: Intro to Machine Learning with `scikit-learn`",
    "skills": [
      {
        "skill": "Skill 1: Core Concepts",
        "exercises": [
          {
            "exercise": "Define supervised vs unsupervised learning",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Split data into train/test sets",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Choose appropriate model types",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Fit and predict using `.fit()` and `.predict()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `accuracy_score` to evaluate",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Working with Pipelines",
        "exercises": [
          {
            "exercise": "Use `train_test_split()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create a `Pipeline` with preprocessing and model",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Scale data with `StandardScaler`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `ColumnTransSkiller` for mixed data",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Evaluate with `cross_val_score()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Classification Models",
        "exercises": [
          {
            "exercise": "Train `LogisticRegression` and `RandomForestClassifier`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Plot confusion matrices",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Get feature importances",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `classification_report()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Tune hyperparameters with `GridSearchCV`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Regression Models",
        "exercises": [
          {
            "exercise": "Use `LinearRegression`, `Ridge`, and `SVR`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Plot residuals",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Calculate MSE, RMSE, and R\u00b2",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Detect and remove outliers",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Evaluate with cross-validation",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Unsupervised Learning",
        "exercises": [
          {
            "exercise": "Cluster with `KMeans`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Visualize clusters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `PCA` to reduce dimensions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Interpret principal components",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `DBSCAN` for noise-tolerant clustering",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 46: Deep Learning with PyTorch",
    "skills": [
      {
        "skill": "Skill 1: PyTorch Basics",
        "exercises": [
          {
            "exercise": "Install and import `torch`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create tensors with `torch.tensor()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Inspect shapes, data types, and devices",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.numpy()` and `torch.from_numpy()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Move tensors to GPU with `.to('cuda')`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Building Neural Networks",
        "exercises": [
          {
            "exercise": "Use `nn.Module` to define models",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Stack layers with `nn.Sequential()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Choose activation functions (`ReLU`, `Sigmoid`, etc.)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Print model summaries and parameters",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Initialize weights",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Training a Model",
        "exercises": [
          {
            "exercise": "Define loss function and optimizer",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Run forward and backward passes",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.backward()` and `.step()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Zero gradients with `.zero_grad()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Track training loss and accuracy",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Data Loading with `torch.utils.data`",
        "exercises": [
          {
            "exercise": "Create datasets from tensors or CSVs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `DataLoader` for batching and shuffling",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Define custom `Dataset` classes",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Combine transSkills using `torchvision.transSkills`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Load image datasets",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Evaluation and Inference",
        "exercises": [
          {
            "exercise": "Switch model to eval mode with `.eval()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Disable gradients with `torch.no_grad()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Load and save models with `torch.save()` and `torch.load()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Run inference and compare predictions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Visualize predictions and metrics",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 47: Deep Learning with TensorFlow",
    "skills": [
      {
        "skill": "Skill 1: TensorFlow and Keras Basics",
        "exercises": [
          {
            "exercise": "Install and import `tensorflow`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create tensors and inspect shape/dtype",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `tf.constant`, `tf.Variable`, and basic ops",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Move tensors between devices",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Convert to/from NumPy",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Building a Model with Keras",
        "exercises": [
          {
            "exercise": "Use `tf.keras.Sequential()` to stack layers",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add `Dense`, `Dropout`, and activations",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Define loss, optimizer, and metrics",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Compile and summarize the model",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `model.fit()` and `model.evaluate()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Loading and Preprocessing Data",
        "exercises": [
          {
            "exercise": "Use `tf.data.Dataset.from_tensor_slices()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Batch, shuffle, and prefetch data",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Load datasets like MNIST with `tf.keras.datasets`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Normalize and transSkill features",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Augment image data with preprocessing layers",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Advanced Features",
        "exercises": [
          {
            "exercise": "Use callbacks like `ModelCheckpoint` and `EarlyStopping`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Visualize with `TensorBoard`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Save and load models (`.h5` or SavedModel Skillat)",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Create custom loss and metric functions",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Tune hyperparameters with `keras-tuner`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Inference and Deployment",
        "exercises": [
          {
            "exercise": "Run predictions with `model.predict()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Export models for mobile/web/TF Lite",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Quantize and optimize models",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Serve with TensorFlow Serving or FastAPI",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Monitor and retrain over time",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 48: Packaging, Publishing, and Distributing Python Projects",
    "skills": [
      {
        "skill": "Skill 1: Structuring a Python Package",
        "exercises": [
          {
            "exercise": "Create a package directory with `__init__.py`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Organize code into modules and subpackages",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `src/` layout for clean project root",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add `README.md`, `LICENSE`, and `pyproject.toml`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Keep tests in a separate directory",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Using `setuptools` and `pyproject.toml`",
        "exercises": [
          {
            "exercise": "Define metadata like name, version, author",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add dependencies and optional extras",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `setup.cfg` and/or `pyproject.toml`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Build distributions with `python -m build`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Install locally with `pip install -e .`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Creating CLI Entry Points",
        "exercises": [
          {
            "exercise": "Use `entry_points` in setup config",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add `console_scripts` entry",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Test installation via terminal",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `argparse` or `click` for command logic",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add a `__main__.py` for `python -m yourpkg`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Publishing to PyPI",
        "exercises": [
          {
            "exercise": "Register an account at PyPI.org",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Build wheels with `build`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Upload with `twine upload dist/*`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Test first with TestPyPI",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `__version__` and changelogs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 5: Best Practices",
        "exercises": [
          {
            "exercise": "Pin versions and manage dependencies",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use virtual environments",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `.gitignore` and `MANIFEST.in`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Add typing, linting, and tests",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Automate releases with CI tools",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 49: Security Best Practices in Python",
    "skills": [
      {
        "skill": "Skill 1: Code Safety Fundamentals",
        "exercises": [
          {
            "exercise": "Never use `eval()` or `exec()` on untrusted input",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Escape all user inputs when Skillatting",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid hardcoding secrets",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Validate data and sanitize inputs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use linters and type checkers to catch bugs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 2: Managing Secrets and Environment Variables",
        "exercises": [
          {
            "exercise": "Use `.env` files and `python-dotenv`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Access secrets via `os.environ`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use environment-specific configs",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Avoid printing sensitive info",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Rotate secrets regularly",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 3: Secure File and Data Handling",
        "exercises": [
          {
            "exercise": "Use context managers for file access",
            "answer": "class ContextManager:\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        pass"
          },
          {
            "exercise": "Avoid temp files with predictable names",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `with tempfile.NamedTemporaryFile()`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Clean up files after use",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Encrypt sensitive data if stored locally",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          }
        ]
      },
      {
        "skill": "Skill 4: Dependency Security",
        "exercises": [
          {
            "exercise": "Pin versions and audit with `pip-audit`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Use `pip freeze > requirements.txt`",
            "answer": "# Implementation\nresult = process_data(input_value)\nprint(result)"
          },
          {
            "exercise": "Scan dependencies with tools like `safety` or `bandit`"
          },
          {
            "exercise": "Watch for abandoned or malicious packages"
          },
          {
            "exercise": "Use trusted indexes (e.g., PyPI only)"
          }
        ]
      },
      {
        "skill": "Skill 5: Application-Level Hardening",
        "exercises": [
          {
            "exercise": "Use `hashlib` or `bcrypt` for password hashing"
          },
          {
            "exercise": "Avoid storing plaintext credentials"
          },
          {
            "exercise": "Limit permissions (principle of least privilege)"
          },
          {
            "exercise": "Use secure HTTP and SSL validation"
          },
          {
            "exercise": "Log securely \u2014 scrub sensitive fields"
          }
        ]
      }
    ]
  },
  {
    "lesson": "Lesson 50: Design Patterns & Refactoring in Python",
    "skills": [
      {
        "skill": "Skill 1: Foundational Principles",
        "exercises": [
          {
            "exercise": "Understand the SOLID principles"
          },
          {
            "exercise": "Use DRY and YAGNI appropriately"
          },
          {
            "exercise": "Practice separation of concerns"
          },
          {
            "exercise": "Avoid code repetition and tight coupling"
          },
          {
            "exercise": "Use docstrings and comments wisely"
          }
        ]
      },
      {
        "skill": "Skill 2: Common Pythonic Patterns",
        "exercises": [
          {
            "exercise": "Use Factory pattern for object creation"
          },
          {
            "exercise": "Use Strategy for interchangeable behaviors"
          },
          {
            "exercise": "Use Singleton when one instance is needed"
          },
          {
            "exercise": "Use Decorator for layered functionality"
          },
          {
            "exercise": "Use Observer to track changes"
          }
        ]
      },
      {
        "skill": "Skill 3: Python-Specific Idioms",
        "exercises": [
          {
            "exercise": "Use `@property` and descriptors"
          },
          {
            "exercise": "Use context managers (`with`) to wrap behavior"
          },
          {
            "exercise": "Use `__slots__` to reduce memory footprint"
          },
          {
            "exercise": "Use `functools.lru_cache()` for memoization"
          },
          {
            "exercise": "Use dataclasses to reduce boilerplate"
          }
        ]
      },
      {
        "skill": "Skill 4: Refactoring Techniques",
        "exercises": [
          {
            "exercise": "Extract functions and classes"
          },
          {
            "exercise": "Eliminate duplication"
          },
          {
            "exercise": "Replace nested conditionals with polymorphism"
          },
          {
            "exercise": "Simplify complex loops with comprehensions"
          },
          {
            "exercise": "Rename variables and functions for clarity"
          }
        ]
      },
      {
        "skill": "Skill 5: Testing and Maintainability",
        "exercises": [
          {
            "exercise": "Write tests before and after refactoring"
          },
          {
            "exercise": "Use `unittest` or `pytest` for coverage"
          },
          {
            "exercise": "Ensure backwards compatibility"
          },
          {
            "exercise": "Use code review and linters"
          },
          {
            "exercise": "Document why the code was changed"
          }
        ]
      }
    ]
  }
]